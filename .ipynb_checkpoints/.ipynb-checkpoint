{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " # Data visualization for DAVE3625_FinalProject"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-08-01 00:04:12.542000+00:00</td>\n",
       "      <td>2020-08-01 00:08:33.462000+00:00</td>\n",
       "      <td>260</td>\n",
       "      <td>423</td>\n",
       "      <td>Schous plass</td>\n",
       "      <td>nærmest rundkjøringen</td>\n",
       "      <td>59.920335</td>\n",
       "      <td>10.760804</td>\n",
       "      <td>460</td>\n",
       "      <td>Botanisk Hage sør</td>\n",
       "      <td>langs Jens Bjelkes gate</td>\n",
       "      <td>59.915418</td>\n",
       "      <td>10.769330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-08-01 01:54:23.528000+00:00</td>\n",
       "      <td>2020-08-01 02:01:20.350000+00:00</td>\n",
       "      <td>416</td>\n",
       "      <td>412</td>\n",
       "      <td>Jakob kirke</td>\n",
       "      <td>langs Torggata</td>\n",
       "      <td>59.917866</td>\n",
       "      <td>10.754898</td>\n",
       "      <td>503</td>\n",
       "      <td>Fagerheimgata</td>\n",
       "      <td>ved Dælenenga busstopp</td>\n",
       "      <td>59.927606</td>\n",
       "      <td>10.765985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-08-01 03:00:08.082000+00:00</td>\n",
       "      <td>2020-08-01 03:10:36.755000+00:00</td>\n",
       "      <td>628</td>\n",
       "      <td>407</td>\n",
       "      <td>Sagene bussholdeplass</td>\n",
       "      <td>langs Kierschovs gate</td>\n",
       "      <td>59.937743</td>\n",
       "      <td>10.751648</td>\n",
       "      <td>599</td>\n",
       "      <td>Paléhaven</td>\n",
       "      <td>langs Strandgata</td>\n",
       "      <td>59.910331</td>\n",
       "      <td>10.750110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-08-01 03:00:19.792000+00:00</td>\n",
       "      <td>2020-08-01 03:05:55.369000+00:00</td>\n",
       "      <td>335</td>\n",
       "      <td>579</td>\n",
       "      <td>Bogstadveien</td>\n",
       "      <td>ved Sporveisgata</td>\n",
       "      <td>59.924732</td>\n",
       "      <td>10.724628</td>\n",
       "      <td>623</td>\n",
       "      <td>7 Juni Plassen</td>\n",
       "      <td>langs Henrik Ibsens gate</td>\n",
       "      <td>59.915060</td>\n",
       "      <td>10.731272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-08-01 03:00:40.721000+00:00</td>\n",
       "      <td>2020-08-01 03:13:23.463000+00:00</td>\n",
       "      <td>762</td>\n",
       "      <td>525</td>\n",
       "      <td>Myraløkka Øst</td>\n",
       "      <td>ved Bentsenbrua</td>\n",
       "      <td>59.937205</td>\n",
       "      <td>10.760581</td>\n",
       "      <td>585</td>\n",
       "      <td>Nordre gate</td>\n",
       "      <td>ved Grünerbrua</td>\n",
       "      <td>59.921150</td>\n",
       "      <td>10.754714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         started_at                          ended_at  \\\n",
       "0  2020-08-01 00:04:12.542000+00:00  2020-08-01 00:08:33.462000+00:00   \n",
       "1  2020-08-01 01:54:23.528000+00:00  2020-08-01 02:01:20.350000+00:00   \n",
       "2  2020-08-01 03:00:08.082000+00:00  2020-08-01 03:10:36.755000+00:00   \n",
       "3  2020-08-01 03:00:19.792000+00:00  2020-08-01 03:05:55.369000+00:00   \n",
       "4  2020-08-01 03:00:40.721000+00:00  2020-08-01 03:13:23.463000+00:00   \n",
       "\n",
       "   duration  start_station_id     start_station_name  \\\n",
       "0       260               423           Schous plass   \n",
       "1       416               412            Jakob kirke   \n",
       "2       628               407  Sagene bussholdeplass   \n",
       "3       335               579           Bogstadveien   \n",
       "4       762               525          Myraløkka Øst   \n",
       "\n",
       "  start_station_description  start_station_latitude  start_station_longitude  \\\n",
       "0     nærmest rundkjøringen               59.920335                10.760804   \n",
       "1            langs Torggata               59.917866                10.754898   \n",
       "2     langs Kierschovs gate               59.937743                10.751648   \n",
       "3          ved Sporveisgata               59.924732                10.724628   \n",
       "4           ved Bentsenbrua               59.937205                10.760581   \n",
       "\n",
       "   end_station_id   end_station_name   end_station_description  \\\n",
       "0             460  Botanisk Hage sør   langs Jens Bjelkes gate   \n",
       "1             503      Fagerheimgata    ved Dælenenga busstopp   \n",
       "2             599          Paléhaven          langs Strandgata   \n",
       "3             623     7 Juni Plassen  langs Henrik Ibsens gate   \n",
       "4             585        Nordre gate            ved Grünerbrua   \n",
       "\n",
       "   end_station_latitude  end_station_longitude  \n",
       "0             59.915418              10.769330  \n",
       "1             59.927606              10.765985  \n",
       "2             59.910331              10.750110  \n",
       "3             59.915060              10.731272  \n",
       "4             59.921150              10.754714  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from mapboxgl.viz import *\n",
    "from mapboxgl.utils import *\n",
    "from scipy.cluster.vq import kmeans2, whiten\n",
    "\n",
    "# Load Data Set\n",
    "year  = \"2020\"\n",
    "month = \"08\"\n",
    "URL = f\"https://data.urbansharing.com/oslobysykkel.no/trips/v1/{year}/{month}.csv\"\n",
    "o_df = pd.read_csv(URL)\n",
    "\n",
    "\n",
    "#Matbox token\n",
    "token = \"pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw\"\n",
    "o_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converting dates to datetime\n",
    "o_df[\"started_at\"]= pd.to_datetime(o_df[\"started_at\"]) \n",
    "o_df[\"ended_at\"]= pd.to_datetime(o_df[\"ended_at\"])\n",
    "o_df['Ukedag'] = o_df['started_at'].dt.day_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Not needed for current program\n",
    "# df = o_df[[\"started_at\",\"Ukedag\",\"start_station_id\",\"end_station_id\"]]\n",
    "# df = df.rename(columns={\"start_station_id\":\"sId\",\"end_station_id\":\"eId\"})\n",
    "# df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>Ukedag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-08-01 00:04:12.542000+00:00</td>\n",
       "      <td>2020-08-01 00:08:33.462000+00:00</td>\n",
       "      <td>260</td>\n",
       "      <td>423</td>\n",
       "      <td>Schous plass</td>\n",
       "      <td>nærmest rundkjøringen</td>\n",
       "      <td>59.920335</td>\n",
       "      <td>10.760804</td>\n",
       "      <td>460</td>\n",
       "      <td>Botanisk Hage sør</td>\n",
       "      <td>langs Jens Bjelkes gate</td>\n",
       "      <td>59.915418</td>\n",
       "      <td>10.769330</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-08-01 01:54:23.528000+00:00</td>\n",
       "      <td>2020-08-01 02:01:20.350000+00:00</td>\n",
       "      <td>416</td>\n",
       "      <td>412</td>\n",
       "      <td>Jakob kirke</td>\n",
       "      <td>langs Torggata</td>\n",
       "      <td>59.917866</td>\n",
       "      <td>10.754898</td>\n",
       "      <td>503</td>\n",
       "      <td>Fagerheimgata</td>\n",
       "      <td>ved Dælenenga busstopp</td>\n",
       "      <td>59.927606</td>\n",
       "      <td>10.765985</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-08-01 03:00:08.082000+00:00</td>\n",
       "      <td>2020-08-01 03:10:36.755000+00:00</td>\n",
       "      <td>628</td>\n",
       "      <td>407</td>\n",
       "      <td>Sagene bussholdeplass</td>\n",
       "      <td>langs Kierschovs gate</td>\n",
       "      <td>59.937743</td>\n",
       "      <td>10.751648</td>\n",
       "      <td>599</td>\n",
       "      <td>Paléhaven</td>\n",
       "      <td>langs Strandgata</td>\n",
       "      <td>59.910331</td>\n",
       "      <td>10.750110</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-08-01 03:00:19.792000+00:00</td>\n",
       "      <td>2020-08-01 03:05:55.369000+00:00</td>\n",
       "      <td>335</td>\n",
       "      <td>579</td>\n",
       "      <td>Bogstadveien</td>\n",
       "      <td>ved Sporveisgata</td>\n",
       "      <td>59.924732</td>\n",
       "      <td>10.724628</td>\n",
       "      <td>623</td>\n",
       "      <td>7 Juni Plassen</td>\n",
       "      <td>langs Henrik Ibsens gate</td>\n",
       "      <td>59.915060</td>\n",
       "      <td>10.731272</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-08-01 03:00:40.721000+00:00</td>\n",
       "      <td>2020-08-01 03:13:23.463000+00:00</td>\n",
       "      <td>762</td>\n",
       "      <td>525</td>\n",
       "      <td>Myraløkka Øst</td>\n",
       "      <td>ved Bentsenbrua</td>\n",
       "      <td>59.937205</td>\n",
       "      <td>10.760581</td>\n",
       "      <td>585</td>\n",
       "      <td>Nordre gate</td>\n",
       "      <td>ved Grünerbrua</td>\n",
       "      <td>59.921150</td>\n",
       "      <td>10.754714</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        started_at                         ended_at  duration  \\\n",
       "0 2020-08-01 00:04:12.542000+00:00 2020-08-01 00:08:33.462000+00:00       260   \n",
       "1 2020-08-01 01:54:23.528000+00:00 2020-08-01 02:01:20.350000+00:00       416   \n",
       "2 2020-08-01 03:00:08.082000+00:00 2020-08-01 03:10:36.755000+00:00       628   \n",
       "3 2020-08-01 03:00:19.792000+00:00 2020-08-01 03:05:55.369000+00:00       335   \n",
       "4 2020-08-01 03:00:40.721000+00:00 2020-08-01 03:13:23.463000+00:00       762   \n",
       "\n",
       "   start_station_id     start_station_name start_station_description  \\\n",
       "0               423           Schous plass     nærmest rundkjøringen   \n",
       "1               412            Jakob kirke            langs Torggata   \n",
       "2               407  Sagene bussholdeplass     langs Kierschovs gate   \n",
       "3               579           Bogstadveien          ved Sporveisgata   \n",
       "4               525          Myraløkka Øst           ved Bentsenbrua   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               59.920335                10.760804             460   \n",
       "1               59.917866                10.754898             503   \n",
       "2               59.937743                10.751648             599   \n",
       "3               59.924732                10.724628             623   \n",
       "4               59.937205                10.760581             585   \n",
       "\n",
       "    end_station_name   end_station_description  end_station_latitude  \\\n",
       "0  Botanisk Hage sør   langs Jens Bjelkes gate             59.915418   \n",
       "1      Fagerheimgata    ved Dælenenga busstopp             59.927606   \n",
       "2          Paléhaven          langs Strandgata             59.910331   \n",
       "3     7 Juni Plassen  langs Henrik Ibsens gate             59.915060   \n",
       "4        Nordre gate            ved Grünerbrua             59.921150   \n",
       "\n",
       "   end_station_longitude    Ukedag  \n",
       "0              10.769330  Saturday  \n",
       "1              10.765985  Saturday  \n",
       "2              10.750110  Saturday  \n",
       "3              10.731272  Saturday  \n",
       "4              10.754714  Saturday  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "o_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A class for station objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A class to keep station data\n",
    "class station:\n",
    "    def __init__(self, id,longitude,latitude,name, change = 0, zone = 0):\n",
    "        self.id = id\n",
    "        self.long = longitude\n",
    "        self.lat = latitude\n",
    "        self.name = name\n",
    "        self.change = change\n",
    "        self.zone = zone\n",
    "    \n",
    "    def updateChange(self, tick):\n",
    "        self.change += tick\n",
    "    def setZone(self, zone):\n",
    "        self.zone = zone\n",
    "    def getZone(self):\n",
    "        return self.zone        \n",
    "    def getId(self):\n",
    "        return self.id\n",
    "    def getName(self):\n",
    "        return self.name\n",
    "    def getLongLat(self):\n",
    "        return [self.long,self.lat]\n",
    "    def getChange(self):\n",
    "        return self.change\n",
    "    def export(self):\n",
    "        return [self.id,self.name,self.long,self.lat,self.change,self.zone]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>Ukedag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>738</th>\n",
       "      <td>2020-08-01 08:51:13.898000+00:00</td>\n",
       "      <td>2020-08-01 09:01:26.176000+00:00</td>\n",
       "      <td>612</td>\n",
       "      <td>377</td>\n",
       "      <td>Tøyenparken</td>\n",
       "      <td>ved Caltexløkka</td>\n",
       "      <td>59.915667</td>\n",
       "      <td>10.777566</td>\n",
       "      <td>411</td>\n",
       "      <td>Hasle Torg</td>\n",
       "      <td>ved busstoppet</td>\n",
       "      <td>59.923240</td>\n",
       "      <td>10.792831</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280871</th>\n",
       "      <td>2020-08-30 15:29:33.358000+00:00</td>\n",
       "      <td>2020-08-30 15:45:21.389000+00:00</td>\n",
       "      <td>948</td>\n",
       "      <td>378</td>\n",
       "      <td>Colosseum Kino</td>\n",
       "      <td>langs Fridtjof Nansens vei</td>\n",
       "      <td>59.929843</td>\n",
       "      <td>10.711285</td>\n",
       "      <td>597</td>\n",
       "      <td>Fredensborg</td>\n",
       "      <td>ved rundkjøringen</td>\n",
       "      <td>59.920995</td>\n",
       "      <td>10.750358</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115071</th>\n",
       "      <td>2020-08-14 06:51:30.728000+00:00</td>\n",
       "      <td>2020-08-14 06:59:00.415000+00:00</td>\n",
       "      <td>449</td>\n",
       "      <td>380</td>\n",
       "      <td>Bentsebrugata</td>\n",
       "      <td>rett over busstoppet</td>\n",
       "      <td>59.939230</td>\n",
       "      <td>10.759170</td>\n",
       "      <td>391</td>\n",
       "      <td>St. Hanshaugen park vest</td>\n",
       "      <td>ved busstoppet Colletts gate</td>\n",
       "      <td>59.926871</td>\n",
       "      <td>10.738463</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121727</th>\n",
       "      <td>2020-08-14 16:38:46.362000+00:00</td>\n",
       "      <td>2020-08-14 16:46:19.693000+00:00</td>\n",
       "      <td>453</td>\n",
       "      <td>381</td>\n",
       "      <td>Grønlands torg</td>\n",
       "      <td>ved Tøyenbekken</td>\n",
       "      <td>59.912520</td>\n",
       "      <td>10.762240</td>\n",
       "      <td>489</td>\n",
       "      <td>Torggata</td>\n",
       "      <td>ved Bernt Ankers gate</td>\n",
       "      <td>59.915983</td>\n",
       "      <td>10.751551</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4679</th>\n",
       "      <td>2020-08-01 16:11:31.781000+00:00</td>\n",
       "      <td>2020-08-01 16:34:07.059000+00:00</td>\n",
       "      <td>1355</td>\n",
       "      <td>382</td>\n",
       "      <td>Stensgata</td>\n",
       "      <td>ved trikkestoppet</td>\n",
       "      <td>59.929586</td>\n",
       "      <td>10.732839</td>\n",
       "      <td>494</td>\n",
       "      <td>Rådhusbrygge 4</td>\n",
       "      <td>ved Nesoddbåten</td>\n",
       "      <td>59.910847</td>\n",
       "      <td>10.730377</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             started_at                         ended_at  \\\n",
       "738    2020-08-01 08:51:13.898000+00:00 2020-08-01 09:01:26.176000+00:00   \n",
       "280871 2020-08-30 15:29:33.358000+00:00 2020-08-30 15:45:21.389000+00:00   \n",
       "115071 2020-08-14 06:51:30.728000+00:00 2020-08-14 06:59:00.415000+00:00   \n",
       "121727 2020-08-14 16:38:46.362000+00:00 2020-08-14 16:46:19.693000+00:00   \n",
       "4679   2020-08-01 16:11:31.781000+00:00 2020-08-01 16:34:07.059000+00:00   \n",
       "\n",
       "        duration  start_station_id start_station_name  \\\n",
       "738          612               377        Tøyenparken   \n",
       "280871       948               378     Colosseum Kino   \n",
       "115071       449               380      Bentsebrugata   \n",
       "121727       453               381     Grønlands torg   \n",
       "4679        1355               382          Stensgata   \n",
       "\n",
       "         start_station_description  start_station_latitude  \\\n",
       "738                ved Caltexløkka               59.915667   \n",
       "280871  langs Fridtjof Nansens vei               59.929843   \n",
       "115071        rett over busstoppet               59.939230   \n",
       "121727             ved Tøyenbekken               59.912520   \n",
       "4679             ved trikkestoppet               59.929586   \n",
       "\n",
       "        start_station_longitude  end_station_id          end_station_name  \\\n",
       "738                   10.777566             411                Hasle Torg   \n",
       "280871                10.711285             597               Fredensborg   \n",
       "115071                10.759170             391  St. Hanshaugen park vest   \n",
       "121727                10.762240             489                  Torggata   \n",
       "4679                  10.732839             494            Rådhusbrygge 4   \n",
       "\n",
       "             end_station_description  end_station_latitude  \\\n",
       "738                   ved busstoppet             59.923240   \n",
       "280871             ved rundkjøringen             59.920995   \n",
       "115071  ved busstoppet Colletts gate             59.926871   \n",
       "121727         ved Bernt Ankers gate             59.915983   \n",
       "4679                 ved Nesoddbåten             59.910847   \n",
       "\n",
       "        end_station_longitude    Ukedag  \n",
       "738                 10.792831  Saturday  \n",
       "280871              10.750358    Sunday  \n",
       "115071              10.738463    Friday  \n",
       "121727              10.751551    Friday  \n",
       "4679                10.730377  Saturday  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting only uniqe station ID's\n",
    "o_df = o_df.sort_values('start_station_id', ascending=False)\n",
    "sdf = o_df.drop_duplicates(subset='start_station_name', keep='first')\n",
    "sdf = sdf.sort_values('start_station_id', ascending=True)\n",
    "sdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Assign each station to it¨s own station object\n",
    "listOfStations=[]\n",
    "for index, row in sdf.iterrows():\n",
    "                  #id,latitude,longitude\n",
    "    tmp = station(row[3],row[6],row[7],row[4])\n",
    "    listOfStations.append(tmp)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Putting stations into zones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Longitude')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4YAAAJkCAYAAABNiD8wAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAADqv0lEQVR4nOzdd3xUVfr48c+9U5NJ70CA0ALSe2/SFASx69pXXXvZ1d3Vre5X19WtuurPXd3irrj2jgUVUCyAFGnSO6Gk9zLt3vP7I2ZkmAAJTDLJ5Hm/Xr5knsycOZO5mbnPPec8R1NKKYQQQgghhBBCdFh6pDsghBBCCCGEECKyJDEUQgghhBBCiA5OEkMhhBBCCCGE6OAkMRRCCCGEEEKIDk4SQyGEEEIIIYTo4CQxFEIIIYQQQogOThJDIYRoRUuWLOGmm25i3LhxDBw4kIkTJ3LLLbewZMmSRu9fWFjI66+/flrP+cUXX7Bx48bA7a+++oq+ffvy0EMPnVa7bcXBgwfp27cvt956a4s/Vzjej5b00EMP0bdvX7766qsT3u+JJ56gb9++LF68uMX7dNVVV9G3b18qKytb/LmEEEKcOkkMhRCilTz44IPceuut7Ny5k+nTp/P973+f8ePH8/XXX3Prrbfyq1/9Kuj+JSUlnH322cdNGpvihRde4Prrr6ewsDAQ69KlC7fffjuTJk065XY7onC8H0IIIURbZY10B4QQoiP46quveP755znrrLP4y1/+gtX63cdvVVUVV199Na+88gpTpkxhxowZANTV1VFTU3Naz1tSUhISy87O5o477jitdjuicLwfQgghRFslI4ZCCNEKPv30UwCuuOKKoKQQID4+nnvuuQeAjz/+uLW7JoQQQgghiaEQQrQGn88HwI4dOxr9+ciRI3nssce49tprAXjjjTeYPn06UL8usW/fvrzxxhuB+3/yySfccMMNjB07lgEDBjB27FhuvfVWtm7dGrjPVVddxZNPPgnAbbfdRt++fYHjrzHcu3cvP/7xjxk/fjwDBw5kxowZ/OEPf6Cqqirofvfddx99+/aloqKC+++/nwkTJjBo0CAuuOACPvzww5DXtmDBAi644AKGDRvG8OHDufzyy/nggw+a/LtbvXo1N910E2PGjGHEiBFcdtllJ10b19DHo38fDfr27cv8+fODYu+++y6XXXYZo0aNYtiwYVx44YW88MILKKWAk78f+/fvD/rdzZ49m6effjrwvjeYNm0aV111Fa+//jrjx49n2LBhPPLII4Gfr1ixgu9///uMGDGCoUOHcumll7Jo0aJGX+Nrr73Gueeey5AhQ5g1axYvvfTSCX8njXG73fzud79j3LhxDB06lKuuuipofeKhQ4fo168f3/ve9xp9/NVXX82QIUOorq5u1vN++eWXDBw4kKlTp3Lw4EGg/j3r378/ZWVl/PKXv2Ts2LEMGzaM66+/ngMHDuD1evnjH//IxIkTGT58OFdddRXbtm0Labup7wXA2rVruf3225k4cSIDBw5k1KhRfP/732flypVB92vtY14IISJBppIKIUQrmDBhAgsWLOD3v/89+/btY+7cuQwePBiLxQKA0+lk9uzZgfufccYZXH311Tz33HP06NGDc845hzPOOAOA559/ngcffJBu3boxd+5cbDYbmzZtYsmSJaxcuZJFixaRkZHB+eefD8CqVauYM2cOPXv2PG7/NmzYwLXXXovb7ebMM8+ka9eurF+/nn/961988sknvPjiiyQlJQU95vvf/z7l5eXMnj2b2tpaFi5cyF133cXzzz/PyJEjAXjmmWf485//zIABA7jsssvw+XwsWrSIH/7wh3g8Hs4777wT/t7efvttfvazn+F0Opk+fTrJycl8+OGH3HbbbTz00ENcdNFFzX0rQrz//vvcc8895OTkcP7556PrOkuWLOH//u//KCsr47bbbjvh+7F582auueYa3G43s2bNonPnzqxZs4a//OUvrF69mqeffjrwPgPs3LmTBx54gPnz5+Pz+Rg6dCgAr776Kr/61a9ISUlhzpw5xMbGsmTJEu666y5+9KMfcfPNNwfaeOyxx/jb3/5Gly5duOiiiygqKuKBBx4gJSWlWa/9kUcewefzMXfuXGpqali0aBHf//73eeqpp5g6dSpdunRh1KhRrF69mkOHDtGlS5fAYwsKCli9ejWzZ88mLi6uyc+5fv16br/9dpKTk/nvf/9LdnZ24GdKKa6++mpM0+T8889nx44dfPHFF9x00010796dHTt2cPbZZ1NUVMSiRYu48cYb+fDDD4mJiWn2e7F48WLuvPNOUlJSmDFjBi6Xi507d/LZZ5+xatUqXnvttcB73KA1jnkhhIgYJYQQolXcf//9Kjc3N/Df8OHD1Q9+8AP17LPPqiNHjoTcPy8vT+Xm5qpbbrklEPN4PGr48OFq1qxZqqamptH2X3rppUDs8ccfV7m5uerjjz8OxFauXKlyc3PVb3/7W6WUUn6/X82aNUv1799fLVu2LKjNP/7xjyo3N1f97Gc/C8TuvfdelZubqy666KKgPrzzzjsqNzdX/eQnPwnERo8erWbMmKF8Pl8gduTIETVw4EB1wQUXnPD3VV5erkaMGKHGjh2r9uzZE4iXlJSoiRMnqtGjRyuv19vo76mhj1u2bAlpNzc3V5177rmB2+eff74aOnSoqqqqCsSqqqrUhAkT1NixY5Vpmkqpxt8P0zTV3Llz1aBBg9SmTZuCnud3v/udys3NVc8//3wgduaZZ6rc3Fz13HPPBd234Xcye/ZsVVpaGojX1dWpSy+9VPXr109t375dKaXU3r17Vf/+/dX8+fNVRUVF4L5Lly5Vffv2Vbm5uWrlypUn/N02HBejRo1SeXl5gfjmzZvVkCFD1NSpU5Xf71dKKfXaa6+p3Nxc9fTTTwe18Y9//EPl5uaqTz/99ITPdeWVV6rc3FxVUVGhtm3bpkaNGqXGjx+vdu3aFXS/hvfs4osvVh6PJxC/9NJLVW5urpo2bVrQe3TfffcFPX9z34uzzjpLjR49WhUVFQXd95lnnlG5ubnqz3/+c0jfWvqYF0KISJKppEII0Up+85vf8PTTTzNp0iRsNhvV1dUsW7aMhx9+mBkzZvDnP/8Z0zRP2IZhGDz44IM89NBDxMbGBv1s9OjRQOMFZ05k3bp17Nu3j3POOYfJkycH/ezOO+8kMzOThQsX4vV6g352xRVXBPVhypQpAOzbty8QU0pRWlrK3r17A7GsrCw++OADXnjhhRP2a9myZVRVVXHNNdfQo0ePQDwlJYWf/exn3HDDDdTW1jbrtTZGKYXb7WbLli2BWFxcHK+99hpLlixB07TjPnbDhg3s2LGDiy66iIEDBwb97K677sJmswVNOW1w1llnBd1+55138Hq93HnnnSQnJwfiTqeTO++8E9M0efPNNwFYtGgRfr+fm2++mYSEhMB9zzzzTCZOnNis13711VcHjdj179+fc889l8OHD7NmzZpAX2NiYnj33XdD+pyamsqECROa9Fx5eXlcf/316LrOs88+S69evRq93/e+9z3sdnvg9rBhwwC49NJLg0YmBw8eDNRPd4XmvRemaXLPPffwhz/8gbS0tKD7jhkzBmj876ilj3khhIgkmUoqhBCtaOrUqUydOpWamhrWrFnDihUrWLp0Kfv37+eZZ57BNE1+8pOfHPfxMTExzJkzB6hfE7h7924OHDjAzp07WbFiBcBJk8tjNazDGzVqVMjP7HY7gwYNYvHixezZs4d+/foFfnZ0sgb1RXSAoATy0ksv5ZlnnuHcc89l0KBBTJ48mSlTpjBo0KCT9qth/VjDVMujNfwOgJA1kM116aWXcv/99wf222vo44gRI9D1E18/3bx5MwAHDhzgiSeeCPm5y+Vi+/btKKUCCabNZiMjIyPoft988w1Qv8Zw586dQT9rSH4bfh8N/z82+YH6JOrzzz8/6WtuMHz48JDY4MGDefnll9m2bRtjxowhLi6OGTNmsHDhQnbu3EmfPn3YsWMH27dv5+qrrw4ppnQ8N998M0VFRQwaNIjevXsf937dunULut2QiB2dwAI4HA7gu+OtOe+FruvMnDkTqE8sd+7cyYEDB9i1a1dgjWVjf0ctfcwLIUQkSWIohBAR4HK5mDJlClOmTOHee+/ltdde41e/+hXPP/88t99+e2DNVGNWr17Nww8/HDgRdjgc9OvXjwEDBnDkyJFAwZSmaigccrx1Yg1JTF1dXVD86FEdIJD4HP38d999N927d+ell15i48aNbNiwgSeeeIIePXpw//33M27cuOP2q2FD9OasXzsVl112GampqTz33HOsXbuW7du3849//IPMzEzuu+++oCT0eH38/PPPT5iQ1dTUBF6H0+kM+XlDcnuiAjIVFRVBz+lyuULuc+w60JNJTU0NiTW0e/Ro7HnnncfChQt59913+dGPfsQ777wDEFLE50Sqq6sZO3YsK1eu5IUXXuDKK69s9H7HjoQ3OPZ4O1Zz34vt27fz29/+llWrVgH1CXuvXr0YOHAg+/bta/TvqKWPeSGEiCRJDIUQooVVV1dzwQUX0KNHD55++umQn2uaxsUXX8yiRYv44osvyM/PDxmZaHDo0CF+8IMf4HA4ePDBBxkxYgQ5OTlYLBbef//9k1brbExDIlBYWNjozxtOuJubdED9a7vooou46KKLKCkpYfny5Xz88cd89NFH3HLLLSxduvS4BVMaEoTG9g70er3oun7c0arGTtghNLltMHPmTGbOnEllZSVfffUVS5cuZeHChdxzzz307t2b3NzcE/bxdAvhNLSzePFiunbtesL7Nkwfra6uDpp2Co3/rk6ksdHWhuMgMTExEBs/fjyZmZksWrSIH/3oR3zwwQf07t270VHL43nqqafIzc1l9uzZ/OUvf2HmzJlkZmY2q78n0pz3orq6muuuu46qqiruvfdexo8fT8+ePbHb7WzYsCFk2mxznM4xL4QQkSRrDIUQooXFxcVRVVXF8uXLKS4uPuF9dV0nPT0doNG1bYsXL6auro4777yTSy65hF69egWqLO7evRsIToZOtD6uQUPlxbVr14b8zDRN1q5dS2xsbFBFyqYoKyvjiSeeCKyNS01NZd68eTz++ONccMEF1NXVBa3rO1ZDMrZx48aQn/3rX/9iyJAhgdGeY9lsNoCQNYgHDhwIuu31evnb3/7Gf/7zH6A+6Zo5cyYPP/wwt9xyC6Zpsm7dOqDx32XDFiANU0GP5vP5eOSRR1iwYMFxX+Ox7WzatCnkZ/v27eP3v/89S5cuBWDAgAFA4+9XY/04kcaeb/369UDwVFVd15k3bx779u3jo48+4uDBg80aLYT6fqempvLDH/6QmpoaHnjggWY9/mSa816sXLmS4uJirrjiCq677jr69esXGA1s7O+oqU73mBdCiEiSxFAIIVrBFVdcESgu0tjI3JIlS1i+fDkzZ84MTDlsGA07ev+1hnVVxyaY27Zt47nnngPA7/cH4g1tHFs45mgjRoyge/fufPTRRyxbtizoZ48//jhHjhxh9uzZJ53KdyyXy8Vzzz3Ho48+Snl5edDPDh8+DEDnzp2P+/gZM2YQGxvLggULAgVGAMrLy3n55ZdxuVyNrj8EAltzfPLJJ4GYaZr8/e9/D7qf3W7n3Xff5a9//St5eXlBP2t4zoY+NvZ+jBo1iuzsbF577bVAAtngmWee4dlnnw1M+T2Rc889F4vFwmOPPUZRUVEg7vf7efDBB/n3v/8d+B3OmTMHh8PB3/72t6D7rlmzJpA8NtWCBQsoLS0NamPRokX06dMnUNylQcP2J4888giapjFv3rxmPVeDyy67jIEDB7J48eJTGuE+nua8Fw1/R8cWmDl8+HBg78+j/46a6nSPeSGEiCSZSiqEEK3glltuYceOHXz44YfMmjWLiRMnkpOTg9/vZ8OGDXz99df07NmT3/zmN4HHJCcnY7fb+eqrr3j44YeZOXMmZ555Jn/+8595+umn2bNnD926dWP//v188skngUIYR5+QNkzV+9vf/sbWrVu5/fbbQ/qm6zqPPPII119/PTfffDNnnnkm3bp1Y926daxfv55evXrx05/+tNmv2W63c+edd/Lb3/6WuXPnMnPmTJxOJ6tXr2bTpk3Mnz//hHsrJiUl8etf/5qf/exnnH/++UyfPh2Xy8WiRYsoKiriySefPG6yOnfuXP7617/yr3/9i7y8PLKzs/nyyy+prKwMOTG/++67ue222zj//PM5++yzSUxM5JtvvmHlypWMHj06UHWzsfdj5MiR/P73v+cHP/gBV155JdOnT6dr166Bx2dnZ3P33Xef9HeVk5PDT37yEx555BHmzp3LtGnTSExM5LPPPmP37t2ceeaZnHvuuQB06dKFe++9lwceeIDzzz+fmTNnUlVVxaJFi+jUqVPIqOiJWK1W5s+fz5w5cygpKWHRokU4nU4efvjhkPv27t2bAQMGsHnzZsaMGUOnTp2a/DxH03Wd3/zmN1xyySU88MADjB07NizrSC0WS5PfixEjRtClSxfefvttysrK6NevH0eOHGHJkiU4HA40TQtJ7JridI95IYSIJBkxFEKIVmCxWHj88cd58sknmTRpEps2beK5557j1VdfxePxcM899/Dmm28GrT2y2+38+te/JjExkRdeeIGVK1eSmZnJs88+G1TEY+/evVx11VV88MEHJCUl8fnnnwemwc2ZM4fZs2eTl5fHCy+8EDTydrThw4fz2muvMWfOHNatW8f//vc/ysvLueWWW3j11VdPaX0hwFVXXcWjjz5KdnY277//Pv/73//wer387Gc/43e/+91JH3/++efz73//mzPOOIMPP/yQV155hezsbJ555plAVcnGpKWl8dxzzzFu3Dg+++wzXn31VXr16sWLL74YtMUDwPTp0/nXv/7FwIED+eSTT3juuefIz8/ntttu45lnnglUJm3s/QAYOXIkr776KmeffTZr1qzhueee4/Dhw1x11VW8/PLLIRVIj+f73/8+zzzzDP369eOjjz7i5Zdfxmq1ct999/H4448Hrae84oor+H//7//RqVMn3njjDdasWcOdd97JFVdc0aTnavC73/2OqVOn8sYbb7BkyRImTJjAyy+/fNwKmrNnzwaaV3SmMYMGDeLSSy+loKCARx999LTaOlpT34vY2FieffZZZs2axebNm3n++efZsmUL5557Lu+88w79+vVjzZo1zV6zCad/zAshRKRo6lQm0QshhBCiw7nnnntYsmQJX3zxRYtXixVCCNG6ZMRQCCGEECe1fft2PvroI2bPni1JoRBCRCFZYyiEEEKI4/rnP//JwoUL2b17N7quc9NNN0W6S0IIIVqAjBgKIYQQ4rgyMjI4ePAgWVlZPProo+Tk5ES6S0IIIVqArDEUQgghhBBCiA5ORgyFEEIIIYQQooOTxFAIIYQQQgghOrgOVXymrKwG0+yYM2dTU+MoKamOdDdEGyfHiTgZOUZEU8hxIppCjhNxMnKMhJeuayQnu4778w6VGJqm6rCJIdChX7toOjlOxMnIMSKaQo4T0RRynIiTkWOk9chUUiGEEEIIIYTo4Fo0Mayurmbu3LkcPHgQgOXLlzNv3jxmzZrFo48+2uhjDh48yBVXXMH8+fO56qqrOHToEAC7d+8OxC+99FK2bt3akl0XQgghhBBCiA6jxaaSbtiwgV/+8pfs27cPALfbzc9//nMWLFhAp06duOmmm1i2bBlTpkwJetxf//pXzjnnHC6//HIWLFjAo48+yp/+9Cd++ctfctNNNzF16lRWrFjBvffeyzvvvHPa/TQMP2VlRfj93tNuK9KsVjvJyelYLB1qhrAQQgghhBDiNLVYBvHKK69w//3389Of/hSAjRs30r17d7p27QrAvHnzWLRoUUhiaJom1dX1i0zr6upwOp0AXHzxxUyaNAmAvn37cuTIkbD0s6ysCKczFpcrC03TwtJmJCilqKmppKysiLS0TpHujhBCCCGEEKIdabHE8KGHHgq6XVhYSHp6euB2RkYGBQUFIY+76667uOyyy1iwYAE+n4+XX34ZgAsuuCBwn8cff5wZM2Y0u0+pqXEhscLCPBITk9p1UtggMTGJ2tpK0tPjG/358eJCHE2OE3EycoyIppDjRDSFHCfiZOQYaT2tNufQNM2g5Esp1Wgydu+99/LAAw8wY8YMPvzwQ26//XbeeecdNE1DKcUf/vAHNmzYwHPPPdfsPpSUVIdUNjJNE8NQQHRUPDJNk6KiqpB4enp8o3EhjibHiTgZOUZEU8hxIppCjhNxMnKMhJeua40OlAV+3lodycrKoqioKHC7qKiIjIyMoPuUlpayZ8+ewGjgWWedRVFREWVlZfj9fn784x+zadMmnnvuOeLj5eqBEEIIIYQQQoRDqyWGQ4YMYe/evezfvx/DMHj33XeZPHly0H2Sk5NxOBysWbMGgLVr1+JyuUhJSeH3v/891dXV/Pvf/476pPCjjxZx5ZUXc9ll5/P6669EujtCCCGEEEKIKNdqU0kdDgePPPIId9xxBx6PhylTpnD22WcD8Itf/IJp06Yxffp0nnzySR588EHcbjcul4snnniC0tJS/ve//5Gdnc3FF18caPPtt99ure63mqKiQv7xj6f4178WYLPZufnm6xg+fCQ9evSMdNeEEEIIIYQQUarFE8OlS5cG/j1u3LhGt5g4ulDN4MGDefXVV0Pus2XLlpbp4ClYsTmfN5btpqTSQ2qCgwum9GLcgKywtL1mzSqGDx9JQkIiAGeeOZ1PP10iiaEQQgghhBCixbTaVNJosWJzPv/9YBsllR4ASio9/PeDbazYnB+W9ouLi0hNTQvcTk1No7CwMCxtCyGEEEIIIURjJDFspjeW7cbrN4NiXr/JG8t2h6X9xqq36nr730pDCCGEEEII0XZJYthMDSOFTY03V0ZGJiUlxYHbpaUlpKWln+ARQgghhBBCCHF6JDFsptQER7PizTVy5GjWrl1NWVkZbrebTz9dypgx48LSthBCCCGEEEI0ptWqkkaLC6b04r8fbAuaTmq36lwwpVdY2k9Pz+AHP7iVO++8CZ/Pz7x58+nff2BY2hZCCCGEEEKIxkhi2EwN1UdbqiopwKxZZzNr1tlha08IIYQQQgghTkQSw1MwbkBWWBNBIYQQQgghhIgkWWMohBBCCCGEEB2cJIZCRCWF11tDaekR6uoqAPOkjxBCCCGEEB2XTCUVIspomkZJyRHef/89TLM+IRw7dhy5uQOQa0FCCCGEEKIxcpYoRJTx+90sWbI4kBQCrFy5gtraygj2SgghhBBCtGWSGAoRZXw+D3V1dSHxurraCPRGCCGEEEK0B5IYChFlHI4YEhISgmKaphEXFx+hHgkhhBBCiLZOEsM2qKammquuuoQjRw5HuiuiHdI0G2eddTbx8fWJoMPh4OyzZ+N0SmIohBBCCCEaJ8VnToF353K8q19HVZegxaViH3Uh9j7jw9L25s3f8Ic//Ja8vANhaU90TDExSZx33kW43bXY7Q5sthhMU0W6W0IIIYQQoo2SEcNm8u5cjufz/6CqSwBQ1SV4Pv8P3p3Lw9L+woVvcvfd95KWlh6W9kTHpWk2YmISsVickhQKIYQQQogTkhHDZvKufh383uCg34t39ethGTW8775fnXYbQgghhBBCCNEcMmLYTA0jhU2NCyGEEEIIIURbJ4lhM2lxqc2KCyGEEEIIIURbJ4lhM9lHXQhWe3DQaq+PCyGEEEIIIUQ7JGsMm6lhHWFLVSUVQgghhBBCiNYmieEpsPcZ3+KJ4GuvLWzR9oUQQgghhBCigUwlFUIIIYQQQogOThJDIYQQQgghhOjgJDEUQgghhBBCiA5OEkMhhBBCCCGE6OAkMRRCCCGEEEKIDk4SQyGEEEIIIYTo4GS7ijbm3/9+hqVLFwMwfvwEbr31rgj3SAghhBBCCBHtZMSwDVm9+itWr17Js8/+j//85wW2b9/GsmWfRLpbQgghhBBCiCgnI4anYFX+17yzexFlnnKSHUmc2+tsRmcNP+12U1PTuO22H2Gz2QDo3j2HgoL8025XCCGEEEIIIU5EEsNmWpX/NS9sex2f6QOgzFPOC9teBzjt5LBnz16Bf+flHWDp0sX87W//Oq02hRBCCCGEEOJkZCppM72ze1EgKWzgM328s3tR2J5jz57d/OhHt3HbbXfRtWu3sLUrhBBCCCGEEI2RxLCZyjzlzYo318aN6/nhD2/l5ptvZ/bsuWFpUwghhBBCCCFORKaSNlOyI6nRJDDZkXTabRcU5PPzn/+Y//u/hxkxYtRptyeEEEIIIYQQTSGJYTOd2+vsoDWGADbdxrm9zj7ttl988Xk8Hi9PPPFoIHbeeRdw3nkXnXbbQgghhBBCCHE8khg2U0OBmZaoSvrDH/6YH/7wx6fdjhBCCCGEEEI0hySGp2B01vCwJIJCCCGEEEII0RZI8RkhhBBCCCGE6OAkMRRCCCGEEEKIDk4SQyGEEEIIIYTo4CQxFEIIIYQQQogOThJDIYQQQgghhOjgJDEUQgghhBBCiA5Otqtog/75z7/z6adLAI25c8/lssuujHSXhBBCCCGEEFFMEsNTULlyOcVvvI6/tARrSippF1xIwtjxYWl73bq1rF27mv/850UMw8+VV17C+PET6dYtJyztCyGEEEIIIcSxJDFspsqVyyl47j8orxcAf2kJBc/9ByAsyeGwYSN44omnsVqtFBcXYRgGTmfMabcrhBBCCCGEEMcjawybqfiN1wNJYQPl9VL8xuthew6r1cq//vU0V155MSNGjCI9PSNsbQshhBBCCCHEsSQxbCZ/aUmz4qfq+utv4t13F1NYWMA777wZ1raFEEIIIYQQ4miSGDaTNSW1WfHm2r9/Hzt3bgfA6XQyefKZ7N69MyxtCyGEEEIIIURjJDFsprQLLkSz24Nimt1O2gUXhqX9w4cP8vvfP4TX68Xn8/HFF8sYPHhoWNoWQgghhBBCiMa0aGJYXV3N3LlzOXjwIADLly9n3rx5zJo1i0cffbTRxxw8eJArrriC+fPnc9VVV3Ho0CEAKisrufHGG5k9ezZXXHEFRUVFLdn140oYO57Mq68NjBBaU1LJvPrasFUlHTduIuPGTeC6667g+uuvZODAwcyYcVZY2hZCCCGEEEKIxmhKKdUSDW/YsIFf/vKX7N27l0WLFpGWlsbZZ5/NggUL6NSpEzfddBNXX301U6ZMCXrcT37yE4YNG8bll1/OggUL2LBhA3/605944IEHyMrK4sYbb+Stt97i008/5bHHHmtWn0pKqjHN4Jebn7+frKzup/ty24zjvZ709HiKiqoi0CPRnshxIk5GjhHRFHKciKaQ40ScjBwj4aXrGqmpccf/eUs98SuvvML9999PRkZ9Rc2NGzfSvXt3unbtitVqZd68eSxatCjkcaZpUl1dDUBdXR1OpxOATz/9lHnz5gEwd+5cPvvsM3w+X0t1XwghhGh3NA2sVh1Ni3RPhBBCtDctto/hQw89FHS7sLCQ9PT0wO2MjAwKCgpCHnfXXXdx2WWXsWDBAnw+Hy+//HLI461WK3FxcZSWlpKZmdlSL0EIIYRoN2x6Le7qPZSXbseV2IOYxFx85vGvDAshhBBHa7UN7k3TRDvqEqZSKuh2g3vvvZcHHniAGTNm8OGHH3L77bfzzjvvhNxPKYWuN2/As7Gh08JCHas1emrw6LpOenp8oz87XlyIo8lxIk5GjpG2x/C72ffNR5QXbgSgomgzrsQceg27Bps9MsmhHCeiKeQ4EScjx0jrabXEMCsrK6hgTFFRUWCaaYPS0lL27NnDjBkzADjrrLO4//77KSsrIyMjg+LiYrKysvD7/dTU1JCUlNSsPjS2xtA0Tfx+89ReVBtkmmajc7FljrZoCjlOxMnIMdI2WbXSQFLYoKZiH1VlRzD0rFbvjxwnoinkOBEnI8dIeEVsjeGxhgwZwt69e9m/fz+GYfDuu+8yefLkoPskJyfjcDhYs2YNAGvXrsXlcpGSksKUKVN46623AHj//fcZOXIkNputtbovhGhHNA283lqqq0sxTY+stxLR7zh15BQtUl9OCCFEFGq1EUOHw8EjjzzCHXfcgcfjYcqUKZx99tkA/OIXv2DatGlMnz6dJ598kgcffBC3243L5eKJJ54A6tce3nfffZxzzjnEx8fzpz/9qbW6LoRoVxR5eXtYtuxTDMMgJiaGOXPm4nIlR7pjQrQcSxLxqX2pKtkeCDnjOmGxpWAaEeyXEEKIdqPFtqtoi9rTdhVPPvkYFRXl/OIXv2nW42S7CnE6ouE4qaur4NVXXw6KJSQkMH/+hWiazDI4XdFwjEQrm15DbflWKku2EJ/cB1fKQHxmZNbmyHEimkKOE3EycoyEV5uZSiqabs2aVSxa9G6kuyFEu9Sw3c3RKisr8XrdEeiNEK3HZ7qwJ44is8+1OFPGRywpFEII0T612lTSaLJjcwFfLdtLdaWHuAQHY6b0IHdAeLbNqKys4JlnnuKqq77Prl07w9KmEB2Jy+UKicXHx2O3OyPQGyFal1IKv7/DTAQSQggRRjJi2Ew7Nhew7IMdVFd6AKiu9LDsgx3s2By6J+Op+MMffseNN95KfHxCWNoToqOJjU1g4sRJge1w7HY7M2bMRNdlGqkQQgghxPHIiGEzfbVsb8j2Fn6/yVfL9p72qOHChW+RmZnJyJGjef/9hafVlhAdl06vXv3o0iX72yJWcdhssXSg5dSiA9E0sFp8oMBv2o5XnFQIIYQ4KUkMm6lhpLCp8eZYsuQjSkqKufbay6msrKCuro7HH/8zd955z2m3LURHopSGwxGPwxH/7W05WxbRx6L78NXs4Mj+pWjoZOTMwBrbC8OUr3YhhBDNJ98ezRSX4Gg0CYxLcJx224899lTg3++/v5B169ZKUiiEEKJRhns/B7e9Hridt/VlcgZdA9a2V2lbCCFE2ydrDJtpzJQeWK3BvzarVWfMlB4R6pEQQoiOxmrVKT28KiReXrAei0W+2oUQQjSfjBg2U8M6wpaqStpgzpx5zJkzL6xtCiGEiA5KgT0mGcqC4zZnkkydFkIIcUokMTwFuQMyw54ICiGEEE1lGCbJWaMoy1+HMv0A6BYHCWmD8JmSGAohhGg+SQyFEEKIdshPOj2H3oK7Og80DacrGz/Jke6WEEKIdkoSQyGEEKIdUkrhIxmLqz4Z9MlAoRBCiNMgK9SFEEIIIYQQooOTxFAIIYQQQgghOjiZSiqEECIqWS0+lL8UpUwsthR8RtP3m7Xq9Y81DTdWRyp+FYcU+xRCCBHNJDEUQggRdWx6LQW736a6bCcAjthMss/4Hj4z4aSPteoeSg9+SHnBegB0q5OcQdfiJ6MluyyEEEJElCSGbdAdd9xEWVkZVmv92/OTn/ycAQMGRrhXQgjRfrir9waSQgBPbQGVRetwpU/BNE/8WMNbEEgKAUy/m/zd75OVeyV+Q742hRBCRCf5hjsF+7euZuMX71JbVUZsfDKDJ86l+xmjwtK2Uoq8vAO89trCQGIohBCi6SwWnerKAyHx6rKdxGdOwjRPvLze8FWFxOqqDqHhRb42w8uim2iqHGX40G1JzZruK4QQIrzkG66Z9m9dzeqPX8Lw+wCorSpj9ccvAYQlOTxwYD8Ad999OxUVFZx77nlceOGlp92uECdm4PXWUV2toWnIWirRrhmGSWxSD0qPrA6KJ6T2xzQtwIkPcJsjJSQWn9oPE2c4u9nhWXUPlQWfU3xwOQCO2HSyz7gcn5kY4Z4JIUTHJFVJm2njF+8GksIGht/Hxi/eDUv7VVWVjBgxit/97k/89a9/4623Xmf16pVhaVuIxrjdlbz33lu89NILPP/885SVFaJpke6VEKfHHtudpKxhgdtxST2JSx2EaTbhqoc1nU6956Lp9ddOY+K7kJEzA8OQr8xwMrz5gaQQwFNbREnep1gscmVKCCEiQUYMm6m2qqxZ8eYaOHAwAwcODtyeO3c+K1Z8yahRY8PSvhDB/Hz00SLKy8sBqKmp4b33FnLJJZdhs7ki2zUhToPfjCElew4pnSegTBPNmoSviesDDdOKI3E4PYf1QZlesCbi9cvXZbh5a4tCYlVlO0nt5sGQ0VkhhGh1cvmzmWLjk5sVb64NG9azZs2qwG2llKw1FC2mrq4mkBQ2MAyDysrKyHRIiDDyGxb8KgVDS2t20RjTBJ8Zj59U/JIUtgh7TFpILC65FyayzlAIISJBEsNmGjxxLharLShmsdoYPHFuWNqvrq7iqaf+isfjoba2hg8+eI/Jk88MS9tCHMtmc2C320PiMTExEeiNEKIjsTg6kdJpdOC23ZlMetczMQyZyy6EEJEgl0GbqaHATEtVJZ0wYRJbtnzDddddgWGYXHDBxUFTS4UIJ7s9hjPPnMaHHy4KxEaMGElsbHwEe3VymgaG4UXXLYAl0t0RQpwCv+kgsfNMkrJGYZpeLLZkvIZMIRVCiEjRlOo49QdLSqpDCg/k5+8nK6t7hHoUfsd7Penp8RQVhZZgFwIUbncVVVWVJCYmYLO50LS2m2z5/XVs3LiOrVu3kpCQwKRJU0hOzpBKqq1EPktEU8hxIppCjhNxMnKMhJeua6Smxh3/563YFyFEm6ThdCaQnp5Nly5d2nRSqOuwfv1avvnmGwzDoKysjIUL36a2VtZECiGEEEKcDkkMhRDtht/vYevWrUExpRQVFeGpCiyEEEII0VFJYiiEaDc0zUJcXOgUiMYK6AghhBBCiKaTxFAI0W7oupXJk6cExbKyskhKSo1Qj4QQQgghooNUJRVCtBtKQWpqJy666BLKy8txOOwkJ6ei6zJiKIQQQghxOiQxFEK0MxqxsUnExiZFuiNCCCGEEFFDEsM25osvPuPZZ/+B213HqFFj+eEPfxzpLgkhhBBCCCGinKwxbEMOHTrIn/70MA8//Cf++9+X2LFjGytWfBnpbok2SNPA662hpqYc8Ee6O0IIIYQQop2TEcNT4NlTivvrfFSND81lwzk8C0fPlNNu97PPPmX69JlkZGQC8MADD0u1RRFCKYNdu7axcuUKTNMkOTmZs86ag93uinTXhBBCCCFEOyUjhs3k2VNK3fKDqBofAKrGR93yg3j2lJ5224cO5WEYJvfe+yOuvfZy3njjVeLjE0673Y5I00y83moMw42ua5HuTlhVVZWxfPmXmKYJQFlZGStWfIGmqQj3TAghhBBCtFcyYthM7q/zwTjmBNxQuL/OP+1RQ8MwWL9+HU888TSxsTHce+/dfPDBu8yZM++02u1o/P5aPv98GXl5edhsNiZNmkx2dg+i5TpIdXVVSOzAgQMYhhddd0SgR0IIIYQQor2LjjPlVtQwUtjUeHOkpKQycuRokpOTcTicTJ58Jlu2bD7tdjsSXVesXbuavLw8AHw+H0uXLqG6ujyyHQuj2NjQKaNZWVlYLLYI9EYIIYQQQkQDSQybSXM1fvJ9vHhzjB8/iVWrVlBVVYVhGKxcuZx+/fqddrsdid/vZffu3SHxiory1u9MC0lMTGHQoMGB206nk4kTJ6OU/DkLIYQQQohTI1NJm8k5PIu65QeDp5NaNJzDs0677QEDBnL55Vdz663X4/f7GTVqDHPmnHva7XYkum4jNTWVgoKCoHhMTGyEehR+mmZl2LBR9O17Bl6vh/j4BKxWJ0qWGAohhBBCiFMkiWEzNawjbImqpABz585n7tz5YWmrY9KZOHEyb7/9Jn5//TYOPXr0ICkpPO9P22EhNjaR2G/zXUkKhRBCCCHE6ZDE8BQ4eqaELREU4RcXl8LFF19KRUUFdrud+PhENE3W3wkhhBBCCHE8khiKqKOUwmZzkZYm+/oJIYQQQgjRFFKtQgghhBBCCCE6OBkxFEKIVuT311FWVoqmQXJyKhaLM9JdEkIIIYSQxFAIIVqLx1PNO++8SV1dHQAul4t5887Dbpdpz0IIIYSILJlKKoQQrUDXNXbs2BZICgFqamrYu3cXuq5FsGdCCCGEEJIYCiHESWmaQtMMNO3UEziLRae4uCgkXlxcLImhEEIIISJOppK2MQsXvsXrr78SuH3kyCHOOmsOd999bwR7JUTHpGlQWVnMqlVfUVtby5AhQ8nOzkHXm7/9ic9n0LdvP/Ly8oLivXv3we83w9Vl0cJ0XcM0ZeNQIYQQ0UcSw1OwZ89O1q1bTU1NNS5XHMOGjaJnzz5haXvevPOYN++8b59nNz//+Y+57rqbwtK2EKJ5amrKeeutN1GqPhH49NNPmDx5Kj169A3EmiMrqwujR4/h66/XAjBq1GjS0zuFtc+iZdj0GtzV+6ipPowrqQdWZ1f8piPS3RJCCCHCRhLDZtqzZycrVnyOYfgBqKmpZsWKzwHClhw2+POfH+HGG28jKSkprO2K9kfTNCwWDcMwOYV8RJyiwsL8kARw/fqvycnpyal8fOq6nf79h9KnTz8AbDYHpgwWtnlWi4cjO16ltvIAACWHVpDWdRLxGVMxzI47DVjTtFO6QCKEEKJtkjWGzbRu3epAUtjAMPysW7c6rM+zevVXeDwepk2bEdZ2Rfvj99exZ89Wli37mLy83RiGJ9Jd6jBsNntIzOFwoGmn/tFpmgqLxYHFIklhe2F6SwJJYYPig1+iUxmhHkWWrptYzCO4S7/EqNmATe+YvwchhIg2MmLYTDU11c2Kn6q3336DSy+9PKxtivZHKT9LlnxMQUE+ALt37yY3ty/jxk1GqY47UtFa0tMziYmJCaokOnbsOJSSa2odiVL+RoImSnXMzF559rPvmwWB21Z7PN0H3YDPjI9gr0RrMnSNcsPAMBUpditWQ0aOhYgGkhg2k8sV12gS6HLFhe05fD4f69d/zS9+8ZuwtSnap6qq8kBS2GDHju0MHTocp1NOwlqa3e5i/vwLyM8/jNvtpnPnLsTHJ8l03g7G6kjD5kjA5/luZCwh7QzQE8CIYMciwGrxcWj7B0Exv7cKb+1hNGffCPVKtCaPDu/sLWBdYQUAXeKdXHtGV1zyuShEu9eil72rq6uZO3cuBw8eBGD58uXMmzePWbNm8eijj4bcv6SkhPnz5wf+mzZtGsOGDQOgoqKCH/zgB5x77rlcdNFFbN26tSW7flzDho3CYgnOpy0WK8OGjQrbc+zevZOuXbsRExMTtjZFdJF1Pa3HbnfRrVsf+vYdTFxcSlhGCzUNTNNLbW05fn+dbFfRxvmMWLoNvJbUzmNwxmWS2WMG6d1n4zcske5aq9MwMfyh09mV6Y1Ab0Qk7K/2BJJCgENVblYWlKPJ55gQ7V6LjRhu2LCBX/7yl+zbtw8At9vNz3/+cxYsWECnTp246aabWLZsGVOmTAk8JjU1lbfffhsA0zS55ppr+NGPfgTAs88+S25uLv/4xz9YunQpDzzwAC+++GJLdf+4GgrMtFRVUoBDhw6RkZERtvZE+xUfn0haWhrFxcWBWM+ePYmNjZNRq1YWrmRc06CqqpRFi96ntrYWu93OjBkzSUvrDMiJVVvlM5OI73QWiZ0NTGXF10G3rDCUk7TsCeTvWfRdUNOxx3aikQm3IsrousbeytqQ+NaSKqZ1SkGjY/5dCBEtWiwxfOWVV7j//vv56U9/CsDGjRvp3r07Xbt2BWDevHksWrQoKDE82uuvv05MTAzz5s0D6hPFmpoaAOrq6nA6nS3V9ZPq2bNP2CuQHm369JlMnz6zxdoXra9+hMiPrlubldBpmo1Zs85mz57d5OUdoGfPXnTrliNr3Noxw/Dy4YcfUFtbf3Ll9XpZtOgDLrnke9jtrgj3TpyIaYKJBTrwya9pKmKTB9O5j42SQyuxORJJ734mhpbakX8tHYZpKnomxrIseDtWBqTFoyslh4AQ7VyLJYYPPfRQ0O3CwkLS09MDtzMyMigoKGj0sYZh8Pe//52nnnoqELvuuuu49NJLmThxIjU1Nfz73/9udp9SU0PXARYW6lit0XOSres66emNrz07Xly0rLKyMr7++mt27dpFp06dGDNmDJmZmc1oIZ5OnTJRahya1vIjSnKctKwjR44ELnI1ME0Tr7eOLl2yItSr5pFjpKOLh9R00rNHoulWLJbQ6r0gx0m0srodjO6UxKoj5QB0S4hlcrd00uJO7YK9HCfiZOQYaT2tVnzGNM2gk1ql1HFPcj///HNycnLo2/e7hewPPvggV1xxBVdffTXr1q3jRz/6Ee+99x4uV9OvsJeUVGMeM/3HNE38/uipLGeaJkVFVSHx9PT4RuPi5DStfpTH7a7F4XBitcY0eVqhphksWfJRYJ3tzp07OXjwIBdccAkWS9vbHFuOk5anaVbsdjteb/CaLKvV0S5+93KMiGAGELrmUI6T6HZu9wymdEnFUIokmxVLnY+iOl+z25HjRJyMHCPhpetaowNlgZ+3VkeysrIoKioK3C4qKjruOrrFixczZ86coNiSJUu48MILARg2bBipqans3r275TosBN+tB3vzzVd57bVXeO21lykuPkRT50zV1dUGksLvYnVUVpaHv7OiXbDZYpgxYya6/t3H7+TJU3A6w1fZWIgTseoedH8eZt0WrKoAi97BSquK06YbimRNJ023yFYVQkSRVksMhwwZwt69e9m/fz+GYfDuu+8yefLkRu+7fv16Ro4cGRTr168fixcvBmDfvn0UFhbSo0ePFu+3iCzT9FJVVYLHU4Wmtf6Xj2F4WbTo/cDUP4/Hw6JFH+DzhS6+b4zFogclAA2sVtkppqMyTUVaWmcuueR7zJt3Lpdcchk5OblI4RnRGqwWH6UHF7Fv07Mc3PYae9Y/jbdqM60wS10IIUQb12pnpw6Hg0ceeYQ77rgDj8fDlClTOPvsswH4xS9+wbRp05g+fToAeXl5ZGUFr7V55JFH+PWvf80//vEP7HY7v//974mPlznH0cztruS99xYGkrLRo8fQt+9ANK31SsTX1dUGioQ0MAyD6upqkpNPPo3Z4XAxcuQoVq36KhDr3r07cXGJYe+raH2apvD53Oi6jtXqDJmqfoJHYre7pNiMaHXKV0J5wYag2JHd79FjaE98KrpHrXVdYVGVGP5qLLYE/CpeqjsLIcRRWjwxXLp0aeDf48aN45133gm5z7GFajZs2BByn5ycHJ577rnwd1C0SZpm8Pnny4KKdKxa9RVdumQTH5/aav1wOJzYbDZ8vu/WTmiaRmxsbJMeb5rQt+8AMjOzKC4uJCkpmZSUdDRNRgzbO8Nw8/XXq9m2bRt2u50JEyaSnZ0DdLy97UT7YRruRmI+lIrufQh1zcRfvYX9O95GKQPdYqfbgMvB2l32hRVCiG9FTznOKPLhh+9z5ZWXcOWVl/Dkk49FujsR4ff7OHLkSEi8urp1FyDb7aHrwSZNmtys9WCaZiU5OZPc3EGkp2e3yaIzonl0XWPbti1s3boVpRQej4elS5dQWVka6a6JKGWzuNHNfKwUY9VPfcdAqyMF3WILisUmdEXTE063i22aTgUHt7+JUvXrKU3DS97WV7DqNSd5pBBCdBwybNHGuN1uHnvsT7z44hvExcVxyy3Xs3r1V4waNSbSXWtVVqudrKws8vPzg+Jxca071ck0FRkZ2VxyyWVUV1cTGxuL0xmPUs1fkCMXpaOHafrYvn1bSLywsJDExHR5r0VY2fQK8jY/j7euBIDkTiNJ7jwNv9n87QH8KpGcQddxeNc7uKvzSUjrR0bOLLxGdJ8OGN5Kji0aZvhqMf01oDVtBogQQkS76P4maCHVpZuoOLwUw1eBxZZIYudpxKUMCkvbpmmglInbXUdMjBPD8ONwdLwRJqV0Jk+eeswaw9HExSVHoC9gt8eRkhLd629E0+m6hZSUFKqrq4PicXGyZkmEl0VXlB78LJAUApQdWUN8yhlgb34BNqUUfi2TLv2uBXyYOPEa0T95yGpPBE0H9d32VFabC93qwpCirEIIAUhi2GzVpZsoO/AuStWvOTN8FZQdeBcgLMlhbKyLG264mcsvvwin08nQocMZNGjIabfbHjmdCZx//sXU1FRht9txOuNOaaROtDZFXV0VpaXF2Gw2UlLSsFpjIt2psDJNjdGjx3L48GH8/vppfRkZmaSnN74Fj4heFt2PZpRhGm4s9mT8Ki6sFwd0zUdV2a6QuLe2EIejxyk/l8+wAbaT3i9aGCTStd9FHNz+Bsr0Y7E66dr/MvymjBYKIUQDSQybqeLw0kBS2EApHxWHl4YlMdy1ayfvvfcOr7++EJcrjgce+BUvvriAyy+/+rTbbo903R4oNiMjMe1DVVUpb731RqCgQ0JCAnPnzo+65NDlSubiiy+lrKwMq9VKUlIKum6PdLc6JE0Dq1aJ31uJ1R6HQSKm2fIXkSy6l8r8ZZQcWlF/2xpD98HX4ic9bM9hKjvxKX0oy/86KO5wZcpnYjOYSkOP6UvPYbdj+Gvqq5KacVJ4RgghjhL980fCzPBVNCveXKtWrWDEiNEkJ6dgt9uZM2ce69atDUvbQrQ0TVOsXLk86GSrsrKSwsKCCPaqZSilsNlcZGRkk5KSJUlhhOi6Bt697Fn3JPs3/ZvdXz+Jv2YLeivse6p8hYGkEMDw13Fk10KsllMvDnMsw4TULpNwxH43Gp3aeQwWR6ewPUdHoZSGz0zA1DvhM1ySFAohxDFkxLCZLLbERpNAiy08+9L17p3LU089Tl1dHU6nky+//Ix+/fqHpW0hWpppGiHr7qB+P0hNk1FfEX4Wqti79RWU+W0ypkwObn+TXsO6YJLUos/t91aGxOoqD6HhJZxfr14zkez+38f0laNZbCgtEb8p26IIIYQILxkxbKbEztPQtOB1GZpmI7HztLC0P3r0WGbMmMX111/JNddcht/v58orrw1L20K0NIvFxqBBoVOqMzOzJClsozx+kz0FVWzNq6C81oemta91vKa/FtPwBAeVid/X8lvb2ByhxbDiUnqjCH/BMJ/hwNAz8asUDEkKhRBCtAAZMWymhnWELVWVFODKK6+VZFC0S6ap6NkzF8Mw2bBhPU6nkwkTJkakmqw4uVqvwZNvbGTbvjIAHHYL9183hqyk5m+DECm6zYXFGoPhrwvENM2C1Z6AzzzBA8PBmk6nXrPJ3/MRShk4YtPJ7DEbnyGJm+iANI0qTOr8Jol2K05TyQVBIdoZSQxPQVzKoLAmgkJEE12306/fYHJzz0DTdKD9nST7laKk0oPNopMcZ6d9jaE13d78qkBSCODxGrzw8XZ+ePGQdjOdxG/G0a3/9ziw5QUMvxvdYie730X4Vctv2G6YVhxJo+g5LBfT9KJbE/EZstZUdDymrrGxvJrXdxzGUBBvt3Lj4O6kau3lkyT66Xr9N5lpSrYujk8SQyFE2ClFyJTr9qLS7efvb25i2/4yNA3mjM/hnHE5OK3Rd4JTWuEOieUVVOEzTByW9vF6lVKY1q7kDLkNw1+FxerCr1pvP0nTBJNE0JD98ESHVW4YvLL9cOB2ldfP81sPcvug7lgMSUQiSdM0ypTJ5qJK3IbBoLQE0i0WWqE+l2iHJDEUQohvaZrGkjV5bNtfP4qmFLz35T4G9kylb5fwFJhqS7pnxYfEJg3pjNNqaVcVG5VS+JQLdBdmS08fbWOsVg2lwJCTbxFBpR5fSKygxkOtqQj9lBGtqUyZPPb1HrxG/Yfjkv3F3D6sB52tkgKIUO3jkrAQQrQCn6FYtSV0a42dBysC03CiSZe0WG46bxCxTiuaBuMHdWLW6G7tKinsqCy6Dzw7Kdj5HGV5b2OlkHZWNyiIxaK3u8JH4jvJ9tAZIhmxdmKi8HOzPdE0je1l1YGksMFH+4vQ2smsENG65HKBEEJ8y2qBAT1TKSitDYp3z4yPynUZFk1jXP8MBvZMwW8oEmNsQPS9zmijaeCr2cHBba8HYhWFm+gx7Gb8pEawZ81n0X2Y3kNU5G/BHpuGK6kvPjP6RuejXbJF57zeWby9Kx8FxFgtXHFGV6wykh1RmgYeI3QahcdvoGQuqWiEJIZCCNFAwTnjc9i0q5ii8voqlyPPyKRX55YvZBIppqlw2RsKBMmJQntg1X3k7/80KKaUgbvqANa49pMY6rqGt2orh3a8FYhZ7V/SfdAN+EyZgNie6ApGpcbTNzmOWr9Bkt1GrJKqpJFmmor+qfF8uLcw6NN9evd08MubI0JJYiiEEEdJjrXxm+vHUFBWh92qk57kxCbToUSboqHpodV+Na19VQC2aHXk7fkwKOb3VuFzF4BdEsP2RjMhEY1EqxVMJZeZ2og03cKdw3uy5EARtT6DM7ulkRPrhCicBSNOnySGbdCCBf/h/fffwW63M23aTK655vpId0mIDiXGppOT4Yp0N8Qp0DWFTjl+bwVWWxymloyp2lfCdDJ+00pGzgwObH4hENMtDpxxXfG1p3M9TaFUaClXpcyo3SJGiFanFJkWC1f27oRCQxmmJIXiuCQxPAXriiv5+FAJ5V4/SXYrM7ukMiwtPFPNVq/+isWLF/HPfz6H0xnDz3/+Y5YtW8qUKdPC0r4QQkQrTQPTvYN9W16hYVpsp15zcCQNxzSjp9CCUmBx5pAz+PtUFm3Cao8nPnUAfpIj3bVm8RsxpHebQsHejwMx3eLAHpOJr4NVlxWipZmGQpYLiJORxLCZ1hVX8tb+QnzfXm0p9/p5a38hQFiSw507tzN69DhcrjgAxowZz2effSqJoRBCnIRVq2Lv9jc4+uTnyO4P6Dm8JyYpketYCzBMK1i6ktile/12He1wBEApcKUMJ9seT+mR1ThcGaR0GotfSfEZIYSIhOi5hNpKPj5UEvIF7DMVHx8qCUv7ubn9WLVqBZWVFXg8Hr744jNKS8PTthBCRDPTqMM0jt1PTWH4qiPSn9ZgGGa7rpjrNx1YXAPJ6vt9krrMxadSpWCJEEJEiIwYNlO519+seHONHDma2bPncscdNxEfn8DIkaPZsuWbsLQthBDRTLfGY7XH4/dWBWKabsVqT5KpiW2YUuD3g0xzE0KIyJIRw2ZKsjeeSx8v3ly1tTVMnTqd//73JZ588hnsdjudO2eHpW0hhIgoDSrr/JTX+lokBfCbMXQbcDk2R/1URKvNRfeBV+JX0bvdiBBCCBEuMmLYTDO7pAatMQSw6Rozu4Rn76jDhw/z29/ezz//+Rxut5t3332b++77VVjaFkKISPH4TZasPchbn+3GMBWThnbh4qm9cTnCVzFUKfCTSbdBN6GMGjRLDH7ThZK5iUIIIcRJSWLYTA0FZlqqKmnv3n2YOnUa1177PQzD4NJLL2fw4KFhaVsIcXo0DWq9JrUeH/Gxduyyv2GT7T5cyWuf7Arc/mzdIbpnxTN9WJewr5HzGU7ACQbI9EQhhBCiaSQxPAXD0hLClgg25tprb+Daa29osfaFEKdmx+Eqnnp9AxXVXjqnurjz0qFkJDgi3a1Wp+sauq7h9zdt4Z7ForFxd3FI/IsNh5k6pIvsWdeO6JqBZhbjc5dgscVjsWfgN6Pvb8BmqcFXl49SBvaYTPwq8dSL4mhQZprsr6rDZtHpHhdDnFyvEEK0QZIYCiFEE5TV+vjj82vxG/XJ0OGSGh598Wt+c8NYHJaOkdpoGuw5VM7SNXkcKqphyrAu9OmSiP0kr980FT06hV5My+2WjK4hVSjbCU0Df81WDm5/IxBLyhxCctc5GIYtgj0LL5teyYFv/ovPXQaAbrHTY8gN+Eg7pfYKDZMnvt6N8e1xHme3csfQHsRH2XHv1zWKvD5q/AbpTjuJmiYD9qJRmlUHpVCGHCBtjSSGQgjRBMXldYGksEFBWR0VNR4yEpwR6lXrKqvx8at/rKSmrn5LiDVbC7j+3AFMGph1wumgSkH/nBR6dE5g7+FKAJLiHMwc1U3W/7UjVr2GvF3vBcXKCzaQlDUa9E4R6lV4aRrUVe4OJIUApuGl+OAXpHQ7D8NoZnsWjQ/3FHL0+W+118+uihqGJ7qi5qKIT9d4Y08+G4rq/751DW4Z2oNsmzVqXqM4fYYOe2s9LD1QTIzVwszu6WRarWhykLQZkhgKIUQTJLjsIbFYpxWXI3pGSk4mr7A6kBQ2eHXJTkbkpuO0nrjIdbzTyo8vH86RkloM06RzqguXPXyFZ0TLU6YX0/CExE2/G0L/PNolTdPw1pWGxD21heiYGM0s5m6iUeE5dm9NqPL60TQtai6MFHp8gaQQwFTw0tZD3DU0B6uMColv7anx8Ow3BwK3t5VU8cMRvUjXZZOEtkLeCSHaOE0Dj6eK/Pz9lJQcxmjkxKwj0r5d59Za0hIcXDK9T+C2rsHN5w8iPqbjXF9r7CS2OSe2MVadnplx9OmUIElhG2Wx6Mf/u9LjiU3sHhTSdBs2Z3iqcrcFpqlwJfcJiad0GonfbP4xq5smU7qG/n76JseFvehSJNX4Q4dSS9xefNHzEsXpsmgsPVAUFFLA1tKqVv0uFyfWcc5oRLugaWAYXnw+L3a7E02TQ7SqqoS33noT06yfxpiamspZZ52D1doxpi8ey28qdh6u5L0v9uJ0WDl3Ug+6prlavICJRdOYOSKbIb3TqajxkJ7kJCXOEVUndyfTLTMel9NKjdsfiF08PZdYu6VD/R6ika4ZaEY+5UfWY7E6SUgfjKGlB00D9BtWOvc+n8L9H1JZvA2nK4POfebjV4lE02Iy3d6ZLn3PJ3/3IkzTR3rXSTgTzsB/Cse4UtAvwcXFfTuzZH8RTquFeb2yyLBaoulXRnqMHY3glzQ4PYEYOd8X39LQcFhDL644LLpMN25D5KxbtBmaBuXlhSxe/DE1NTUkJyczc+YsnM7ESHctYjTNZMWK5YGkEKCkpITi4gKysrqf4JHRa+ehSv74v7WB2+t2FPLgjePonBzT4s9t0TU6JTvplNwxk/Jkl42Hbp3AJ6vzyCusZurwLuRmJ0lSGA18h9i76T+BmyWHVtJj6E34jym44jUTSM25kPQcNwobfsMWddWDDNOKLW4wOUP7oGHiV65TSgob2EzF8MQ4Bg2NQwd0Q0VVUgiQrGlcP7g7L287RJXXT//UeOb1zASZRiq+pQyTWd3T2VlaHTj8HRadfslxUTOlOhpIYtgG1dRUc/PN1/GHPzxGp06dWb36K5588lE8Hg/Tps3kxhtvjXQXW4TXW8t7772L318/GlFWVsYHH7zPeeddhKZ1nHVcRzNNg4qKipB4XV1dBHrTBmga73yxJyikVH0RlPMm9pAEpYUpBb26JJHktDZruwrRtlktioK9y4JiShnUlO/AmZwectJmGDoGsa3ZxVZnmgqThgtAp/+5opTC2szCNe2Kgl5OB/cM74lPKWI1DU2SQnGMzjYrPxzRk80l1Tit9UlhkqZF27Wldk3WGLYxmzd/w6233kBeXv3iXI/HzcMPP8DDD/+Z559/lW3btrBixZcR7mXLqKqqDCSF38WqqKuriVCPIs9isTFgwICQeFpaegR6E36apqE1Y6qRpoHTHno9y+noWJXvvIZJQYWbSrefSGwCaJpKksIoo1Ro1qKU2ay/T9GxKaWwGwqXiSSFonEK0nUL0zKTGJeSQBLtMynUNKhAsb3OzV6PF3cUZVMyYngKVmzO541luymp9JCa4OCCKb0YNyArLG0vXPgmd999Lw8++GsAtmzZTNeu3ejcuQsAs2bN5pNPFjNu3ISwPF9bEhMTOhXQZrNht0ff5slNZZqQm9sfn8/Hpk2bcDqdTJw4mfj45Eh37bQoIL+8jm/2lBLjsNA/J4XUOPtJvyCUqZg/qScbdxUF7mu36gzrEzqqEa2Kq708+uLXHCmpxWGzcN28AYzITZOrfMfQNLBQiqf6ELpuxe7qgs8M3UsxmmgaWHUPYGKoGMwm5u5+QyO962T2Vzx/VGM6ccm5pzWFUoim8ulQ4PFR5zfJiLGTqGsg156iVnuf3VNomDyxbk/g8zEj1s6Ng7oTGwXHrCSGzbRicz7//WAb3m+vlpdUevjvB9sAwpIc3nffr4JuFxcXkZr63RqP1NQ0iooKT/t52qKYmHjGjBnDV199FYhNnXomNltMu7yiFC4Wi4OhQ0czcOAQNE1H123t/vdxoLiGB//1FQ3fDbFOK/93w1hS405e8757hosHfjCWVVsKcDqsjOybQUais0MkhoZSPPPWJo6U1ALg8Rn87Y2NPHzLeDITO+a6x+OxqEL2rv9HYCTMYoslZ/AN+MykyHasheiagenZy4Fd72H4a0ntMp6E9FH4zKZN+dTt3eg+6BpKD6/EYnWS0mkshpYedWvhRNvj0zVe3n2ELcVVgOyBKNo4i8Z7uwqCLpoV1no5UO2mX2z7/x6WxLCZ3li2O5AUNvD6Td5Ytjtso4ZHU0odM5VHoWnROjag07fvQLKzu1FbW0t8fAIxMXHyxUD9yKGu14+ctvvfh6bxxie7OfqCYa3bzzd7Spg6pNNJX58GdEmJ5cLJPYH6K48dISkEqHYb7DoYuua0sKxOEsOjWCxQsv/zoOmRhq+WmvKdOBJHtf+/oUZoZiEHNr8QuF10YBm6xU5MyvgmXZ03lBWs3Unv2QOgfqpwFP6e2gtN06jVFOVePy6rhQRNj4IP/8YVeLyBpBDq90B8edsh7hqSg0WmpIo2xgCK67wh8QqPD83lbPd/ppIYNlNJZeN7yB0vfrrS0zMoLi757nlKSkhLSzvBI9o7Cy5XMi5X/VTJ9v4HJkIpFFW1oR+qNXW+Zm343N6nopyKGLtOVkos+aW1QfGk+I473boxmmbidZeHxP2eSpxRtKl4A02Duoq8kHjp4VV0Sx2B2Yzd52XtaORpGhzx+/nHxn3U+U0sGlzUtwuDE2LRouvQBaDG18geiHX1eyDKbqeirbEpmNAlhYW784PiOQmxUXHOGq1DTy0mNaHxE7DjxU9X//4Dycvbz8GDeRiGwccff8jYsdG3vlB0HDowb2KPoJimwZA+aR0y2WsOu0XnlgsG4zhqc/hzJ/UkqxW26mhPDEMntfPYkHhcSr+oPMaUAqs9LiRuj0lGyfXfdsejafx3cx513ybpxrcjaOUqOpP2hj0QjzYsMxGZAyHaItNUDE+LZ2ZOOjZdI8lh47pB3Ui3RcdnbXS8ilZ0wZReQWsMob74xQVTerXI8zkcDn7+8/v5xS9+itfrYdy4CZx55vQWeS4hWoNSMCAnhTsuHsLbn+0h1mnl4ml96JwS3eXvw6VrWiy/v2UCRRV1uGJspCc4sEjpyCBKgT2uN517z6Mobxm6biOz51lotqyoLWjhcHXDHpOKt65+hommWcjMmYXfkOu/7U2tYVLh8YXEKzx+kh1NH/1tL1J0Cz8Y3J2Xtx+i0uNncEYic3IyIAov4ojo4DBhWmYy47OS0QG7qVBRcrxqKtrm1JxASUl1yNXi/Pz9zd4ovCWrkp6u472e9PR4ioqqGnmEEN9pzeNE08Cv6gsNROP0qPag1mdwsLAGj8+gc5qLtPiTV4ZtT58luq5h0dyAjt9s/0WbTsam1+Bz56NMH/aYDPykROw1t6fjpK3xWTQeW7+XMvd3yaEG/HhUb5IjsT9NC2o4TjQNvLqGXyliNK1+mFQI5LMk3HRdIzU1dIZJAxkxPAXjBmS1mURQiPZKNawfUVDnMzlcXIPXb9I5LZak2Og/iY+0ao+fv7y0jn1H6r9wrRad+68fQ5eU6JmWWr9JecdZf+kzXWDvhQb45O+n3bKbimsGdOWZjfup9RlYNI1L+nUhKYq3cFAKbIbCVn8rwr0RouOSxFAIEVE1HoPHXlnP7kP11TZjHFbuv34MGS20blfU23ukKpAUAvgNkxc+2sY9lw2TxedCRJBSkGmx8OPhPanwGcRaLcRrmkytFEK0OPn+F0JE1K7DFYGkEKDO4+e1T3ZBlE2ZamvKq0IrKR8pqcUnVSmFiDilwGnWJ4jxCkkKhRCtQhJDIdowXY/u5EjTNPJLakPi+/Mr8ZmSoLSkHp0TQmLTRmTjtMvXghBCCNERyRmAEG2Q4a0kf/davvnibUoPb0UZ7kh3qUUopcjtmhQSnzKsC3ZL+0iKLVYdi6X9fZR2TonhrkuHkhhnx6JrnDWmO2cOzyZKK+ILIYQQ4iRkjaEQbYwy6vjszX9ReGgvAJtWLmbY5Dn0G3UWpmofyVJzdE13cd28Abz40XY8Xj/jB3emS0Yc63eX0ic7kVh729zi2OM32XqgnKVr8sjOjGPa8GzSExynVTRH06C0xsvuQ5X4DZNeXRLJOM02j0fXNIb2TOXhm8djmAqXwyI1H0SbZDeqoewgyu/BktwZjzODDlRQXQghWo0khkK0MdWl+YGksMGGLz+k58AxWJ3JEerVqXH7TYor3ThtVlLjQzcxBrDqGpMGZjK0dxq7DlWwePUB/vrSegBG98/khnn9sbaxffo0DZZvzmfBB9sA+GZPCZ+tO8RvbxxHUqztlNstqfZy/z9WUuP2A/WVQh/4wViyklpmq2elFE7rt6Od7eA822OYlFd7iXVYSYixtkrlWotFw5DS+RHj8FdQ+cHjeI/sBkCz2km75Fe447pGuGdCCBF92t/8pw6gpqaaq666hCNHDgdiDz74a95/f2EEeyVai2H4Q2KmYaDa2Ry/0hov//evr/j1Myu596kveOfLfXiPc4KtFNR5/Tz+ynq27C0NxFdtKaCovO1No63zmby2dFdQrNbt52BR9Sm3qesaa7YVBpJCqK8U+v6KfVG/1rQpCis9/PqfX/Gzvy3n3qe+ZP3u0hbNZa16Hcq9nYrDizDrtmDVa1rw2cTxmIW7A0khgPJ7qfziZWyaEcFeCSFEdJLE8BR4dy6n+oV7qHrmWqpfuAfvzuVha3vz5m+49dYbyMs7AEBxcRE//emP+PTTJWF7DtG2JaRkEhMXXBik54AR2GOTItOhYxiq/r8TDeIp4KXFOygoq6u/reDtz/dwqPj4J9d+o/HE199GR2saS9a006ikqmlQWhmaBBeX151ym9HCZyieeHU9Rd8eT26vweOvrqekkcqq4WC1GJQdWkLe1pcpPfwVB7e9RtHehVgtvpM/uBEWi3bCvxfROE0Do7o0JO4vOYhutsx7L4QQHZkkhs3k3bkcz+f/QVWXAKCqS/B8/p+wJYcLF77J3XffS1paOgAfffQBkyZNYdq0mWFpX7R9uj2B2Vf+kH4jJpGc0ZmR0+Yz4szzUSqya+0MU7HlQDkP/mc1//fsKjbsLTtu5VC3z+Sb3SUh8cKy4yc5aQlO+nRNDIp1zYgj45hplJoG1R6DgyW1VNT6InLCHWu3cOmM3KBYgstO18y4U27TMBRj+meFxM8e2x2zjZaq95mKQ6W17C+qwd2C21xUuX0cKgq+qKAUFLVU0mxWUJb/dXAfSneg/KFJyolYdR+abx+Vhxfhq/wam14Zzl5GPaXAltEjJB47YBI+S2wEetQ+yYwDIURTyRrDZvKufh383uCg34t39evY+4w/7fbvu+9XQbcvv/xqADZuXH/abYv2wxabxrAzL0aZfjTd1iYSg72F1fzphe9Olh97aR33XjWCvl0SQ+7rsOn075nK19sKg+LpyTHHbd+ma9x24RA+/foga7cXMaRPGtNGZOOwfnf9StNgf1Etf/rfWqrrfNisOjedN4hhvVNbdddD01SM6ZdOWuIIvtx4mC7pcYzun0mC8/Q+Urulu7jne8N48eMd+AyTC6b0pl+3trmutMZr8I+Fm9m4sxiATmmx/OTyEae1xvJ4Yh1WkuMdlB0zQpgU7wj7cwEos/FpikqZTd5eU9c16io2cmTXe4GY3ZlM1wHX4TNd4ehmh2AkdiXlrJsoX/Y8pqcOV/9JOAbOwNO+ZtZHRK0OeyrrKHV76Z3kIstuQ28D3yXi1Og6+DUNiwIl76NoIS2aGFZXV3PZZZfx97//nezsbJYvX87DDz+Mx+Nh9uzZ/OhHPwq6f0lJCdddd13gdlVVFWVlZaxbt47q6mruv/9+du+uX2vw0EMPMWDAgJbsfqMaRgqbGhfiVNUPxlnbxBeA1arz2bqDIfGPVx2g/0VDMI6ZBqoDl8/M5UB+JcXfrhE8Z0IO2Wknvsqf4LQyf2IPzhmXg9Wihbz2Wq/BX19eR3Vd/ZQ+n9/kqdc38MhtE0iLa5kk4XhsFp1+2YkMzEnGNFVYkneLrjEwJ5nfXDcGpRR2q95mqy9uP1AeSAoBjhTXsvTrg1w4uWfYj9kYm85tFw3h9wvW4Pt2ZPKS6X3ISGyZojy6NQlXYg9qKr4rAuWIzcBiS+E4OWMIi1ZLwd7FQTGvuwy/pxBsoaNgonF+zY7eYzwp2QPQTAOfPRGPkslOJ+PW4emN+ymq++5C9pX9sxkQF9tmP1PaM69Fo9zrx2nVSdA0CPOFi1odVhVUsLGokr4pLiZ0TiFOLo6IFtBiieGGDRv45S9/yb59+wBwu938/Oc/Z8GCBXTq1ImbbrqJZcuWMWXKlMBjUlNTefvttwEwTZNrrrkmkDw+/PDDdOrUiT//+c989tln/OY3v+HVV19tqe4flxaX2mgSqMWltnpfhGgtpqlIig89CU9uJNYgxWXngRvGUljuJsZhITXOQVNmNClTYdEavyJaVecLGTUyFZRWek45MdQ0KKnycrCoBrtNp2tGHK5mbJHhD/MUSqWgfpBUa7MncLqusetgeUh8465izpvYI+xrFJSCnllx/OG2CRSVu0mItZOaYMfSQvOIfYaNrN7nUVWygarircSl9CEhfTg+oznHmIkyQwtJHW80UhyfaSo8lgSw0C6q57YF+XXeoKQQ4M2dR+g9ohd2OQTDqkKDZ9bvpcztQwPm9MpkbGoiljB9fpsWjZe2HWJXef10+vwaN1uKq7htcA72NnDhWESXFrvs9sorr3D//feTkZEBwMaNG+nevTtdu3bFarUyb948Fi1adNzHv/7668TExDBv3jyUUnz00UfceOONAEyePJnf/e53LdX1E7KPuhCs9uCg1V4fFyJKmaZi4uDOOGzfJUw2q86MUV1DRguP5rTqdEuLJT2+aUnhycTH2EiMC/770zRIOY0phYdK6/jZ35fz2Mvr+MPza/n982upcoee0IvvmKbijJyUkPiYAVlYWmpOr4LEGBu9O8WTkehosaSwgc+MJyZlIp3OuB5X+pn4zISTP+gohnKRlj0hKGaxOrHFZISzm6dM08Bu1uCoPYzDqJTiOFHG10jC4DHMVtnipSNRFp3XdhymzF0/i0UB7+0uoNgfvu+QCr8RSAobFNV5KfGeWjEsIU6kxUYMH3rooaDbhYWFpKenB25nZGRQUFDQ6GMNw+Dvf/87Tz31FFA/xdRut/PCCy/wySef4HA4+PnPf95SXT+hhnWE3tWvo6pL0OJSsY+6MCzrC4VoyzITnTx441i2HyhHKUXf7skttvn68cTaLdx1yTD++L+11Hn8WHSNG84dQMoxyWJTKeDVJTsD0xMBDhZWs/NgBcN7yyyAE+ndJYGZo7uxePUBlIJBvVKZOKhTVJ14KgV+v86pDFOZJsRnjMHmTKQsfy3OuE6kdBqLXzUvwWwJmgaOyv2Uvvs4RlUJemwCKbNvxZvWF6UkQ4wGWbEO7LqG96gEcWrXNJy03KCr36JR7PXjM0zSnXacHWA0y6MUu8tDq22XeXxkxoanYJyu1de7Pva3aZWiQqIFtFrxGdM00Y66JKmUCrp9tM8//5ycnBz69u0L1CeKxcXFxMfH8/LLL/Pll19y2223sWRJ87ZwSE0NrRhYWKhjtTZv4NR6xkRiz5jYrMc011tvvRd0+/77H2jS43RdJz09vtGfHS8uxNFOdJykpcVxRs+0VuxNqNTUOB67ewpFZXUkxTnonB6HrZl/ww0qqz0cLmnkS73aI38vJ9Dwu7np/EHMm9QTv2HSOS0OV0z4C8+0b/GQmkFGt7HouhVNaxtr4/wVxRx651GMmnIAzNpKSt7+C12u/yP29OywPY/8DUVOOnD3mD58sDuf/BoPE7NTGd05hZSYU7uIdjIldV5e2LiPbSX1e7nG2a38cFRvuieevHpsez5Oan1+eiTFsre8NiieHucgPTU8ryvBbzCpaxqf5X23pntAejzdkuOIs3eMGpLt+Rhpb1rtiMrKyqKoqChwu6ioKDDN9FiLFy9mzpw5gdvJyclYrVbmzp0LwIQJE6itraWkpITU1KZf1S8pqQ4pEGGaZtjXCEWSaZoUFVWFxNPT4xuNC3G09nKc2IDO325jUV526huP67rG9JFdeenjHUHxPl0ST/h70HQNDQ3zONt1RLNjj5E4mw42ndpqN7XVofswigZtZ989R1VBIClsoPxe6orzqVChVYZPRVv7LHH4SjGO7MCoKsHepS9GUnf8RPeFjATgsp5Z+AGbAqPaQ1F1yxyHO+s8gaQQoNrr5/1dR7ioR2b9xrfH0daOk1NxUZ/O/H3DPqq8fjRgVo8MktDC+rqmdU6mT1IseytqyY6PISfOSV1FHR1hl9toOEbaEl3XGh0oa9BqieGQIUPYu3cv+/fvJzs7m3fffZcLL2x8Xd769ev5wQ9+ELhtt9sZP3487733Hpdffjnr168nJiaG5OS2WcZdCNE+mKZi4qBOVNf5WLRiP64YK9fM6U+X41RP9RmKHQcr+GDlPhLjHJwzPofOKTFhn5vlMxWF5XUoBRlJTuyWtjHSFGmaBlVug/ySWuw2ncyUWBwttqgxijnj0GwOlO/oJEFDjw1PUtjWOPwVlL/1B/xl+YFYypzb0LqObrMFnsJFGQoLYS+SGUTTNAprQxPOfRW1+In+fdFSNI27h/WkzOsjxmohQdfRwjyN1m5CL6eDPrHO+gGOjndNUrSSVvt7dTgcPPLII9xxxx14PB6mTJnC2WefDcAvfvELpk2bxvTp0wHIy8sjKyt4o+eHHnqIX//617zwwgtYrVYeffRRdD08J0snmtbankT7F5wQLSHWbuHCyT04e0w3dE0jxmZp9G9J02DLgTL++vL6QGzV5nx+e9N4MhPDt1VGtcfg6bc3sXlP/WbqvbokcsfFQ05pj0QFlFR7KSitJdFlJzM5Bls7XpdSVOnlwWe/oqq2vujCwF6p3Dx/ILHNqCIrwGtPIfmsGyl97/+Bqj/DTDrzSnwx6Sd5ZPukSg4EJYUA5Z8uIOXy/nh02VPydCml6BYfukftsMxEbCr6C8kqBQ6lyLJ++xndgmsr28KexqJpTIuGX4GD9rXvZIsnhkuXLg38e9y4cbzzzjsh9zm2UM2GDRtC7pORkcHf//73sPdP1y0Yhh+rtf1PKTEMP7ouJ0iiY9ItGlC/96Gug3GC6UvHUibEfltx9XgXWPwK3vx0d1DMMBVb9pWQNbRzWIquaBps3F0SSAoBdh+q4KstBZw1MrtZJwWaprEtr5w//W9t4Dxl1phuXDilV/tMDjV4Y9muQFII8M3uEvYcqWRgd5k90hxKgdF5GOlXPYxZVYzmSsYfm4lBdH5/KL83JGZ6atGU7NsQLp2cds7plcmiPYUYStE/NZ5xWcnt6oRYiHDQNCgwDF7bdpiCGg8jspKY0TWN2HYyyhvtI/wnFRMTR1VVOUlJqW2mMMCpUMqkqqqMmJjjzxsWIhppmkZBhZuPvjrA4eJqJg7pgqZBRnIM3TPiwla5TYNGi9zYwjjN02LR+WZv6D6p63cUcfaorjTn2nuN18/f39wUdPH6o68OMHFwZ7JTT14Qoq3x+lWjeyceLq5hUE5yVFVDbQ0mOm5nJjgzI92VFmdJzUaz2oMSxPgRs/FaE6J/OKuVWE3FxLREhqYmYChFvEVHa8bFOSGiRQWKJ9ftxf/tl+/Kw2XU+Qwu7ZV1wvW2bUWHTwzj4hIpKyuioOAg7fsbQsNudxIXF51rRIQ4npJqD7/550rc3vqr/9v2lzF/ci/e+HQXl8/qy/DeaWGZZq0DF0/vwyPPrQnEnHYLZ+SkhC0pMQyTYX3SWLnpSFB81BkZzZ5C5PYaVNaEjpRU1nqhHSaGDqvOuIGdWPjF3qB4ry6JkhSKE/LEZJJ2yS+pWvE6/rJ8XIOnYe09Hq8cN2GlTEX9xFytXZwAC9ESiup8gaSwwYaiSub2zKQ9TFzv8ImhpmmkpLSNDYeFEM2XV1AdSAobLF1zgCnDs/nfh9sZkJOCPUwFSnp3iuf+68ew8pt8EuLsjOqXQVq8PWyJiVLQPyeFcQOzWPFN/ZqooX3SGdkvo9nJbUKsjV5dEtl9qCIQ03WNrOT2lxRC/RTfGSO7cqiohq+3F2K16Fw8vTfd0tvDV62IJKXAHdeNmFl3opt+/BZn0P5+QggRLjGNzCKKtVmwao3tRtn2dPjEUIioorzUVhRh+L3EJaWjWaN/arHeyFRRq0XHbyg8PgNTKeongobhuTSN7ukues7ojVL1hQDCPVrlslu47pz+zJ/cE6UgLcHJqeS1Vk3jlgsG8/Rbm9iZV05SvINbzh9ESrytPXw3NSreaeXW8wdSVuPFquskxlrb7WtpCxr+djpKQQu/soBmadHiIEKIji3dYeOMlHi2ln63xcZFuZ2JaSfFZCUxFCJKKF8Naz95g93frAbAlZDEWZffgS02OisNNuiWGUeCyx40bXLmmO4sWrGP86f0ItZuCfuJb3MK25wKiwYZCc7TbifFZeMnlw+nqs5LjN1KjE1v99MudSDV9e0m3e38tUSKhsJRfRDP3nWg6Th7DMUT1wWl2mFRIiGEaENspuLSPlkccadQ4zNIj7GTZrG2mwtwkhgKESXKCg8EkkKAmspy1n/xAaNnXYmi/RZWOpnEGBu/vm40a7cXcaS4hn45yew9VMHlZ/VlSM/UdvNh3FKsGiTH1idS7T0pBNB0qHYbWPTjby0iTsxRdYCilx8A89sp2CvfIv2y+3HHdY1sx4QQIgrYTehut8O31zDb05evJIZCRAFNg4qSgpB4/v6dKMMLltMffWrLUlx2zhqZjaZpKKUY3TcdjXb1WSyaoNZrsGjVARat2Ees08Y1c85gcI8ULO1x+40IsVh0ajct/S4pBDD91G35HOu4KzGM9jDZSQghREuI3mEEIToQpSA5o0tIvFvuYHRrdCeFDUxTYRhm/Qihiu6ksNZnsOtIFdsOVlDp9qO1l7xI0zBU4+tCT0bXNZZ/k8+7X+zFbygqa7w88eoGDpXUtkBHo5em1e/hdyzTUxOB3gghhGhLZMRQiCiRmN6VIRPOYuPyj1BKkd65OwPHzGjTdRY0DUxvNWg6us0l0wKboMrt588vruNAQf3CdpfTyv3XjyUt3n6SR0aOpkFBhYe3P9/NgfxqzhyRzdj+mcTam76husdnsmRNXkh824EyumfEybHTRH6/iWvwDOp2rg6Kxw6cikdGC4UQokOTxFCIKKFZnJwxZjY9B43B8PuIjU9BaY5Id+u4TF81O9d9xqaVi7HZnYyZeSFZPQeDZot019q0bQfKAkkhQI3bz7tf7uH7c85AtdGrAGU1Pv7vX19R5/ED8PyibZRU1HHx1F5NLiBjtWp0SnNRUBo82pWWGCNJYTP5U3qSdsFPqVq1EDSN+FHz8Cf3jHS3RASYFg0f9UuhZEN6IYQkhkKchKZp9SNbbfSk+2gKHXts2rf/brs0TSNvxzrWf7EIAMNfzbK3/8ucq39EfFqPCPeu7dJ1jYOFoVP+9hyuxG8qmj7+1roOF9cEksIGH311gNljuxPnaNrXkKbgkml92LKnBK+/fmSrS3ocfbITw97faGdoNoy0/rjm9kMBHlNWlXQ0mgalSvHa1kPsq6glNyWO83t3IqEtf3EIIVqcJIZCHIemgae6iEN7NuOpraFr7mBcSZ3r98ESp0d52fb15yHhI3u3kZjRs10k4ZFgmoqBPVNZ+MWeoPiUYV2w6Vqb/b1ZG9nw126zoGvNS0g6Jcfwu1vGc6ioBrtVJzsjDlczpqOKYD5JCDusOg3+tm4v1b76IkTbS6v556b93DE4B1sb/RwRQrQ8SQyFOA5PdRHv/ueP+DxuADZ8+SFnX3kniRm9I9yz9k/TrCSlZlFelB8Uj0uS7SVOJifTxdWz+/Hykp34fAbTRnZl7ICsNv17y053kZ0Rx8HC6kDsirP6Euds3h6TSilSXHZSXG13PaUQ7UGZxx9IChsU13mp8PtJ0+ViixAdlSSGQjRC06DgwM5AUtjg62ULmX7xHZjyp3NaTKUxZOJsDu7egt9XvzF9QnIaGV1zI9yzts9m0Zk2rDMj+2VgKkiIsbbtecNArN3CTy4fzrYDZeSX1DCgRyrdMuLadDIrRDRzWENHi3UNHBa9zX+eCCFajpzdCnEcfp8nJObzeFDyrRkWMYmdmXf9fVQUH8ZisZGU3gXdnhDpbrULpsl3a/NOcjhqmoapFLquRbQ4TbzTyqjcdHQ9QxJCISIs2aIzrVsaSw8UB2Jze2YRr+nRvdePEOKEJDEUohFKQaecvmi6jjK/K+E+ZMJZ9VUz5XvztCmlsMemkdE9DU9NMcWH96BpOskZ2dhiU+TcJAxqvQZrtxfxydcH6ZYZxzkTepCR4Ijo71aSQtFe6TrY/DUozYq3DVd8bgrNhKmdUhiQGk+5x0+K00a6zUqb3t9ICNHiJDEU4jhiEjtxztV3s/HLRdTVVDNo3AzSsvtGbcKiaVB4aB+H9u5E13XSOvfAEZfe4q/XXZnPe//9Mz5v/QitI8bFnKvvxu5Kb9knjnYaLFp1gHe/2AvAviOVrNlWyEM3jiMxVrYEEeJkHEYlqvQgyjSwJWfi3rGK0nWLsMQkkjj1Cnzp/TBV+y3gYzUVnW1WOlm/PRWUpFCIDk8SQyGOQykNV0o3Js7/AUqZmCq6F+TXVRzm3f/8CcNfv62Aze7gnGvuxhHfqcWe02LR2b7ui0BSCOCpq2H/tnX0HXVWuxtdMpSiuNKD22uQkRRDjC1yJ43VboNFK/YFxWrdfg4V15DYLSkifRKivXB6Syh764/4y/OxJqQT22cElWvrt9cx66opfuOPpH3vN3jiu0e4p6fG1KHQ5+dgtZskh43sWCfOdvZ5K4QIP0kMhTgJw9Sgze4QFx4Wi862tcsCSSGAz+th9zerGDRxPoZxggefFkVFSX5ItLKsCE3TaItzdnVdo8ZjYCpFnNOC+namsdtv8Pqne1iyJg+AlAQnP7t6JKlxkamgqetgs1rwG8H7B1oa2TqiPao/PpDN7ZtA08DuLUXVVqDFJuK1y1TtE9E08B3YiL+8/rMppucQaravPOZeCn/hXmiHiaGua2yqrOXFrQcDsZzEWK7t1wW7eYIHCtHRWTSqTYUGuDQtKkfZJTEUQgCK6oqykGhNRRmmrxb02BZ5VsNQ9Bs+mcN7dwTFew0YiWG0vTMUn6lYs7WA/324Ha/P4OxxOZw9uhuxdgt5hTWBpBCgtNLNK0t2csv8gUQiwY1zWLlsZi7PvrslEMtKdZGd7mr1voSTpkGRv5BvirZhKpNB6WeQbssApUW6a22SpoG94BtK3nsS5XOj2ZyknnM73syBkhweh67r+Iq/+1s26qqwuJIwqsuD7+eMo8WumbWgWhRv7TwcFNtXUUuhx0e2rZ1MM7do+AAbgCEHsmh5bl1jaV4JXx4qQddgard0JmUlRd3FFEkMhRAYhqLv0PEc2rMtKJ7ZrRd+nw9LC9ZZSMvOZfycy1i37D103cKIaeeSlNmj5Z7wNBworOYfb28O3H73i72kJjiZOqQzBaW1Ifffuq8Ut9/A2Uhp+JZmmoqx/TPJSnGxYVcRndPiGNgzJSIbwmuahqaFp/BMgb+Ahz7/K36zfiT0rW2L+MWku8i0ttyU56bSdQ2brwql6fgsrjYxmunwllL83hOob6ssK5+bkveeIO3Kh3HbUiLcu7bJMEycPYZRs3EpALW71pJy5pWUFj5HwxQBa1IGekavSHbzlJkK3P7Qs1mvob7NtNq2ah0+2lfI1pIqeie7mJ2TSULk/9REFNM02F5RwxeHSoD6axFL9heRHeekb6wzwr0LL0kMhRAApHbOYfSM89i+bgW6bmHYpLOxx8Rgj0mgJQfvNIuT7v0nkN1nKBoamjW2TZxQH0vXNTbuKg6Jf7L2IJMGd6JTWuhI3NDc9IgkhQ1sukafzvH0zU5AKdXqI0SaBiXVXtbvLKasys3Ifplkp8Vi0U5tdM9i0Vi5f00gKQQwlMnSfV9yZd9LIjrKbDdr8W//ktKVb6JZbSROugzVdQR+LTJTiRuYNeWBpLCB8nkwa8ohSRLD41HpvUmc/D0ql7+OMg0Mdw0Z37sfX8khdHsMWloPPLakSHfzlMRqGiOzklidXx6I2S066TFtv+K236Lxn00HOFxTv8fwhsJK9lfUcdfQHjiicFqfaBt0i86agvKQ+MbiSgb0jMXfyIWW9koSQyEEALo9iV4DRxKflIbN7mDL6mUUHTlAjzOG0X/0dCyOpNN+DuWvprK0AA2IS8lCt9YnU6ap0Cz101XbYlII9f3KSg1N/rplxmPRNbqmx3He5J688/keTAVdM+K5YErbGFGIVBGf0hof9//zK2rqfAC89+U+fnLFCM7omniKLWpU+0JHZqu9NafRy9OnaWAe3EjFsv/VBzxQuuhpUi+4F9LOaJHntOomGgq/spww4ddjE9GsdpTf+11/rXb02Ka9B5qmtdm/yZbk02PQ+59Fau+xoEz8jiTqTA3i2t+awhCm4uzu6SQ6bKw6UkbnOCfn9MwkAb3N79Nb7jMCSWEg5vFR6vV9V11ViDBTpqJnYiy7y4K/a3ISYjGibCqz/BUJIQJSM7vgNzQW/ut3uGvrPwC3rF5GeVE+ky+4EdXIPCNN09B17aSjNX53GYtf+n9UlBYCkJCSzszLbsfqTA7/C2kBSsGAnBQ6pbo4UlL/u4lxWJk3qQfKVNgtGvPG5zBxSGc8PoPUBCd2vWOve9t1sDyQFDZ4efEOfnXtyFMaNTQMk4nZo/jywOqg+PQeEyM6WmjVFTUbF4fE3btWY8scENa+6ZqJvXwfVavexqyrIm7EHFTngfi1xqczeRwppMy+ldL3/x/K8KFZbKTMvhWPI+WEo0N2fyWqaDdG6WFsmT1RKTn49JiwvY72wDTBY/02gT7Ft1DTNOxGDaDwWePaTKXlGBOmZyUzuVNy/YmgodrFBQC7RaOxsmT2KCmqJdom01SMzEhiTX45Ze7677SMWDv9U+JQbeRvOlwkMRRCBKkqLQgkhQ0O79uOp6Y8ZG9Bv7uMQ7u/oazwMN36DiE5MwfNEnqCqusaB7avCySFAJWlRezbupbcETPbzMnSySTEWPn5NSM5WFSN36/oku4i2WULjNhoQIqr8amDmgZ1PpPyai9xMVYSYmzt5nWfKl8j02vcXj+mAssp5szZMV25Z9xNLNzxMaYyOafPDLrHdo/oFDhTaViSO8HhXUFxa1Jm2N9je9VBil75bWCtW+l7T5Iy+xa0bmMaHTlUSsPXaQipVz6Mqi1Hi03C60hFnaBYj025qfnk37j3rg/EEsadj2XwuRhS5KfJrMqLduBryr54GWUaJIw9H1vPsW0mwVamancngQmazozu6Xy8vygQG9c5mWSLJSorRIq2I17BHUNyKHL70DSNDIc16grPgCSGQohjWG2hiY1usaJbgj8uTG8lH73wOFXl9Yuxt6/7kjGzLqLHoMkhJ6i6rlGQF3zSDFBwYCf9Rp2Fabaf2n4uu4W+Xb6bhteUi+yaBodK6/jLi+sorXQT67Ry24VDOKNbQlRX0+ydnYTVouE/aqrN+VN6Y7fopzw6oSsLPWN6cdfwHihAM/SIr4syTHANPZu6HatRvvppbnpsAvYew3CHcRRG0zS8eVsCSWGDqtULie86DB+NX5RQaHgcaeBIa9Lz6JVHgpJCgMqv3iEtdwKGIw1NUzhq8zFKDqJZ7Wip3Vt9vZ3FoqNhYphN+xuMBL1kFyWL/h64Xb70v6TExEOXkRHsVTtnKiZlJdEnOY7CWg9pMXaynDZ0SQpFK3Ca0NX+7cypKEwKQRJDIcQxYhMz6JY7mAM7NgZiI6bOxRaTFHQCVlFyJJAUNvj604V06zsM3RYfFDcMkx5njODAjm+C4j0HjMRouU0Sw07DxPDVoFtsaBZnk09I67xmICmE+o3m//Li1/zhtokku9pBGcBTlJHo4Dc3jGXhl3spLXcze3wO/bslhWfKmqHTllJqT1w2ad97AKMkD03X0VO747aHu7iLQrOFlgjW7bGghS9BPno9YoBpgFE/hcpRsY+iVx6Cb4sAWZMySTr/XjytUOVU08BRe4S6TUvxFR8gdtA09C6D8LbQljqnymLRqQvZ+xBqNiwmtvtI/P5GHiSaxGpCts1KduK3p7BReoIuRCRIYiiECKJZnIw563v0HTaByrIiUjKzSUjtEjL1rLFRPsMwMA0vVocWNIVOKcjo1o/+o6eydfUyAM4YOZmsnAHout4m9yw8lumpYP0X77Fr41fExicy4ZzLSemUi+Lka1sqar2BpLCBYSqKK+qiOjFEQefkGG4+dwBK1W8K3FZHd06XUgq3MwO6ZLTgc4Atuz+aIxbl+a4IT/z4C/Go8H2da4mdsLgSMWoqAjFHtwGYsanYND+VX7wSSAoB/OUFGPm7oOvosPXheOyeYkpeeRDz29fvObidxEmXog+YjdmGPkaUUtiSMkPi1uROmGZjq+REe2BqUGaYVHh9pDjtJOoaWhs67oQ4XZIYCtFG+d3llBflYRoGSRnZOFzprVYcQLe5SOlyBqnZZxz3RD4xtTMOZywe93cnqH2HjuXzhQsYNGY66d0GBCVNus3FkEnnMXD0NHw+N7quc2j3RooO7SO79wDSOvdCs7atq/4NNM1k4/IP2LmhfgSgprKcj176G+dedx8xiSffPy8uxoYrxhZUiEXTICmuBTeIbEMaFufLqfDp88RkknbJr/Ee2ITprsbZYyjehG7hfQ5rAikX/IzqNe/gPbSDmD6jiBk8Ezd27GYd/sqikMeYNWVoWssn/mZJXiApbFC58i1ScyfiscQf51GtzzQVzl6j0L/+ALOuGgDN5iB2yAzcMu2xXVKaxqrSSt7ZlR+IXdE/m4HxMcfO7hai3ZLEUIg2yF9XwvvP/YW6mioALFYbc6/9Mc6E1t3E+0QnebaYJOZccw/b1y6jOD+PLj374a6ppjBvD0sO7uW8H/wcR1zwFXO/t5ZvVnyMruvkH9hNScFBAHasX86gsTMYMGEuSoW3upyuKUzDjW5xYJ5i26avlp0bvgoOKkVlaX7TEkOHldsvGsKfX1iL31BoGlw9+wxS4ztGYijCRylwx2Sh9euErtFiSYY7JgvH5BuINT349Rjc3z6N3xJL3JAZVHz+UtD9bZ1y8bRCvqNpjfwN6xba1Lzib7mdGaRc+hvM4v1gmljSuuOJyYzeYfMoV6FMFh6VFAK8su0QOSN7E7qRkRDtkySGQrQxmqZxcPfmQFIIYPh9fPPVYkafdVWbmS6lFNhd6QwcN5OVH77MltWf4fXUMWjsNJyueKrLi7A749C+3atQ0zQO7dzA1rWfM3r6/EBS2OCbVUvpM2witpjwrVMyPOVsWrWEfVvXkd6lB8OnzsMRl9Hs8zLNYiM+OY2KkoKguMPZtNMBpRR9uyTwh9smUlzhJjHOTmq8owmTUIVonFKqxfMLQ+kYWkzQUK9pKuy5E0jweaj6+gMszngSp16JP6lbqwwJa6ndQqa5Jk64GJ81oU1WpfTY06BzfdEfH0hS2I7V+IyQQ9xnKmr9Bi6LJSJ9EiLcJDEUoo3Rdag+pqgLQGVJ4bfVCNtYOqHbKMk/hKeuhlHT57Nj/cpAApWYmsmMS2/F6kxG10x2baofdWvs1EiZZki1xWNZLDqapvD7T35ypSkfK95/gUN7twGwf/sGCvJ2M++6+9DtCc17jZqD8XMuY9H/nqjvJ5DVvQ8JaV2a1UxSrI2k2CheUyg6BK8lHn3ofFIHTkdpFnx6TKvlOx5bMikX/RLv7jX4Sg4SkzsGMyMXow0mhSK6JDusOCw6nqPWxCc6bCTarRBlm5yLjksSQyFakunG56nF5ogFvfENqI9lGIpuuYPZvOqToPgZo6Y0qdBJa9OtsUyefzWfv7MAd01V0KhaRUkB+7d9TZ/hM1BoZGT3pPDQPrzuWuISU6iuKA3ct9fAUdhdyY2eYGoa1JUfZuuaZdRWl9N/1JkkZ/UC/fhJlqe2PJAUNnDXVlNVVkhiZjMTQyAxoyfzb/gZlSUF2J0xJKR2abNrIoVoaaYJHj2u/kYrnxO7HenoA+dg1zS87aBwlYgOsSbcNCSHBVvyKHP7yIh1cHX/rjhMJeunRdSQxFCIFqBpUFt2kE/f+g+VpYUkp3di8vxriEns3KQr6wnp3TjzgutYtfhNDL+XIRNnk9W9f5uchaRUfdJ0zrU/Zvn7/wv5ef7+HfQdOQu/3yB32ET2bF7DppVLGT39PMpLCijNP0iPgSPp2mcoSjU+HaeuMp+F//kTplFfCfHg7q1Mv+gHpHcfdNzfSf3eixbMY7bDsDSyT2PTXqeGIy6T9LjQSoNCNEbT6he+tVbRqPZCQ2H3lKCqS9FjE/HGpjd7/W991WP5vYrW1clq4a6hPXAbJrEWHavR8lO6hWhNkhgK0QL8nko+fOHJQMXOsqIjfPTSU8y77j40a9zJG9BsZPYYytzr+qJMhcXuCtr+oa1RSkOzxtHjjOHk7dwc9LMe/b/bq9AWm8Y5195LZekRNE0np/8odGsMpjr+hueaBgUHdgaSwgbrPv+AWd36AY2PGtpikhgxdS6rl7wdiHXrMwhXYsttJyAEAJqiyF/IN4XbMFEMzjiDdGsGqDZYIaWV6bqGNX8TxQv/CoYfNJ3kGddBz/GnXBxKiNaiFNgNhR1Npo+KqCSJoRAtoLayNGgbB4C66kpqK8twpTQhMeTbGgV6DJpOm04KGygFmd3PoN+ISWz7+gsA+g2bQFZO8Einbo8nKau+rLwC6meCnfj1NVaJUNd1jleKUPlrKSvKIz4pjZmX3kRlaRHxyRkkZ3ZDszRtSq8Qp6rQX8BvP/8rxrd7fb69bRG/mHQXmdbWrSrcFtk8ZZS8/1R9UgigTMoW/5v0K3vjjsmKbOeEEKKDk8RQiBbgiHGhaVrQKJiuW7DHRPeaNN0Wx9CpF9J/9DQA7LHJp739hFKQ1a0PVpsdv88biA+fMhfV2EeY8rH+83fYsW55IDR00mx6ZPdFIZXjRMuyWHS+2PtVICkEMJTJsgMr+F6fizA6+po4TxXKWxccUyZGbTlIYiiEEBEl8zaEaAH22BRGTz8/KDb2rIuxh3ErhrZKKR1bTCq2mNSw7UnoiM9k7rU/ZvCEs+gzZCyzr/ohyZ16NXpfd1VxUFIIsP6LRXhqShu9vxDhpGlQ46sLidd4a9FkJik4E9Fjjyn+pFvR41Ij0x8hhBABMmIoREvQLOQMmkhm91xqKstwJaQQk5COaou7MLcDSikc8VkMGDcXTdNOOOpy9KjiUQ3g93s5tbIzQjSd328yudtYVh78Oih+Zs4E/P4OPloIeG0JpM69i5KFj2HWVaHZnaTMvhWvIy3SXRNCiA5PEkMhWopmJSaxMzGJnSPdk6jRlEqErsR04hJTqa74bi/IlIwuxMbLiIRoHV1jsrl77I28u3MxCsXcPjPoGtNVimhSPzXck9yLlMsfQtWWoznj8TlSUO1gHbUQQkQ7SQyFEFFFs8Yy63u3sf6L9zmybwdde/Vn0Pizm7yPZEdn6n4UJlZllzLsp0hXVnrF9uau4T3rA4YuSeFRlAKPJQHiv51SKkmhEEK0CZIYCiGCWCw6oDDacilu5aOusoiaylJcCcnEJGSA9t22FbbYNEbPuhJletAsjrCtdYxmpmawt3Yvb2x9H7ffwzl9ZjAopT825Yh019ovo+Mcd3blRjfc+G1x+JWcWgghRHskn95CiHrKIG/nZjauWIKmaZwxairxqd1QbaxGlaaZ7N+8khUfvhqIjT3rYnIGTAjqq0IHPUZGvZroiOcwf1nxTOD2v9a9yC0jr2ZQ4kD5HYrj0jSFo3QXZR/9E39FAc5eI4ifdDkQH+muCSGEaKa2dcYnhIiY6tI83v73n9i7dR17tnzNe//9C9WleZHuVghvTSkrP349KPbVx6/jrT151VENP4a3EpSnpbrXLum6xrqCzSHxD3d/itKlYIo4PkddIUWvP4K/ogAA9+61VH7yHwxP7UkeKYQQoq2REUMhBFarzra1n4XEt6/7klGzerSpvdc8dbUoM7g/yjTx1NVgiz1+ZUNfbQlfffQyh/ZsIyktk4lzryIutZuMhlG/5ivBHhcST3IkoKHL8jhxXEZ5Phy1ZyOAZ/8mjKoSICkifRJCCHFqZMRQCAGApodu/q43Eou02PhknK7gaWrOWBexCcF7RGoofLUlVBTsxvCUseztf3NozzYAyosLWPS/x/E1YZSxI1BKMSj9DGJtMYGYRdOZ02c6yjjBA0WHpztcobGYePSjjiUhhBDtg4wYCtHO6JqJ4atDtzpQYfoT9vtN+o2YzK5Nq2gYQtM0jdxhE9rUaCGAxRHPWZfdyrK3/0N5cQFJqZlMPu9aLPb4wOifpiny96z//+3dd5xU5aH/8c85U3d2Z3ulVwFRsSCKKChYEdRobFFjYm688ebnNVWNJmo0RlI15RpjEnNvmokaFXtixV5QAREbHQS2s33aOc/vj9XBdSgL7OzM7nzfr5evF/M4Z+Y5u8/OnO95GosW/h/GdTl09ik0bu45LDYRj9HW0kBJXul23iX3lHrKuPrIy1jZvJqYE2d86RgqvJVaTVN2yi0aSt4+h9H1/ivJspJjL8JbVA71bRmsmYiI7C4FQ5EBJNHVyBuLHmTDB8upHDqaacd/lmC4qk+GQ+aXDOUzX76Cd19/ASyLcQccTn7x0KzLBcZAsGgoJ5z/LeLRDnz+EHiCPX4Gsc5mnn3gT8khp04igc8fIB7rObcwEAz1Z9WzmjFQbJUytbQUy/ro/kC2/fIl68TtPEIzLyR0wGxMVxueompiBTWZrhYej41ldd/0EhGR3lEwFBko3CjP3PsHGms3ArBp7Xs89pdfMP+iK7H9hX3wBjZDR08gr2gYAI7jZncusAP48ra/lUKkoxXX2TYG8oNlrzDlyONZ/NSDybJJhxxFqLAy7dUciDTvUnZHzA5B6QQA4hmui5c4dsNKOpf8GyuYT/6U44iGR2CwMlwzEZHsp2AoA1Yi0kzDpjU48RhlQ0aRV1iFMYP3y7+rvTkZCj8W6WynfWsDhZV9EQy7ZdvQ0T0RKijG6/OTiMcAaNvayIer3mP+Rd+ivaWZvPxCCkpqwPZ/4ihDIrKVSEcreQXFeINFCkgiA4xd9y6N9/8s+bjznRepOPf7RAqGZ7BWIiIDg4KhDEjxrkZef+p+qoaNwhjDilefYuLBRxEqGbxf/l6fH9v24H5qBUBfINg3b+DG+XD1e2xtrCO/sJT84hqwfbs+Lgt584qZc+aXefreO4hFugjk5XPgUSeRXzKSUPGIlOdblqFu3Vssuv9/Pxp2GmTOmV+muHofjNKhyIDgs13aX3uwZ6Fxia5din3ACFxXf8siIjujYCgDjmVBe3MtPn+AV59cCEDl0FG0NtVSUDoU1wzOxXYDoRIOOWY+rz15f7JswkFHkBfe8RYNvWXhsmrZs7z21MJk2dTZpzD2wGOA7FuZdFeMgZKaiZzyH1cT7WwjGCrEEyjcYciLdTbxzH1/TA4/jcciPPXP33PKf1yNp0+G6YpIv7BSP68sy1bvv4hIL6Q1GLa3t3POOedw2223MWzYMF588UVuuukmotEoJ510El//+td7PL+xsZGLLroo+bitrY3m5mbefPPNZNmWLVs45ZRTuPfeexk2bFg6qy9ZyrIsIp3t3StofqTuw7WUVQ9n6PgDYZAGQ9dYjN7/SCqGjqGtuZ78whIKy4Z+ajjknol2NLH46Qd6lL3+9IMMHz8Ff37FXr9+Jhhj8PgLCX0U7HbW89fV1tJjTiJALNJFtLMtebxIkm3oNO14LC9BE1KvcpaIuzbhaacQ3fjOtkKPF//oKUT0OxIR2aXdCoatra0UFvbuImnp0qV897vfZe3atQBEIhGuuuoq/vznP1NTU8N//ud/smjRImbNmpU8pqysjIULu3ssXNflwgsv7BEeXdfl6quvJh7P9PR2ybTm+i0pZZvXvc+Bg3yokGX7CZePIlw+qk9fNxbtTLm4NcYQi3bhT92mbNDJKyhKGabrD+QRCIV3cpTkorini1e3vMFdbz9Eni+P8/c/nX2LJmIbDcDJBonyfSg/67t0vv0sdjCfvIkziOYP1Qq7IiK90KuuldWrVzN37lxOPvlkamtrOemkk1i1atVOj7nrrru49tprqazsXvVv2bJljBw5kuHDh+P1epk/fz6PPfbYDo//5z//SV5eHvPnz0+W/f73v+eII46gpKSkN9WWQcp1DRVDRqaUDxk9AWxdnO2J/MJSQuGiHmV5BYXkh8syVKP+5c8v5ejPfBGPt7v9+PwBjvnsf+ANFO3iSMkVrpVgddcqbl/yV96qe49zDziNokCY3yz+E5ujqTeqJDMcPESLx+Gf+R94p51DJH+YhpGKiPRSr66if/CDH3D11Vfzk5/8hKqqKs4//3yuueYa/vrXv+7wmBtvvLHH47q6Oioqtg1Jq6yspLa2drvHOo7Dbbfdxq233posW758OS+//DK///3vd/q+O1NWVrBHxw0WFRWDp/cj6NuXUROnsPbdpQAUlVYy5YjjKCvTsL89E+bkC/6bZxb+mfoP11IxdBRHn3oBlUOqM12xflNaOp3qEaPpbG+hoLCUorJKLGvwrnK7NwbTZ0lvvb7pLX720m+Tj5fXvsf5Uz7Dn5fey4a2jRw4cVIGa5edcrGdyO5TO5FdURvpP70Khlu3bmXGjBn85Cc/AeC8887jrrvu2q03cl23x0WWMWaHF13PPfcco0aNYsKE7n2Rurq6+P73v88vfvELbHvP5481Nrbn7KpkFRVh6uvbMl2NPuTjsBPPZ/8jTsR1EuQXV+B6QoPsHPuXHazg1C99i5amrXi8XlzX0NjYhjvwd6/oPStMIBwmbqChoT3Ttdkpy4IuOmmPt5PvyydEfr/0jGTbZ8nHP4fmaDN53jyKvMVYbt/OM/Z4LR59/+keZQbDqqb1DAlXUegvTPvPxLIsLIsB8x2Wbe1EspPaieyK2kjfsm1rpx1lvR53F41Gk0Guvr4edzevFqurq6mvr08+rq+vTw4z/bQnnniCuXPnJh8vXryYxsZGLrnkEqC79/Hiiy/m17/+NWPGjNmtesggYgcIFQ/NdC0GFa/XT0vjJl5+7G66OtuYPO0Yxh94FLYvt3vbs41lWWyIruPW1/6PlmgbRYEwl0z9PCOCo3JuIZT6RC03v/I7tkZasS2bsyfP54iqw/p2zp8Bvzd1kSevx0N1fgUjw6lboPQVy4L6RB1v1b+D4zocULkvVb7BvWeriIhkRq9uq37uc5/jS1/6Eo2NjfzsZz/j7LPP5txzz92tN5oyZQpr1qxh3bp1OI7DQw89xMyZM7f73CVLljB16tTk46OOOoqnnnqKhQsXsnDhQiorK7n99tsVCkX6WN3GNfz7zltpba4nHo2w5LlHWbP8ZTSiMru0m1Z+8cofaIl230Vtibbxi1f/QLtpzXDN+lfCjvGHJX9na6T7vF3jcufyhdTF6ndx5O5xHMPxo2dhse0PwWN7mD7sED43+QzySd+Nk7pELT947hbuWfEw9737GDc8dwubY5vT9n4iIpK7enVL9bOf/SwjRoxg0aJFJBIJbrjhBmbMmLFbbxQIBFiwYAGXXnop0WiUWbNmceKJJwJw9dVXM3v2bObMmQPAhg0bqK7OnblNItmiduOalLJ3Fj/L2ANmgCcvAzXaOcskiLQ34roOocIyjBXIdJX6xdZoC53xrh5lXfEIzdGt5AdyZy5Gl9PF+pYPU8qbIk1U+2r69L2GBIZw9VGX8dqmN/F5vBxSM4VKbxWksefOti1e3fAmcTeRLHONy+NrnuULk87FcXKrd1hERNKr12Ntpk2bxrRp03b7DZ566qnkv6dPn84DDzyQ8pxPL1SzdOnSXr+miPSdvPzUno+ColIsjw8n3kZ7cx1eX4BQUQXYmQ1hbryDJYsW8sGylwGoHDaamad+EU+gOKP16g9hfz5e20viE4HBY3sI+3NryG+eJ4/hRUPY0LKpR3lJGtqAZWxqfEM4bXT38HXXNWnfAsGyLDpiXSnlHbFOUC++iIj0sZ0Gw4kTJ+50Vb533nlnh/9PRAaempHjKCqtpKWpDgDb9jB1zmlEO5p47C+/oKuje+ji6EkHMfXYs7B9mdvksHHTqmQohO5hsCuXvcikw+YO+gVzCu1ivnjgWfz+zTu7F/LC4gtTzqLILs6p/dq8rp+LppzDz1/+LW2xDizL4oyJc6kMVKbt59Cfi784jssRww9h0bqXepQfN2YmTiKHftEiItIvdhoMX3rpJYwx/OIXv2Do0KGcffbZeDwe7r33XjZt2rSzQ0VkACoqq+L4z/03zXUbScSiFFcMIa+wnBcf/t9kKARY886bjDvgcEqHZmaJftu22LL+g5Ty9e+/xaRpJwCe/q9UfzIWU0oO4PqZw2iOtlASKKLEW5rWYY3ZqspXzTVHfZOmSBMhX4gSTymW6dtVSTNpaGAo3z7iKzz4/uMkXIeTxx/LqPyROXUDQERE+sdOg+HHG8kvX76c73//+8nyz3/+85x++unprZmIZITtL6Rs2L7Jx67TRd125h62NtdRPmw8Bm+/byDtuobKYWNZ8dqiHuXDxu4LlicnLpotY1PqKac0VN5dsAfnbNsWtm2RSAzcLlZjIEQBocBHw2gH2e/eMh5GBcdw6UEXAwYce9Cdo2xftCtB3aZW4nGXqiFhCooC/f5ZKyK5pVdzDLu6uli9enVyFdD33nuPeDye1oqJSHawPXmMmjCFd15/rkd5KD/MY3/+KUNGTWDiITPx5pX1a70qho1j1KQDWfvOEgBKq4Yy/sAjcV2wLRcwuGaQ9xzuIcuCJqeRVze+wab2Wo4YNpUx4TH4TOqWDJIlHIvBPLHQZ6LY7VswiThWYRVRT+4sorQ90c44f79jMZ3tMaD7Js65/3EohaXZtwiYiAwevQqGX/va1zj77LOZMGECruuyatUqfvrTn6a7biKSBVwDkw87lub6TWxZvwrb9jB52tGseedNmus20Vy3iQ0rl3Pi+d/A8vbdnEPLAuNGMa6DxxdKmTdo+wo4/MTzOeCIE3Fdh/zCCrB9tNStZMlzj+I6CabMOIHSIePB8vVZvQaDFncrN734q+5FTIDFm5Zx4ZQzObxi2oDZQF0GD3+inc7n/0zX+68A4AmXUfqZK4gEt7/X8WBnWbB+TXMyFEL3KImXnlnNSWfsh6tuQxFJk14Fw+OPP55DDjmE119/HYCpU6dSWlqa1oqJSPbwBEs4+oz/ItLehDEOzz/0Vxq3bEj+/9ametq31hMu76NgaByaNn3Ay/+6m2hXB/sdPocx+x+RstiNsfzkFQ1JPm5vXMdjf/ll8vHj/7iNE879KsU1E7b7NpZl4Y84OI2dYFl4yvOI+e1BP1xrY/umZCj82L3vPMKBFfvhJ7VHImHFqIvW0RTZSjUVlFhlePpyA3nJbQ2rk6EQwGlrpOO1hfhnfglnEM0X7S3Lsuhoi6aUt7VEFApFJK169c3+73//u8fjxYsXA92BUURyg7F8BMJVxDrqaazdmPL/bc+Oh2268Q5aGj8k1tVBYVkVocJqDDu+4Ovcuol///3W5OPXn3kQr9fHmAOP2WGPlsdjs/rt11LKl7/6FLNOn4DjpB4T6ExQe98KTLy7O9IOeKj4zCSigcE9BNVs5+LSxWx36pprOTy18VkWvrfte+Dc/U7lyKrpkIMX7dK3LMsi0ZT6eRLd+A55bhTHyr2hk8bAiDGlvPTM6h7lBx8xsnskhbKhiKRJr4Lhn//85+S/4/E47733HtOmTVMwFMlBgYJS9p06s8fCL8PG7kt+0faHfbmJDl546I9sWvN+suy4s75C2fB9t3uBY1lQ9+HqlPIVixcxar/DwQ5u932MMfgDqReRgbx8uudm9Xwz27Zof7s2GQoB3KhDdM1W7H3LB/WQymHhIYR8eXTGt+2Rd/rEE8kjhPupn1NzoqlHKAS46+0H2b9iX4qskn6pbzoYy2Wr00xrrI3SQDFhuygnV3XNNGMMvopRKeV546aS8ARh4K6LtEdcx2XJKxtZv7qJOSdPZMmrG4hGExx21GhGjS1VKBSRtNrtYAiwcuVKfvWrX6WlQiKS3YzxsN/0kxgyeiJb1n1A+ZCRlA8bt8MN79saN/UIhQAvPPI35n3pKixPaDuvD8FQ6sITBUWlWLZ3hwsyuq5h9L6HsPyVp3AS3YtjWbbN5GmzcZzUo2zLIrE1dbhWoiVKwEoNkoNJsV3Cd2ZcygsbX+XDti2cMHYW5cEy2t1W8u0w5hMX458Mjx9zjEtXvIsi/7ZgaFkWEToxGEJW6pzQbGIsl8WNb/B/S+/uDiYeH5dO+yLjQuO325sq6WXKRhE+dB5tix8B4+KvGU/elBOIuH0X1L1uBLtlI25bPXZBKaZ4BHE7+3ojG2s7eOXZ7lWgG+ramTC5ipFjyxg9oRzHyeI/KhEZFPZoksi4ceNYvTr1jr6I5AbLG6Js2GQqRuy3y561WCSSUtbZ0YZxElg7GLFZPnQMhSXltDY3AGDbHg455lTMLj6ygoXVzP/i5Xy4egWuk2DYuMnkFdVs9y57wnEp2K+SyIetPcrzxpcSH+QXYMZAqV3OaaNPJkIXT657lltW/gHLsjh1n+OYUXM4frp7ZsuCpRT482mPdSSPL80rpiRQkszOCSvOW03L+ceKB4klYpy8zxxm1BxOcDvzFbNBc6KJ/1tyd3LwbNyJ89vFf+G6o75FiIIM1y73xO0QnoNPp3zSTHBimPwKImz/RtOe8ODgrHiC5hfvSZYVHHwivqlnkCB7FqayLIvazdv2i43HHJa/uYl1q5sYProEy6MebRFJr92eY2iMYfny5Xi9WnhAJNf1ZrhlYVkVtu3BdbdN8hu731Q8gYIdDovyBoo5/nOX0Vy3kUQ8SknFUALhXa9QaAwEwlWMPbD6o8dmp0OvrKp8SmeNouW1D7Fsi+LpwzAl2x+qOhi5ruHt5nd58P0nkmX3vPMI1QVVTApPAiDfKuCbh/8nf1z6D9a3fMi40lF8/oAzCZhtoW9j10Z+/+adycf3vvMohYEw08qmZuXQt5ZYa8qMyo54J+2JDkJeBcNMcIyNk6ZVSL2RRhpeurdHWfsbj1E+6SgS+UPT8p57whhDWUXqAl7DR5Vge231ZotI2u32UFLLsigtLWXBggVpq5SIDB6BggpOPP+/eemxv9PSWM/4Aw5j/xknYnaxcIknUET58KI9es/eXkDFLbBGF1M2svt94nZuLexgeyyeX/9qSvlrm5ewf8lkEgkXY6DSW803D72EqBuhoqiEzpZtId+2LZbWrkh5jXcbVrJP6RiiiTil/hK8bvbskVgSKMZj2TifGDNbFAhT6AsP5hHEuSseocf46I+YWBf03Q47faKiJsz4fav4YEUtAAWFAabNHK1QKCL9olfB8Nvf/jYHHHBAj7IXX3wxLRUSkcHGIlw+mhPO+wZuIo7tD+0yFPYnYwyxj0do5di1l3FhVPEI3mlY2aN8ZOGwlHmZXtePFz/5/hCdbBvuZoyhMlTW47kHVk+mJK+I7z79Y1zjMqJoKJcc8nkKyY7Faoo9JVwy9UJ+9+bfiCaihAMFfPXQL5BHKNeawF6zbSv7F2oqKMdbUkOieXOyyJNfhFWYffsken02c+ZNYNqRI4nHXYpLg3h8g3uVZBHJHjsNhitWrMAYwxVXXMHPfvaz5B2rRCLBddddl7KNhYjIjhgrgOULZLRHzu8CrVHcuIunKEAs4MnpO/Guazhy+DSe3/AqbdF2oHv+4EFV+/f652IMTC6fSGleMU1dWwGYVDGOO99amHzO+pYPeeD9f3H+xLOhDxcU2WPGYt/CSVw/89u0xzso8hcSIj+neov3ViDRilv7AfHGjfhrxmHKxmTlYi4AUStEyfyv0/bC34mufQv/0H0onHk+EU9hpqu2XZZtUVianT9LGfxs28Ky2O6ibTL47TQY3nnnnbzwwgvU1dXx//7f/9t2kNfLcccdl/bKiYj0Fb9jaH1mLZGN3YvNWF6bqtMmEcnP7fnSxVYp353xNTZ3bMGyLIaEanZ7AZZCq5grpv8/NrZvwnVd2uJtKc9ZUruCz07oIkjqSrSZYAwUUEiBrxBMznUW7xW/6aLtyduJrlueLAsffhqeKafiZOmWH5FgJXnH/hcFiS5cb5CIyZ5FZ0SygQU01Xfy2gtrcRIuU2eMpKK6oHsPKckZO70iuuGGGwC4+eab+frXv94vFRIRSQfTHEmGQgCTcGl+YT2Fx48lnqWxwLIsmt1GNrVvwW/7GFpQQ57p+8VRCihkfP7e9Z4UUMjEgu7XWN25KuX/jy8dTcAKKIENAlbL5h6hEKDt1Qcpn3AkTqA8Q7XatYTxkvBoHqnI9mxt6uLvd7yW/PtYu7KRMy88hPIaLciVS3YaDF966SWmT5/O5MmTtztsVBvci8hA4XTGU8riTZ3YroHsmfLYQ218Mze98CtiTnfdh4SruOzQL1NAdg6B+9jQ0FCOHDEtubBNYSDMmZPmYbmaKzUYGCf1bwnXATfR/5URkb3m8Vi8u2xLyk2TxS+u4+Sz9tcemjlkp8Hw4YcfZvr06Skb3EP3nWwFQxEZKLwlqXN28vcpJ+G1YAeLZ3hsC49rSFgWbn9PQPO43P/2o8lQCLCprZZVW9cwpXhK/9ZlNwUIcub4U5k98kiiTpSKvLK09HT2Bdd22JrYiseyKfIU9+kcSI+ne4uBrF+cZTdZRTV48otwOlqSZcHRU3DzynZylIhkK2O6Fz76NJ8/S++aStrsNBj+4Ac/ANhuMBQRGUicsI+yOWNofm4dbswhNLaE0AFVRHdw0R6Mu3S8VUvX+hbyRpUQmlxBdDtfnOmSMAk2tdellDd2NWOVWFm/aI7X+KjyVYOPrB2610Eb/3j7fl7f/Ba2ZXPC2KM5fuTR+M3e7WWZsGKs7VjPyxtfp7qggkNqplBql6UsbmNsl1anBde4FHmLsXvbo2obIqYTr+XF6/bdRvC9FfUWUnrGVXQsfojYpvfJ2+cwgpOPIZJFm8WLSO+5rmHCftUsfnEd7seLzlgw9YhR6i3MMb1adeHzn/98j8eWZZGXl8f48eP5z//8TwoKsvNOsIjIxxzAHlFIxVmTwTU4fg/RHYQrv4HGRz8g3hwBoG3pFqKbWimau0+/zUf0E2DWiMO5552He5SPL9WeZn3Bti1e+fANXt/8FgCucXl05VOMLx3FhIKJe/y6lmXxVtPb/P7NO5Nl/179LN+dcRmF1rbtOqJ08tjqp3h8zXMYY5g6ZApnTTyFfMI7ff0O2nh05ZM8t/5VyvNKuGDKGYzKGw39vOhLJFiF/6gvkufGSHiCRHTtKDKghYsDnPflaby/og7HcZkwuUqr4+agXt3+Hjt2LD6fjwsuuIALL7yQcDhMKBQiEolw3XXXpbmKIpJNLAv8Dvg7E/idgbVgmesaoh6LqM8msbNw1R5LhsKPxeo7sTpiaa7hNq5rOKzmEE4cdzQe20OBP5+LDzmPIcGh/VaHwcyxEry66c2U8ncaPsC297xRR62ulDDfEetkQ9umHmWr2tby79XPJkP+4k1LWVy7ZKfvbdmGR1c/ydNrXyThJtjSUc9PX/ot9YnUnuX+4BibmBXEVSgc0GKRBJvXt7Bp3VaiXYkB9ZkufccYKCgOMvXIkRw2a7RCYY7qVY/hsmXL+Mc//oHX2/30WbNm8bnPfY6f//znzJs3L60VFJHsYVkW/q0RGv61EqcrgSfPS/kJ40mUBPFGE+Aa3KCXeD/3aHkAT0ccE0lghwPEAvZe7UlnebZ/z2xH5ekSooBTRs1lzoiZeCybIPnqLewjtvGwT+kYNrT0DGwji4bv5ZxAg2NSk5LLtjKPx2Z53Xspz3n1wzeZNWQGO7pn22k6eXbdyz3fzRi2tNdRUVS1F3WWXNXVEeeuOxbT+dFNr2Cej3O+NJW8An+/18W2IdKZIJFwycv3K6BmyGCbEy27p1fBsK2trcfFiOu6dHZ2AmDbmpgqkiv8cZf6Rz7AjTkAOF0J2lfU4S8NUffaRoxjyBtTQuH04US9/fOt7jUQe6uOxjc3A937E1bOn0CsyL/H4dAJecnfp4yO9xuTZQWTK3GCXvp7wpxxuwNi9157+sLuK8aF2aOO5M0ty2nq2gp0D9Pdp2TsXr1ukBCfmXACf1r2z2RZwBtgeMG2nl7XdRlTMoJF617CY3uYUjWJPF+Q8rwybOPB3cHv2Wt5Kc0rpr6zqUd5yKc7+7L7bNvi/bdrk6EQINIV5+0lm5k2c1S/BgRjDO+/Vc/Tj71HIu4yfFQJx5+6L/683N5nVqS/9eov7phjjuGiiy7itNNOwxjDAw88wNFHH80DDzxAeXn27lkkIn3L7YwnQ+HHghX5NL6wPvm4a3Uz/pI8PAdU9suFhd0eo/WjUAjd+xM2PrGa0s9MJLaH2TQB5E8bRmhsKbH6DvyVBVCal7X7HcqeKbZKufqIy9jSWYfX9lIZrNjrhWdc13BwxYEUTC3gmXUvUp1fyayR0ynxlCZvVBgDk0r34fChBzG+Ygwvrl/MprZaxo0bRcR04Wf7dfCbAJ+fciY/f+n25E2C8aWjGRKq2as6S26ybYuG2vaU8votbXg8Nq7rbOeo9Ghp7OLxB99JPt6wtpmXF61m1kkTNEpCpB/1KhheccUV3HXXXTz55JN4vV5OPfVUTj/9dF588UVuuummdNdRRLKEHfSCvW17B0/IR7w1mvK8jg8aKd2vgv6Yked2pu6dlmiLYsVd2IultmMeoDKEpzqfuIbWDFpBk9+9eAv0WWewzwSYXDiZAw7aD4yF47gpvdf5hDl27ExufPaXyZD3f0vuwXOQh6mlU7d7MWwMjA6N5tpZ32Bzey0hX4hhoSEECfVNxSWnJBIuk6bU8P7btT3K9zt4KPF4/4VCgObGzpSy91fUMWPOODz9uBq0SK7rVTC0bZvTTz+dk046Kfll1dLSwowZM9JaORHJLvGAh7LZo2l8cjUYcGMJ/BX5Kc8LVBXg2DveH7AveQpT58L4qwpwAx72aqLhRzTfQvaUkzDsKG1aFnzQuCZlePAjHzzFlMP3x2u2P8fLMjYVnirNKZQ+UT00zOy5E3j+yVUYYzjimLEMGVHU7/UoKEzddqWqJqxQKNLPehUM77zzTm666Sbi8e6Nlo0xWJbFO++8s4sjRWQwcY3BHhqm6uz9cDvi2Pk+8NoEhhYS/bAVADvPS/iQGiL9FKjieV7Kjx9H49NrMHEHX2mQ0mNGE9HwI8lixmx/bmDYX4CHXu5nKLKXbI/NpANrGDepEgCvf+8W7tpTpRX5TJhcxXsf9V76Ax6Ombvn28aIyJ7pVTD8wx/+wJ133snkyZPTXR8RyXIuEA14ILDt4rVozmhojWESLnZxgIin/5aTcwEzJJ/KsyZj4i4EPUS0mp0MAONLxhD259MW6wDAwuL0SXOxervRvUgfcF2T7JnL1P00j9fm6LkTOHj6CGIxh+LSPAJ53ozVRyRX9SoYlpeXKxSKSA+WZeF3DDgGx2+TKOr/5c0/Zgzdq6B6dUEtA0eRVcJ3Zvw3HzSvoiPexYTSsVT7q/t74VuRrGB7LIrLt82XVSgU6X+9CoZHHnkkf/vb35gzZw6BwLZx4MXFxemql4hkMQ9g13bQ8MwanK4EobElFB4+nEg/bVEhuc22LYwxg+LCscgqYWrpVCzrowvhQXBOIiIyMPUqGN5+++3EYjGuv/76ZJnmGIrkLm9HgtpHP0g+7lzVjOXzEJw+DEeLtUiauFaCDyObWFr7NiXBIiZXTKTYKs10tfrEYAi5IiIysPUqGC5btizd9RCRAcRpiaSUdbzfSMGhQ3G0iNygFnfi4DHg9G/vsGXBB+0r+eUrdyTLCvz5XD3jMgqt4n6ti4iIyGDUq2Doui5/+MMfePbZZ0kkEsyYMYOvfOUreL29OlxEBhkrmPq37ysOYjIcCq2Psop6X/qesVw2RDbwm2efIObEOWncbMYWjMZjfP3y/nErxt1vP9SjrD3WwdrW9RxQVNwvdZDc8PFU5USatvKzLOjqiNO2NUJevp+CQv+2Dy8RkQzqVbL72c9+xrvvvsuFF16I67r84x//4Ec/+hFXX311uusnIlnIKg4SHFlEZF1Ld4FtUTprFKlb3fdTfSzwdznEt7RjHENgSJhYyKOA2Ic2RTfxoxf+J/n4/cbVfP3wLzMuNL5f3t/FJerEUspjTrxf3l+6BeJbMY3rME4cT9lwonnVyf2NBzoPCbzNq2l//WEACg6eS6J0LE7vLpV6xbKgfnM79/75TRzHBWDGnLHsP3WYsqGIZFyvPu2ee+45/vnPf+Lzdd8ZPvrooznllFPSWjERyV4xG8KzRlHYEsWNOXiKAsSCnowtnBHocqi9d0X3dhUAtkXV6fsSzdeohr7g8Vi8tunNlPJ/rVrEPgeOx01Tz8onBUwe88Yfy5+W3ZMs89peRheNSP+bCwDBWCNN/7wJp60BAMvrp/ys7xEpGJ7hmvUN79a1NNz9w+TjyOqllJ/5XZyScX32HomYyyP3vJUMhQAvPLmK0ePKCZcE++x9RET2RK8GfhljkqEQwO/393gsIrknbkGsOECiMkQ0kLneOdu26FrdvC0UAriG9mVb8PThfooe28JnWVg5eFvfGMjzpl60hrZTlr46GA4qP4CLDz6PUcXDmDrkAK468lLKvRX9VodcZlmQ+HBFMhQCmESM9lcX4rXdnRw5MHi9Np1vPZVS3vnWk3i9fTdGPhZN0NGe2vPd0ZFaJiLS33p1O33ixIn88Ic/5Pzzz8eyLP7yl7+wzz77pLtuIiK7ZFkWTmfqcEKnM46Fxd52Y1qWRaAzQduSzcSbuiiYXIlvRBGxHFpkx3UNB9ccwKMrnybuJoDun8vxY4/ul97Cj/kJcmDJFKYcuj8WFsaxNFy4n1iWRaK1IaU80bwZy00AmdvHtC8Y090D+mmW19+nbSwY8lFWkU9jfce297CgsEi9hSKSeb26tLn22mtpbW3lnHPO4ayzzqKxsZFzzz033XUTEdklx3EJjU/dsiB8QDUJZ+97MvxRh9r7VtDxfiOxhk6aFq0l+m4Dtp1bPYeV3iq+e9TX+Ozkkzlln+P47pFfY2hgaL/XwxjAsTH9vCrqxywLvF5Pzv3+XdcQGLFfSnn+lGNJWIHtHDGwOI5LaL9jwPrEZZFlE9p/do9hn3vLsi1OPnN/ikvzAAgEvZxy9hRC4YEdrEVkcLDMHs4aP/jgg3njjTf6uj5p1djYjpuje6xVVISpr2/LdDUkyw3UduIB7IYuWl7diHEMRYcOhap8En1w7e7d0kHDv1b2KLO8NpXn7k80h3oNP1ZREc7Zz9IuOni76V1e27SEiWXjmFozhTDFma5Wv/GaGNampbQs+ituNEJ46sn49j2GmKcg5bkD8bPEsgyB1g1EVr4KxhAcfxjRwuEY0/c3AVzH0NURwx/wEsjz5uTfEwzMdiL9S22kb9m2RVlZ6mf2x/Z4ZYbBsgqZiAx8DuCU51F0cvcQ9wSmz4Z/WZ7U9Gf14ZyjgSgXL2KN7fLAB4/x7LpXAFhe9x4vbFzMt6ZdQtCEMly7/pGw/FjDplF87mQs4xD3hokN/OmFScZYRMIjsA8ZCUDENWlbUMv2WOQXdve05uLfk4hkpz2+usnFBRhEJLvFjSFu+i4UAtglQbyfGuZVcsQIYn24sI1kv5bEVp5b92qPss1ttdR21WWoRplhjCFmhYjaYdxBFAo/yXWNwlqOsCxw4i7GNdouRIS96DEUEckFUa9F2fwJxDe1kWiJEhxehFsc0KiJHLOjm6HdCxxJJlkW+OMtmLZ67EA+8VAlDp5MV0uyXDzq8MZL61n62kbCRQGOnTeJiiHhTFdLJKN2GgwPOuig7X4ZGmOIRCJpq5SISDaJ+mysUUV4LYuYehJyUpGniFkjD+eZdS8ly4aGq6nMq8jY/p3SLdC2gcZ7f4QbaQcsCo84A+/k40lYWtClP9i2hXENWNaAuWFm2xZvvrKeN15eD8DWpi7u+fMbXPCVwyn8aD9J9RpLLtppMHzooYf6qx4iIkm2ZeHriOM0d2H5PdileUQzPHTTGM2tzmmuzbxxJzCubDSLNy1lQtlYDqraP2fmF2Yrv4mw9d+3fxQKAQytL95D+Yj9SBSOymTVBj3Lgo62GG+8tJ7aTa3sd9BQxk4sx+vP/t7aeMxh2eIPe5RVDymkvTXC8092LzZ26IyRlFUWoEEBkkt2GgyHDu3/pchFpO/ZFvi6HNyOGHa+n3ieh2y+GeptjlD7wLvJnhhfWYjSk8ZlJBzadvddcGVCyTMhDi45kEPLD8ZxjG4UZAE73km8YUNKudvWCAqGaRXtSvCPPywm0tW9j+xTm9+lqXE4R8wem/V/G7ZtU1QcpKHuo/0kLdjvoKHc99clyeeseb+Bsy+aSmllfmYqKZIBub20nkgOsC0La2MbtXctp/6h96n9x3KsDW3YWTrT3o9F8/PregzPizd24jZ19Ws9bAsCbXGc5fWwciuBqKvFCQRjIJFws/7CN1c4/nz8laNTyu3C8gzUJrc0N3QmQ+HHlr62keinyrKRZcPskyclP9OrhxSyYU1TyvOWvLoBb46vQi25RYvPiAxyvqhD3dNregStxqfXUHX2fkT92feFZ7kGpz2WUu5GnX6th7c5Su3Cd5OPbb+HitP3JRrIvp+ZSK6KE6Do+C/TdP9PcNqbwfZQPPNcCFcQiDaAL0TME1KPfxrY29nKx+OxBsyq9eXVBZz/lcNpauigsCjIiiWbUp7j93vVdiSnKBiKDHImmsA4n/pmcw0mkgB/9i3OEPdahPerouX1nl/S3tI8+isaem2Lllc29ihzYw7xzW1Yo4t0oSCSRSKhIZScfQN0NEIghAdD0/0/Jl63Fk9hOaUnfoVoyTj93fax0vIQZZX5NH48HBOYMWccgTzvgFi4xRhDQVGAgqLu/ST3P2QYy97Y1L2QDmDZFgccOgzHGaT7sohsh4KhyCBn5fmw/R7c2LZYZfs9WCFfBmu1Y65rCEwqp9AY2t6qw5vvo2TmSOKh/vu4sgyYeGoMdeOO1iEQyUJRTwEUFhAwXTTecz2J5s0AOK0NNNz7Y8rPv4mIvyzDtRxcPD6b0z53IBvXNtNQ186oseWUVxcMiFC4PeGSIOddPI0P3q7FAPvsW0VhaVA3FCSnKBiKDHIxn03F3H1o+PdKnM44npCP8uPHEfPZbO8bL+AY3K0RsCzsoiDRDCwwF/NYeA+oonJyJcaG1IGl6ZXAUHjwEBoeX7Wt0ILAkEKiukjIKAPUt0bZ0thBOORnSFmIgOYAycc6m5Kh8GMmEcNtrYNyBcO+5g96GTupgnH7VqY1EFpAV0ccj88mEExfj2S4OMjUo0YB3TcpFQol1ygYigxyxhhixX7KzpgEEQeCHmKe7e83FW3ooOG+d3E6uqOYtzBA2bwJRH3930/mGkM0Q9f7xoBVU0D58WNpfXMLnjwvhVOHEC/wbTdMS/+wLIt31m/lp397PflrmL5/DZ8/cQKB7cx3khzkD2H5gph4z72WraA2Lk+XdG/lE4skeOrhd1nzQSOBoJfZJ09k5LjStM1lHKg9niJ9Qd+kIjnAGIjZFrGQl5htbTfb2LZF69t1yVAIkGiNEl3bPGAWE+gNvwF/Swxfc4TAp+defkLcAmdIAUXzxpM/ZzTRsB9XoTCjOmMOty98q0f7femtzWxu7MxcpSSrxPwllBx3UY+y8LRTcPIrM1Qj2RsW8NLTq1nzQSMA0UiCR/+5nNbmyM4PFJE9ktYew/b2ds455xxuu+02hg0bxosvvshNN91ENBrlpJNO4utf/3qP5zc2NnLRRds+0Nva2mhububNN99k1apVXHPNNbS3txMMBrnuuuuYNGlSOqsvklNs26Jzc1tKeayug9CkchKJgR+K/AlDy9NriG7qPk9PyEfFKROJ7GClUWMgPsjD4EDapzGWcGnZzoq1HQNgeXzpH8aAO+wQKs77IU5rHXZ+MU54CAkr+xbakl1LxF3eW16bUr61sZOi0rwM1EhkcEtbj+HSpUs599xzWbt2LQCRSISrrrqKW2+9lUceeYTly5ezaNGiHseUlZWxcOFCFi5cyH333cfQoUO5/vrrAfjud7/Ll7/8ZRYuXMjXvvY1rrjiinRVXSQnOY5L4aSKlPLQ2FISicGxKptT25EMhQBOZ5z2ZVvw2IOnR7S3Yo7hvQ9bueuZVby0oo62SCLTVdqlcJ6XKeN67k9n2xZVpaEM1UiykYOHSP4Q4jUHEi0cpVC4C5YFTtylrTlCLJLIqv1aPR6biuqClPJQgX6nIumQtmB41113ce2111JZ2T18Y9myZYwcOZLhw4fj9XqZP38+jz322A6P/+c//0leXh7z588H4Mwzz+Soo44CYMKECWzevHmHx4rI7jMGQmNKCR9Y3T1+x7YoOmQIVmV+pqvWJ2zbIr6dIYfRze3YOTanxLItnn9rMz/682IeeXEtty9czk//9gZd8ey+AWADXzh5Xw6Z2P29UlGcx3c+P5WKwkBmKyYygLU1R/nb717lL799hf/7n5dYv7Ipe1ZftmHOyRN7bDI/blIlpeWD43tJJNukbSjpjTfe2ONxXV0dFRXbeiMqKyuprU0dHgDgOA633XYbt956a7Ls9NNPT/77l7/8Jccee+xu16msLPWuUy6pqNDke9m1qmPGUHrwELAsfEVBrEHUm9Y+IkLrmz1vKhVMKKeovGBQzaPclc0NHdz95Ac9yjbUtVO3tYup+1bv8vhMfpZUAFdeeChNLRFCQS/F4WDG6iI7p++c7NfeFuHOu1+lvTUKdA/dfOiet/jy146iZlhRv9RhV+2koiLMl79xFA117QSDPiprwuQX6GZQLtFnSf/pt1VJXdftceFljNnhhdhzzz3HqFGjmDBhQo9yYww//vGPWbp0KX/60592uw6Nje05u9pURUWY+vrU+WMin1RREaahadtmxTS2Z64yaeArDFA0dSgtb2wC1xAaW4J/bAkNDQPzPC0LIgkXxzXk+729XhmwM5Ignkjdp7Ermtjl50S2fJb4gHgkTn1E8wt7y2clsBMREt4Qjknv2nPZ0k5k5zrbY2xt7OpZaKChrh3vDuZe96VetxMbyj8aUtrZFaOzq783MZJM0WdJ37Jta6cdZf0WDKurq6mvr08+rq+vTw4z/bQnnniCuXPn9ihLJBJcccUV1NbW8qc//YlwWHcPRGT3xG3w7ldO1fhSMAYn6CU6EFZd2Q7HGN5e08z/PfIOHV1x5h4xmmOnDiPk3/XGk4V5XuYcOpzHX92QLCvI8zG0YveGZ9m2lbM32wYSy4JA+0Zan/0rsdo1hMYdSmjaadrwXQgEvRSEA7S3RXuUF2h4tkhO6rftKqZMmcKaNWtYt24djuPw0EMPMXPmzO0+d8mSJUydOrVH2Y9+9CPa29u54447FApFZI85BqJ+m2jAQ2KAhkKADxu7uOUfS2huixJLuNz/7CpeensLdm+G/ho45cgxXHDSREZUhzn64GFcc9FhFAZ7d6+wK+bw9vqtPPDSOt7ZsJVIls9NzHX+WDMN9/yQ6IZ3MLEIHSueo/Xx2/GhXpdc5/XZnPzZ/fH6ProctODoE/chv1CLu4jkon7rMQwEAixYsIBLL72UaDTKrFmzOPHEEwG4+uqrmT17NnPmzAFgw4YNVFdvm+fS1NTEX//6V4YNG8aZZ56ZLF+4cGF/VV9EJGtYlsX765tTyp94bQMzpwzB14twmO/3MOegocyaMgTbAgy92rKioyvOnU9+wPNLNyXLjps2grNnj9PGuFnKtGzBRHsuvBT98D3CXU2Qt+s5pTJ4GQNl1flc+NXptG6NEMr3EworFIrkqrQHw6eeeir57+nTp/PAAw+kPOfTC9UsXbq0x+PS0lJWrFiRngqKiAwwxhhKtjPUq7o0hHc3FgtyXdMd5naj43RjXVuPUAjw+KvrOe7Q4ZSHNfwsG1m+1AV6LI8PPAoA0h0O/UFvcg6fiOQu3eAVEckyBmhoi/LOxha2bI3gbGce3z7Diqkp2zYn0OuxOXPO+LQvMx/bwZ6W8UGy1+Vg5BbWkLfPYT3Kio46h3igdKfHBeLN+Grfwl//NoFESzqrKCIiWaDfhpKKiOSqj+f99WahFsuCpaua+OXdS5JDO885bh+OPXgo9idWcg4HvVx14VTW17YTSzgMqyigPOzv1XDQvTG0PJ+a8hCbG7YNTRwzpJDyIm0bka3iVpDQURcQmjwLt70JT0kNTtFwnJ20lWCklsZ7bsTtbAXAU1hO6WeuJBIo76dai4hIf1MwFBFJFws2NXXx6oot2JbFtH2rqS4J7nToZmtXgt/e/1aPgPf3x9/noPEVKRu55/s9TBq+ba+x/lhLp7Qoj29/7hAeeXkdb61s4JCJlRx36PBezWuU3rMs8CfaoKMRAgXEg2W4Zs9/xjFPAVTsCxWQ2MVzPR6LyNuLkqEQwGltILbmDaxJJ/R6WxQRERlYFAxFRNLkw8ZOrv3dy3zcUfjg82u4/uLDqSnO2+ExHZEEkVjqHoMtHbGUYJgpxSEfn5szjvjRY/F7rH4JpLkm0LaBpoU/xeloAY+XktkXYo2ejtMPX9sWEKtdlVIer1uLf7KFs7OuRhERGbA0x1BEcoLPsghEHQJxt3dbOuwlr9fmX6+s55OjRx3X8NzSTXg8O37/4gI/FZ8Kjn6vTUVxlg3VNOCzFQrTwW+6aH7kf7pDIYCToPnxP+DrqO2X93dcQ2hy6nZSeeOn4TiaSyoiMlgpGIrIoBdIGDqeW0/t35dT+/flOG/X40tzoDEGovHUnr9ozIGdLBET9Np849yDGfLRwjIl4QCXXzCVopAvXVWVLGNF20hs3ZJS7rQ19sv7GwP2sCmEp80H24vl9VN05FmYqn365f1FRCQzNJRURAY1y4LIB010rmrqLnANLa9+SEVlPpTteEjn3nIclxMOG8lrK3r28sw6aOgue12qigJc86VptHXGCAW8hPwe9czlEOPPx1tYQaK1vke5p6CUeD/VIeYpwD74dMonzwHLIu4vIt5HnYU+K4HlREl48unFekwiItJPFAxFZFDzGtj6QWpPS2xTO56KUK9WCv2kxvYYzW1RSsMBSgr8O90eYlRlPlddeCgPvbAGj20x/8jRDCsL9ep9/LZFWUH3nEKFwtwS9+RTctIlNNz3E0ysCyybopnnEi+o6td6uK5F1Ff80YOdP9dLDE9bLcaJYRVWAeGU51iWRaBtHa3P3Um88UPy9z2KwAHHEfUW93XVRURkDygYisig5toWgeoC4s1dPcq9pcHt7g+4Qxa88UEjt/5zKa7p3oLiq2ccwMHjynYY3GzLYlxNmK+fNQWL3m1XMRh5vTaua3L2/HeXMRAtHkvZeTdh2huwg2HieeU4eDJdte3yO+10vvBXut59CQBvYQWBs74Dds99EgOROhru+gEmEQOgbfHDOJ2tBI76IgmjmS0iIpmmT2IRGdQc11AwpRrPJ+boBWoK8FYX7NbrbO2Ic9t9y5JD31zXcNt9b7G1Y9eD+0yOhqKuuMvrKxu45e6lPPbaBlq6+msg5MBnjCHqKyZWMo5IXlXWhULrE3tqUr8qGQoBEq31tLyyEI/Vs5vRaf4wGQo/1vnOC3hjLWmtq8hAZlxDe0uUaFei59+dSBqox1BEBr1IwKb89Em4LVEsjw1hP9HdvC3W2hEj8all+uMJl9bOmBaG2R7L4pGX1/LwC2sBeOO9ep5+fQPf+8I0Qv7sCjnSe4FEC+6W90m01BKoGY9bMpp448aU53Wte5viw6M41rZ5vJY3dWVdO5CHsXUpIrI90c4ED921lLot7Xg8NrNOGM8++1Vhad9YSRN9GotIToh6LCjd8y0fSgoD5AW8dEW3bQ+eF/BSHM6OvQWzTUtnnEdfWtejrLapi81NnYytTp1/lq08HhvLgkRC2zT4nXZaHrmF+JY1ybLi2RfiH5K6Wmlo3MEkPMGecxNLhuOvGUds88ptxx99AXFfIVqFRqQnC3j23+9Tt6Ud6F7Q7KlH3qNqaCHFvZyrLrK7NJRURKQXCoNevvm5gwl/1DtYmO/nW587mMJg3/QWWha0RRJs2dpFZDDvFTeArv83NXfxv4+9y633L2d1bTturq8CtPXDHqEQoOW5f2Dnl1Jw8El8vA2Lv3oMRYeejOv27NWIefIpPOm/KTvlaxTPvpDys6/BjJiak8OsRXYlEXdZ/X5DSnlLUyQDtZFcoR5DEZFeMAbGVof54VeOoK0zRmHIT37Ai+mDsGAwvLmyidsXLicacygvDvLNcw+hqmjg9kYWhXyceNhIHnlpbbKsoiSPmvKBcad7y9YI1/zu5WRoeXn5Fq668FDG1Qyc3s6+9un5gQAmHsUA3qmfpWLy0Rgnjikox19eAfVtKc+Peguh+kAAUnf5FJGPebw21cMK2bS+5xzcgkJ/hmokuUA9hiIivWSMId/vobo476O9Bfump6OhLcav71lKNNZ9qdywNcKv71lCzBnAPSnGcPIRI/mvMw5gyvhyzpoznu98fiohX/bPL7Rti8Xv1qX0ZD3w3OqcXvzBUzIEy99z78/QvkeSCBTj4CGSV0W0YBgx9nzItoh8xII5J08iENzWhzNl6jBKNIxU0kg9hiIiGdawtStly4sP6ztoj8QpzR+4d4fzfB4O3aecwydV4brugB8yaFl0j5Yc2Kexx6KBMsrP+i7tL99HvH4doX2Pwj9pFlGT/WFfZCAKFwe44JLDaWnuIhDwUlAUxFKXjqSRgqGISIZtbwGb0sIgocDA/4g2BhKJgTVo0HUNUydWsvDZVT32ujzlqDGYAR5u94YxEAkNJXjsJYTcOHErSHQA/Th8loPlxkh4QgP+JoXkBmPAF/BQvpvbK4nsqYF/1SEiMsBVFgY557h9+Pvj7wMQ8Hn4f5+dQp7PTulJlP5RXRzk+i8fzqI3P6QzmmD2IcMYUaGLM4CE6wE8PXpOA04bpmUzlmVjimqA7JmLaVkQaF1H64t3k2jeQsH+xxCYcFT3fEcREUlSMBQRyTCPbXHswUM5cHwFbZ0xyovyKA55FQozrKYkj/OO20fbVexCMFpP0/0/xmmpB8BXOZrQGd8EsiNIB7pqabjrBxgnDkDLC3cTjnZiT/1sysqpIiK5TCOVRUSygG1ZVBYGGFsdpihPoTBbOI6rULgTtg2RFYuSoRAgXreGzlVvki3r9DhNHyZD4cfa3vwXvnjqqqkiA41tW1nztyYDn4KhiGQ1j8fC69VHlcjOeEkQ6NyMv2U1Abe9397XYxliG99JKY9u+gDbzo6/W8ubuoCTHQiBpUVzZOAyrqFhSzuvPbuWVe80EIskMl0lGQQ0lFREslYw6tL5XgOx+g7yJ1Zg1xQQz45rTZE+4bFcvIlOXE+AOL49eg2f20XszQdpfv2R7tcMl1H2mW/TFazuy6puV8K1CU6YTnTzqh7leWMPJuJkR0+rVToCb+lQEk0fJsuKj/k8MU8B6pqXgci2Ld5/u47HH9x2U6a0PMQZnz8Yr183PGTPKRiKSFYKxA1197+D+9Fd0MjGVooPG4a9b7lWFJRBIRhroOOV+2hZ9Qb+mnEUHnUu0fwhu51V7K0baP8oFAI4bY20Pvd38o7/fyRMer/mjTH4xxxKqHYNne+8AJZNwUHHkzdyMpFIWt+616LeQopP/RZu7Uqc9iZ81eNJFA/vs31IPy2QaMU0rMHpasVbPoJEeCiOLrekD8WiDov+/UGPsqaGTprqO6kcmj0LP8nAo08qEclKTnNXMhR+rOX1TVSOLyOqG6IywPlNlJZHbyVWuxqA6Lq3aKxbQ+m5NxL1Fu3Wazmt9Sll0Y3vUJDoIuFJ/0Vi1FtEYOYXCR16KlgWiWAZ3nARRLJnDl/UVwLDDsWySOsWG36njdZHbiG2ZXWyrGz+ZbhDDk5bEJXcY1xDIp66DZCTJb30MnBpUJaIZCVre7PpLcDSxVU62bZF1DHEXaMFDdLI6mxIhsKPuV3tmJYtu/1anqLKlLLAiMk43rweZV6vjW2n55eaMF6iwUqigQock72XFmnPZs0beoRCgK1P/S9+p//mfcrg5w96OHj6iJ5lAS+lFfkZqpEMFuoxFJGsZJcE8YR8OJ3bVhMsnjaMmMfqsX+a9J1owuW19+q575mV+H0ePnfCBPYdXownTWEip3kDYHvA7XnX3/IHd/ulnKLhhKedQturDwIGb1ElhTPOpuujYaQ+pwO2vEvXB6/grxxFcOw0IoHyvjgL+RQTSx0/63S2gRvXrXjpM8bAQYePoLAoj7de30h5VZhpR40iqG2OZC8pGIpIVop6LcpPnUh0TTOxhi7yx5dCeYj4IP/Ssyxo7oizdksbjmsYVR2mPBxI+zA0y4Lla5q448G3k2U33/km3/viNEZXZcd+dINJPK+Uohln0vLc35NloUlH4oRrdvu1EnYQz4GnUjHhCNx4BAoq6LK7ew5sCxLvPk3rC/cA0PX+q3iWPknJmdfs9pBV2TVPyVCwveBuGwafv98sEv5C0Cg/6UNen83EKdVMOKAK27ZwXaNQKHtNwVBEslbUb2NPKidkW8RzZC+5xvYY1/3+Fdq7untKAz4P1/3H4VQVBdL6vgZ47JV1KeWvv1fH2JqwFvzpY65r4514DOXV40hs3YwnXA4lI4iRurVCbzh4cPKqoefoUXzxrTS+vLDnc9saMc0boULBsK9FQ5VUnHkVLc/8hURLLfmTZxGYcgJRV92F0vc+vmGoz2fpKwqGIpLVXNfkzJeebVssfrcuGQoBonGHf72yli+cNBHXSd/PwbIsqkpCrNrY0qO8rCiou9BpkrACJErGQck4UpeR6CMGzHbGXhuTGzda+psxFpGiMRSceiW2GyPuKUjrYjciIn1Jt7BERLKEZVnUNXellNc2daY9nBnXcPKM0fi8274WCvP9TBlXrtUUB7C4v4jw1JN7lHnyi7BLh2eoRrkhjp+oXUCO3NMSkUFCPYYiIlnCcVwO36+apxZv6FF+/GEjMf1whTmkJMiNX5nO2k1t+Lw2I6vDFIf2bNN1yQ6usfDtdxwlJTV0vf0svpqxBCceRcRbnOmqiYhIllEwFBHJIqMqC/jvsw7kzsffI5FwOf2YcUwaUdwv720MlBcEKN8nvfMZpX/FPQVYIw8nb8wRuK4hom4sERHZDgVDEZEs4rUtDhpbyr6jDscYQ9Dr0VBO2WvGQCJHFnASEZE9o2AoIpJljAG/bQGWQqGIiIj0Cy0+IyIiIjIAWFb36sUiIumgHkMR2SHb7u6xUqeViEhmBWMNxDeuwO3YSmDEfiSKRuLgyXS1RGQQUTAUkRQewLM1SnRjK57CAP6aMFGf7lKLiGRCMNZI090/wOnY2l3w0r2UnfoN3OoDdONORPqMgqGI9GBZFmxope7J1ckyb2GAsvkTiHoVDiU7GCCWcAn6tDiPDH5O/dptofAjLc/eSdFn9yFmBTNTKREZdBQMRaQHv2uof3F9j7JEaxS3OQIVeRmqlcg2De0x7nryfd5fv5VDJ1Uxb8ZoivL0dSaDl0lEU8tiXWAc0P06Eekj+iYVkZ4MmHjqsvbG0VL3A41lQVfMxbIZNNtedMQcfvDHV2ntiAHw5OINrK9t41vnHoRPi3JIL1kW+BNt0NkMwQJi/tKsHpLprRgFthfcRLIsfOg8Et4C0L6Ufca2LSyre2VoVz9XyUEKhiLSQ9xjUXhQDS2vfZgss7w2npI8Ejs5TrJLV9zhuWWbWfjsaoJ+D+efOJEDxpTisQZ2eKpt6kqGwo99sGErze0xKgsDGaqVDCSWBYGWtTQ9eDNORwuWL0jJCRfjDD0Q12TnYu3R/Boqzvouba/ch9PWSP6Bx+MZeQgxhZc+E4s4vP92Lavfq2fcpErGT6rEF9TiPpJbFAxFpAfXGAITyijN89L+dh3e4jzCB9cQC3rI6lvqkmRZsGRlI39//H0AuqIJfnX3Ur73xWmMrirIcO32TsCfeuHusS383uy8oJfs43M6aHr4lzgdLQCYeISmh39NxQU3EQlWZbh222eMRaRwFHknXIblJkhYfhx9HPcZ4xgeuectNm/sbhMfrt/Kmg8amHvmft3z7kVyhL5JRSRFzGNhxpRQNH8CoZkjiIa8g2IYYq5wgcdfXZ9SvuSD+gG/B1plcR7T96vuUXbG7PEU5/syVCMZaKyuFpy2pp6FxsVpbcxMhXZDwrWJ49c9uj7W2hJJhsKPrV/dRHtL6txOkcFMPYYisl3GGOLQvfyjDCi2ZVFdFmLt5tYe5ZUloQEf8H22xQUnTGDmQUOpbepiWGUBw8tDaqfSe8EC7LwC3K72TxRa2AXFmaqRZNiOegXVWyi5Rj2GIiKDjHENpxw1psfwyrLCIPuNye4FNnor6PMwYWgRM/evZkxVAT6Pvsqk92LeIkpP+iqW199dYNkUz/48iVBlZismGRMuCjBqXFmPsvH7VpKvecuSY9RjKCIyCNUU5/HDrxzB+rp2fB6bEVUFhIP6yBcxxhCrmEj5eTfhtjdihwqJ51XgoIVGcpVlWxw7fxIb1jSzfnUjI8eWMXx0CeowlFyjqwQRkUHIGENpgZ/SgtJMV0Uk6xhjEQmUQaBs10+WnOALeBg7qZzxkytxXXdQjK4Q2V0KhiIiIiKS84wBR3v2Sg5TMBQR+YSuuMOWpi58Xpuqkjxtmi4iIiI5QcFQROQjzR1xFvz5Neq3RgA4cJ8K/mPevoT8mnskIiIig5uWchMRAbDg4ZfWJkMhwJL361n5YctODhIREREZHNIaDNvb25k3bx4bN24E4MUXX2T+/Pkcf/zx3HzzzSnPb2xs5NRTT03+N3v2bA466CAAWltbufjiiznppJM477zzqK+vT2fVRSTHJFzDO2ubUsrXbm4d8JvCi4iIiOxK2oLh0qVLOffcc1m7di0AkUiEq666iltvvZVHHnmE5cuXs2jRoh7HlJWVsXDhQhYuXMh9993H0KFDuf766wG45ZZbmDp1Ko8++ihnnnkmN954Y7qqLiI5yOexmbZvVUr5PiNKcF0tTyciIiKDW9qC4V133cW1115LZWX3hrHLli1j5MiRDB8+HK/Xy/z583nsscd2ePw///lP8vLymD9/PgDPPPNM8t/z5s3j2WefJR6Pp6v6IpJjjGs45uBh7D+2e/l624L5R45mdHU4wzUTERERSb+0LT7z6R69uro6Kioqko8rKyupra3d7rGO43Dbbbdx6623bvd4r9dLQUEBTU1NVFWl3uEXEdkThUEv//3ZKTS1RfF4LEry/WgQqYiIiOSCfluV1HVdLGvbJZYxpsfjT3ruuecYNWoUEyZM2OHrGWOw7d3r8CwrK9it5w82FRXq+ZBdUzuB6kr9DHZGbUR6Q+1EekPtRHZFbaT/9FswrK6u7rFgTH19fXKY6ac98cQTzJ07t0dZZWUlDQ0NVFdXk0gk6OjooLi4eLfq0NjYnrNzhSoqwtTXt2W6GpLl1E5kV9RGpDfUTqQ31E5kV9RG+pZtWzvtKOu37SqmTJnCmjVrWLduHY7j8NBDDzFz5sztPnfJkiVMnTq1R9msWbO4//77AXjkkUeYOnUqPp8v3dUWEREREREZ9PotGAYCARYsWMCll17K3LlzGTNmDCeeeCIAV199NU8++WTyuRs2bKC6urrH8ZdddhlLlizh5JNP5m9/+xvXXHNNf1VdRERERERkULOMMTkztlJDSdUVLzundiK7ojYivaF2Ir2hdiK7ojbSt7JmKKmIiGQvj8fC47XZwZpgIiIiMsj12+IzIiKSnRrbYyxa8iGrP2zh6IOHMXlUCXk+T6arJSIiIv1IwVBEJIe1RRLc8MdXae2IAbBiTRNnHDOOeYePJIdmGoiIiOQ8DSUVEclhHzZ0JEPhxx54bjXtkUSGaiQiIiKZoGAoIpLDtjel0Las7f8PERERGbQUDEVEctjQinzKCoM9ys44ZhwFQc00EBERySX65hcRyWEFAS9Xf+FQFr9bx9otrRw+uZrxQ4swObq1j4iISK5SMBQRyXHFIR/HTx2GbVskEm6mqyMiIiIZoGAoIiK4rsFVL6GIiEjO0hxDERERERGRHKdgKCIiIiIikuMUDEVERERERHKcgqGIiIiIiEiOUzAUERERERHJcQqGIiI5xrbAG+3E6yYyXRURERHJEtquQkQkh3g7Wmh++ikann6GYE01Q889BzNsNEY7VYiIiOQ09RiKiOQID4aGRx5m8/0Libe00Pbue7x3w43YjbWZrpqIiIhkmIKhiEiOsDpaqX/iyR5lJpEg+uGHGaqRiIiIZAsFQxGRXOH14i0oSCm2g4E9f8mudljzPmb1u3g7W/emdiIiIpJBmmMoIpIjnGABI75wIat+8ctkWWjUSPxDR7Any9B4W5tY/fOfE9m4EQB/RQXjrricRHFFH9VYRERE+ouCoYhIjjDG4Jt8ABOuu4autWvxFhcTHDWWRCi8269lWRZtb76RDIUAsfp6mp9/nqJTTsd1tZqNiIjIQKJgKCKSQ1zbC8PGEBw2BmCPegoBPB6Ljg9WppS3v/suJaeCuxd1FBERkf6nOYYiIrLbEgmX4kMPSSkvnTEDR72FIiIiA46CoYiI7JHAPpOoPnku2DZYFhWzjyE05UDtiSgiIjIAaSipiIjsESevgOLPfJbS2XMwxoWiUhzLk+lqiYiIyB5QMBQRkT3mYuMWlWW6GiIiIrKXNJRUREREREQkxykYioiIiIiI5DgFQxERERERkRynYCgiIiIiIpLjFAxFRERERERynFYlFckC3o4W4rVbsP1+7MoaHH8w01USERERkRyiYCiSYZ6Gzbz/w5tItLYCUHzoVGo+/wWcvIIM10xEREREcoWGkopkkMc4bL7nnmQoBNj62mLi69ZksFYiIiIikmsUDEUyyIpF6PhgZUp5dMsWLCsDFRLJIt6uNsyqd3HffQtva5P+JkRERNJIQ0lFMsgEQhQfOpX6J57sUR4cMQJjMlQpkSzgbW9mzc9+RteGjQB48kNM+N73SJTXZLhmIiIig5N6DEUyyMGiYu5cwpMmAWB5vQw9+0y8w0dmuGYimdX5zopkKARwOjqpffghPJbumIiIiKSDegxFMixRWMbwr30dt7kR2+fHLSrB0T0byWG2bRHZtCmlvHPNWiwnAbYvA7USEREZ3HT1KZIFEh4/bnkNiaIyXP1ZSo5zXUN438kp5WUzZ+J6/RmokYiIyOCnK1AREck63lFjGH7B+diBANg2FcfOofDw6biuhpKKiIikg4aSiojIHvEYB5obwAAlZTh2332lOL4g+cccy8Sph4Lr4IaLSehepoiISNooGIqIyG7zdrZRd+89NDyzCIDSGTOoPussEvlFffYergtuH76eiIiI7Jhuv4qIyG6xLOhcsTwZCgGaXniB9qVLtNegiIjIAKVgKCIiu8XjsWlZvDilfOsrr+D1ejJQIxEREdlbCoYiIrJbHMdQ8NHem58UnjwZx3EzUCMRERHZWwqGIiKyW4wxhA8+mNDoUcmy4LBhFB12uFYNFRERGaC0+IyIiOy2RLiUUd+6nETtZjAGb1UNiWB+pqslIiIie0jBUERE9kgiEIIRY7v/neG6iIiIyN7RUFIRERGRLGLbhkB8K4FEC7au1ESkn6jHUERERCRL+J12Ykv+RcPiR7Fsm8LDP4Nv4tHE7bxMV01EBjndhxIRERHJApYF7oaltL36ILgJTCJGy/P/wKp7L9NVE5EcoGAoIiIikgU8Huh8e1FKedcHr+Hx6JJNRNIrrZ8y7e3tzJs3j40bNwLw4osvMn/+fI4//nhuvvnm7R5TV1fHxRdfzGmnncY555yTPLalpYUvf/nLnHLKKXz2s5/lnXfeSWfVRURERPqVMTa+6rEp5b7KUdoKRkTSLm3BcOnSpZx77rmsXbsWgEgkwlVXXcWtt97KI488wvLly1m0KPWu2OWXX84xxxzD/fffz6mnnspPf/pTAP74xz+yzz778MADD/Bf//VfXH/99emquoiIZBHLAm9LI2blO1hbNuBJxDJdJZG0cByXvMlHY4cKk2WewnL8ow/CGAVDEUmvtC0+c9ddd3Httddy+eWXA7Bs2TJGjhzJ8OHDAZg/fz6PPfYYs2bNSh7T1NTEu+++yx//+EcAzjjjDKZPnw6A67p0dHQA0NXVRTAYTFfVRUQkm2xYzbs/XIAb6w6EVSedSOkpp+H49D0gg08kWEXp2d/HbdqIZdtYJcOIeIsyXS0RyQFpC4Y33nhjj8d1dXVUVFQkH1dWVlJbW9vjORs2bGDIkCEsWLCAxYsXU1FRwfe+9z0ALrroIs4++2yOPPJIOjo6uOOOO3a7TmVlBXtwJoNHRUU401WQAUDtRHalP9tIvKWFZb+9PRkKAWoffYyKGdMp3X+/fquH7D59luyNMAwZkelK9Au1E9kVtZH+02/bVbiui2VZycfGmB6PARKJBCtWrODSSy/lO9/5DnfffTdXXnklf/7zn7nhhhs477zz+PznP8+bb77J17/+dR5++GHy8/N7XYfGxvacHaNfURGmvr4t09WQLKd2IrvS323E27aVyOYtKeWd9Y3E6tvwtjUR3bgRy7bwDx1OoqC43+omO6bPEukNtRPZFbWRvmXb1k47yvptiavq6mrq6+uTj+vr66msrOzxnIqKCvLz8znmmGMAmDdvHsuWLQPgySef5IwzzgDgoIMOoqysjFWrVvVT7UVEJBNMqIDwhAkp5f7KSjxNtbx/zTWs+tnPWfmTn7Hy+uvxbq3fzquIiIjIrvRbMJwyZQpr1qxh3bp1OI7DQw89xMyZM3s8Z8SIEVRXVycXpXn66aeZPHkyABMnTuSJJ54AYO3atdTV1TF69Oj+qr6IiGSA4/Ez/EsXkTdsKAB2MMjoS76CXT2EpmeeIdHWnnxurKmJltdfx7atHb2ciIiI7EC/DSUNBAIsWLCASy+9lGg0yqxZszjxxBMBuPrqq5k9ezZz5szhV7/6Fddeey0/+clPKCgoYMGCBQAsWLCAa665ht/97nf4/X5+9KMfEQ5rzLGIyGCXKK1i9NXfw93ahB3MwyksAduic/XqlOdG1q+nyLZydtqAiIjInrJMDq1/rDmGGqMtO6d2IruSLW3EsiC6+GXW/ua2HuVjv/E1PPsemJlKSVK2tBPJbmonsitqI30ra+YYioiI9BVjIG/yfgw543Qsnw87EGD4eZ/DPy51PqKIiIjsWr8NJRUREdkeTzyKs3kD8YZGfOVleGqG4/gCuzzOCRZQOPcUimfOAsvCLSjEcfuhwiIiIoOQgqGIiGSMbRy2/vtRNt93f7Ks5jOnUTR3Pq7l2eXxrgE3/6PNv/ciFFpWdy+kiIhIrtJQUhERyRirqZ7N9y/sUbb5/oVYTenfdsKywLO1nujLz9Hx1L+wN6/HNupyTBfbAq8bQ4vGiohkJ/UYiohIxrhdXalddcZ0l6eZ3VTPB9d/f9uWF7bNhO9eBSPGpf29+4I3HsVtrMPy+6GkHKcXPayZ4m1tpOmpp2h5cwlFBx1I6TGzSRSVZbpaIiLyCQqGGWTbFrZt4TiuhjCJSE7ylFfgLy0l1tSULPOXluIpKyeRxve1LOh8Z0WPfRBxXTb/816Gff2bJMjekAXdQWvdrbfSsXIVWBZVJx5P6bxTcQKhTFcthTfWxdpf/YrONWsB6PrwQ1qWL2f05VeS8OdltnIiIpKkoaQZ4m1ppO2xh9j44wV0vbAIb0dLpqskItLvEsECxl3xbQr3mwy2TeF+kxl7+bdJ5KV7n1qLREdHSmm8tRUcJ83vvXdsy9D4+L+7QyGAMdQ++i/ia1P3dcwGTkNdMhR+rGvtOpyGusxUSEREtks9hhngjXSw+uabiWzcCEDrihWUzphB1YVfxLH1KxGR3JIoq2HYpV/DinZhAnkkPL60v6cxhvDkySmrzlTNnYvj9UMWj+Kw41G2vv5GSnnn6tWEJ+5Ptm1PbHm3/71meb3Z/GMWEck56jHMgETt5mQo/FjTCy/A1sYM1UhEJLMSHh/xUGG/hMKPmZrh7POdKynYZzzBmhpGXfwf5E05KOuH9htvoDvUfkreiBFZFwoBrLJKSmcc0aOsdMZ0rLLKDNVIRES2R91TmWBtZ0k2ywK0VJuISH8xlg1jJjDiW1eAcXG8fpzsy1UpHCwq586lbcUKorXdwzFLDjsM/5ixZOMgWMfjo+qcz1E8dSodKz8gf9x4AuPG4/TjTQAREdk1BcMM8FbVEBo9qseci/KjZ0GJVmgTEelviY+H8A+AUPixREklY793DYm6Wmy/H6u8EscbyHS1dsjJK8C7/8GUTDkE1zVZGWBFRHKdgmEGJAIhRv33f9P2xhu0v/suRYccQmjf/Uhk8VLjIiKSXRLBAhhRwEDaedF1B1D6FhHJMQqGGZIIlxI6+jjCc47HcVwS+q4UEREREZEMUTDMIGMMCSVCERERERHJMK1KKiIiIiIikuMUDEVERERERHKcgqGIiIiIiEiOUzAUERERERHJcQqGIiIiIiIiOU7BUEREREREJMcpGIqIiIiIiOQ4BUMREREREZEcp2AoIiIiIiKS4xQMRUREREREcpyCoYiIiIiISI5TMBQREREREclxCoYiIiIiIiI5TsFQREREREQkxykYioiIiIiI5DgFQxERERERkRynYCgiIiIiIpLjFAxFRERERERynIKhiIiIiIhIjlMwFBERERERyXEKhiIiIiIiIjlOwVBERERERCTHKRiKiIiIiIjkOAVDERERERGRHKdgKCIiIiIikuMUDEVERERERHKcgqGIiIiIiEiOUzAUERERERHJcQqGIiIiIiIiOU7BUEREREREJMcpGIqIiIiIiOQ4BUMREREREZEcp2AoIiIiIiKS4xQMRUREREREcpyCoYiIiIiISI5TMBQREREREclxCoYiIiIiIiI5Lq3BsL29nXnz5rFx40YAXnzxRebPn8/xxx/PzTffvN1j6urquPjiiznttNM455xzkse2t7fzzW9+k9NOO43TTjuNt99+O51VFxERERERyRlpC4ZLly7l3HPPZe3atQBEIhGuuuoqbr31Vh555BGWL1/OokWLUo67/PLLOeaYY7j//vs59dRT+elPfwrATTfdRE1NDffffz/f+MY3uO6669JVdRERERERkZziTdcL33XXXVx77bVcfvnlACxbtoyRI0cyfPhwAObPn89jjz3GrFmzksc0NTXx7rvv8sc//hGAM844g+nTp2OM4d///jdPPvkkADNnzqSmpiZdVRcREREREckpaQuGN954Y4/HdXV1VFRUJB9XVlZSW1vb4zkbNmxgyJAhLFiwgMWLF1NRUcH3vvc9Ghsb8fv9/O1vf+Ppp58mEAhw1VVXpavqIiIiIiIiOSVtwfDTXNfFsqzkY2NMj8cAiUSCFStWcOmll/Kd73yHu+++myuvvJKf/vSnNDQ0EA6H+cc//sELL7zAV7/61WQPYm+VlRX0ybkMVBUV4UxXQQYAtRPZFbUR6Q21E+kNtRPZFbWR/tNvwbC6upr6+vrk4/r6eiorK3s8p6Kigvz8fI455hgA5s2bxw9+8ANKSkrwer3MmzcPgBkzZtDZ2UljYyNlZWW9rkNjYzuua/rgbAaeioow9fVtma6GZDm1E9kVtRHpDbUT6Q21E9kVtZG+ZdvWTjvK+m27iilTprBmzRrWrVuH4zg89NBDzJw5s8dzRowYQXV1dXJRmqeffprJkyfj9/s54ogjePjhhwFYsmQJeXl5lJSU9Ff1RUREREREBq1+6zEMBAIsWLCASy+9lGg0yqxZszjxxBMBuPrqq5k9ezZz5szhV7/6Fddeey0/+clPKCgoYMGCBUD3nMVrrrmGv/3tb3i9Xm6++WZsW9swioiIiIiI7C3LGJMzYys1lFRd8bJzaieyK2oj0htqJ9IbaieyK2ojfStrhpKKiIiIiIhIdlIwFBERERERyXEKhiIiIiIiIjlOwVBERERERCTHKRiKiIiIiIjkOAVDERERERGRHKdgKCIiIiIikuMUDEVERERERHKcgqGIiIiIiEiOUzAUERERERHJcQqGIiIiIiIiOU7BUEREREREJMcpGIqIiIiIiOQ4BUMREREREZEcp2AoIiIiIiKS4xQMRUREREREcpyCoYiIiIiISI5TMBQREREREclx3kxXQEREspfHiWGam7B9XkxRWaarIyIiImmiYCgiItvlbWti4x130PrWciyPh5rTTiV82nzAynTVREREpI9pKKmIiKSwLWh84nFa31oOgHEcNv3zXtreez/DNRMREZF0UDAUEZEUdixC8yuvpZS3r1yJZanHUEREZLBRMBQRkRTG56dgn/Ep5XnDhmGMyUCNREREJJ0UDEVEJIWDTdVpp+IrKkqWFU05gPDEiRmslYiIiKSLFp8REZHtckqrGX/DDcS3bMb2+/FU1hCsKKetvi3TVRMREZE+pmAoIiI7lAgVYo0pxACJTFdGRERE0kZDSUVERERERHKcgqGIiIiIiEiOUzAUERERERHJcQqGIiIiIiIiOU7BUEREREREJMcpGIqIiIiIiOQ4BUMREREREZEcp2AoIiIiIiKS4xQMRUREREREcpyCoYiIiIiISI5TMBQREREREclxCoYiIiIiIiI5TsFQREREREQkxykYioiIiIiI5DgFQxERERERkRynYCgiIiIiIpLjFAxFRERERERynIKhiIiIiIhIjlMwFBERERERyXHeTFegP9m2lekqZFSun7/0jtqJ7IraiPSG2on0htqJ7IraSN/Z1c/SMsaYfqqLiIiIiIiIZCENJRUREREREclxCoYiIiIiIiI5TsFQREREREQkxykYioiIiIiI5DgFQxERERERkRynYCgiIiIiIpLjFAxFRERERERynIKhiIiIiIhIjlMwFBERERERyXHeTFdA9swFF1xAU1MTXm/3r/D6669n1apV/P73v8fj8XDYYYdx5ZVXJv//x5YtW8b3v/99YrEYQ4YM4Qc/+AEVFRW0trbyrW99iw0bNlBaWsott9xCRUVFJk5N+khft5GP3X333bz++ussWLCgX89H0qOv28mqVau45ppraG9vJxgMct111zFp0qRMnJr0ob5uJytXruS73/0unZ2dFBUVsWDBAoYOHZqJU5M+kq7vnC1btnDKKadw7733MmzYsH49J+l7fd1OXn31VS699FKqq6sB2Hfffbnpppv6/bwGDSMDjuu65sgjjzTxeDxZtmrVKnPUUUeZ2tpaY4wx1157rbnjjjtSjps1a5Z56aWXjDHGPPzww+Y///M/jTHGfP/73ze//e1vjTHG3Hfffeayyy7rhzORdElHG4lEIuYnP/mJOfDAA80VV1zRT2ci6ZSOdnLOOeeYp59+2hhjzIsvvmjmz5/fD2ci6ZSOdnL++eebRYsWGWOM+dvf/ma+8Y1v9MepSJqko40YY4zjOOaiiy4yBx54oNmwYUM/nImkUzrayR/+8Adz22239dMZDH4aSjoArV69GoCLLrqIU045hb/85S+89957HHjggVRWVgJwzDHH8MQTT/Q4rrm5mUgkwuGHH558zvPPP08sFuOZZ55h/vz5AMybN49nn32WeDzej2clfSkdbeS1117DdV2+/e1v9+/JSNqko52ceeaZHHXUUQBMmDCBzZs39+MZSTqko5388Y9/ZObMmbiuy6ZNmygsLOzfk5I+lY42AvD73/+eI444gpKSkn48G0mXdLSTt956i+eff5758+fzla98Rd85e0nBcABqbW1l+vTp/M///A//+7//y9///ndaWlpYunQpmzdvxnEcHnvsMRoaGnocV1JSQigU4vnnnwfg4YcfJh6P09zcTF1dXXLohtfrpaCggKampn4/N+kb6WgjRx55JJdf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\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Devide the stations to zones, based on kmeans2\n",
    "\n",
    "cor = []\n",
    "for station in listOfStations:\n",
    "    cor.append(station.getLongLat())\n",
    "coordinates= np.array(cor)\n",
    "x, y = kmeans2(whiten(coordinates), 12, iter = 50)  \n",
    "#y is the var with zones\n",
    "\n",
    "#Plot the zones\n",
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.scatterplot(data=coordinates, x=coordinates[:,0], y=coordinates[:,1], hue=y, palette=\"deep\")\n",
    "plt.title(\"Stations clustered by kmeans\", fontsize=20)\n",
    "plt.xlabel('Latitude', fontsize=12)\n",
    "plt.ylabel('Longitude', fontsize=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add zones to station object\n",
    "for i in range(len(listOfStations)):\n",
    "    listOfStations[i].setZone(y[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding data to stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Count trips from and to every station\n",
    "\n",
    "for index, row in o_df.iterrows():\n",
    "    sId = row[3]\n",
    "    eId = row[8]\n",
    "    for s in listOfStations:\n",
    "        if s.getId() == sId:\n",
    "            s.updateChange(-1)\n",
    "            sId=False\n",
    "        if s.getId() == eId:\n",
    "            s.updateChange(1)\n",
    "            eId=False\n",
    "        if not sId and not eId:\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new df to easier convert it to geojson\n",
    "newDf = pd.DataFrame(columns = [\"Id\", \"Name\", \"Longitude\", \"Latitude\", \"Change\", \"Zone\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Name</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Change</th>\n",
       "      <th>Zone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Id, Name, Longitude, Latitude, Change, Zone]\n",
       "Index: []"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fill newDf with data\n",
    "for s in listOfStations:\n",
    "    series = pd.Series(s.export(), index = newDf.columns)\n",
    "\n",
    "    newDf = newDf.append(series, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'type': 'file', 'filename': 'points.geojson', 'feature_count': 248}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create a geojson object for mapbox plot\n",
    "df_to_geojson(newDf, filename='points.geojson',\n",
    "              properties=['Id', 'Name','Change','Zone'],\n",
    "              lon='Latitude', lat='Longitude', precision=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MapBox \n",
    "To show dynamic maps in html, use a static geojson file\n",
    "\n",
    "Use the generated geojson file when running in jupyter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#For html version\n",
    "geoFile = \"https://raw.githubusercontent.com/anafvana/DAVE3625_FinalProject/master/points.geojson\"\n",
    "#For local usage:\n",
    "#geoFile ='points.geojson'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show the change in bikes for each station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Programering\\Programmer\\Anaconda\\envs\\dave3625\\lib\\site-packages\\IPython\\core\\display.py:717: UserWarning: Consider using IPython.display.IFrame instead\n",
      "  warnings.warn(\"Consider using IPython.display.IFrame instead\")\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<iframe id=\"map\", srcdoc=\"<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "<title>mapboxgl-jupyter viz</title>\n",
       "<meta charset='UTF-8' />\n",
       "<meta name='viewport'\n",
       "      content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n",
       "<script type='text/javascript'\n",
       "        src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>\n",
       "<link type='text/css'\n",
       "      href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' \n",
       "      rel='stylesheet' />\n",
       "\n",
       "<style type='text/css'>\n",
       "    body { margin:0; padding:0; }\n",
       "    .map { position: absolute; top:0; bottom:0; width:100%; }\n",
       "    .legend {\n",
       "        background-color: white;\n",
       "        color: #6e6e6e;\n",
       "        border-radius: 3px;\n",
       "        bottom: 10px;\n",
       "        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.10);\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        padding: 0;\n",
       "        position: absolute;\n",
       "        right: 10px;\n",
       "        z-index: 1;\n",
       "        min-width: 100px;\n",
       "    }\n",
       "   .legend.horizontal {bottom: 10px; text-align: left;}\n",
       "\n",
       "    /* legend header */\n",
       "    .legend .legend-header { border-radius: 3px 3px 0 0; background: white; }\n",
       "    .legend .legend-title {\n",
       "        padding: 6px 12px 6px 12px;\n",
       "        text-shadow: 0 0 2px white;\n",
       "        text-transform: capitalize;\n",
       "        text-align: center;\n",
       "        font-weight: bold !important;\n",
       "        font-size: 14px;\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        max-width: 160px;\n",
       "    }\n",
       "    .legend-title {padding: 6px 12px 6px 12px; text-shadow: 0 0 2px #FFF; text-transform: capitalize; text-align: center; max-width: 160px; font-size: 0.9em; font-weight: bold;}\n",
       "    .legend.horizontal .legend-title {text-align: left;}\n",
       "\n",
       "    /* legend items */\n",
       "    .legend-content {margin: 6px 12px 6px 12px; overflow: hidden; padding: 0; float: left; list-style: none; font-size: 0.8em;}\n",
       "    .legend.vertical .legend-item {white-space: nowrap;}\n",
       "    .legend-value {display: inline-block; line-height: 18px; vertical-align: top;}\n",
       "    .legend.horizontal ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal ul.legend-content li.legend-item {display: inline-block; float: left; width: 30px; margin-bottom: 0; text-align: center; min-height: 30px;}\n",
       "\n",
       "    /* legend key styles */\n",
       "    .legend-key {display: inline-block; height: 10px;}\n",
       "    .legend-key.default, .legend-key.square {border-radius: 0;}\n",
       "    .legend-key.circle {border-radius: 50%;}\n",
       "    .legend-key.rounded-square {border-radius: 20%;}\n",
       "    .legend.vertical .legend-key {width: 10px; margin-right: 5px; margin-left: 1px;}\n",
       "    .legend.horizontal .legend-key {width: 30px; margin-right: 0; margin-top: 1px; float: left;}\n",
       "    .legend.horizontal .legend-key.square, .legend.horizontal .legend-key.rounded-square, .legend.horizontal .legend-key.circle {margin-left: 10px; width: 10px;}\n",
       "    .legend.horizontal .legend-key.line {margin-left: 5px;}\n",
       "    .legend.horizontal .legend-key.line, .legend.vertical .legend-key.line {border-radius: 10%; width: 20px; height: 3px; margin-bottom: 2px;}\n",
       "\n",
       "    /* gradient bar alignment */\n",
       "    .gradient-bar {margin: 6px 12px 6px 12px;}\n",
       "    .legend.horizontal .gradient-bar {width: 88%; height: 10px;}\n",
       "    .legend.vertical .gradient-bar {width: 10px; min-height: 50px; position: absolute; bottom: 4px;}\n",
       "\n",
       "    /* contiguous vertical bars (discrete) */\n",
       "    .legend.vertical.contig .legend-key {height: 15px; width: 10px;}\n",
       "    .legend.vertical.contig li.legend-item {height: 15px;}\n",
       "    .legend.vertical.contig {padding-bottom: 6px;}\n",
       "\n",
       "    /* vertical radius legend */\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item {width: 30px; min-height: 20px;}\n",
       "\n",
       "    /* scale annotation */\n",
       "    .mapboxgl-ctrl.mapboxgl-ctrl-scale { border-color: #6e6e6e; \n",
       "                                         background-color: white; \n",
       "                                         color: #131516; }\n",
       "</style>\n",
       "\n",
       "\n",
       "<style>\n",
       "    .gradient-bar.bordered, .legend-key.bordered { border: solid grey 0.1px; }\n",
       "</style>\n",
       "\n",
       "\n",
       "</head>\n",
       "<body>\n",
       "\n",
       "<div id='map' class='map'></div>\n",
       "\n",
       "<script type='text/javascript'>\n",
       "\n",
       "var legendHeader;\n",
       "\n",
       "function calcColorLegend(myColorStops, title) {\n",
       "    // create legend\n",
       "    var legend = document.createElement('div'),\n",
       "        legendContainer = document.getElementsByClassName('mapboxgl-ctrl-bottom-right')[0];\n",
       "\n",
       "    if ('circle' === 'contiguous-bar') {\n",
       "        legend.className = 'legend vertical contig';\n",
       "    }\n",
       "    else {\n",
       "        legend.className = 'legend vertical';\n",
       "    }\n",
       "    legend.id = 'legend-0';\n",
       "    document.body.appendChild(legend);\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "    if (false === true) {\n",
       "        var gradientText = 'linear-gradient(to right, ',\n",
       "            gradient = document.createElement('div');\n",
       "        gradient.className = 'gradient-bar';\n",
       "        legend.appendChild(gradient);\n",
       "    }\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myColorStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-color-points-value-' + p)) {\n",
       "            // update the legend if it already exists\n",
       "            document.getElementById('legend-color-points-value-' + p).textContent = myColorStops[p][0];\n",
       "            document.getElementById('legend-color-points-id-' + p).style.backgroundColor = myColorStops[p][1];\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-color-points-id-' + p;\n",
       "            key.style.backgroundColor = myColorStops[p][1];\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-color-points-value-' + p;\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-color-points-value-' + p)\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myColorStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myColorStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myColorStops[p][0];\n",
       "            }\n",
       "            // add color stop to gradient list\n",
       "            if (false === true) {\n",
       "                if (p < myColorStops.length - 1) {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ', ';\n",
       "                }\n",
       "                else {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ')';\n",
       "                }\n",
       "                if ('vertical' === 'vertical') {\n",
       "                    gradientText = gradientText.replace('to right', 'to bottom');\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    if (false === true) {\n",
       "        // convert to gradient scale appearance\n",
       "        gradient.style.background = gradientText;\n",
       "        // hide legend keys generated above\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            keys[i].style.visibility = 'hidden';\n",
       "        }\n",
       "        if ('vertical' === 'vertical') {\n",
       "            gradient.style.height = (legendContent.offsetHeight - 6) + 'px';\n",
       "        }\n",
       "    }\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "        var gradientBars = document.getElementsByClassName('gradient-bar');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (gradientBars[i]) {\n",
       "                gradientBars[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "}\n",
       "\n",
       "\n",
       "function calcRadiusLegend(myRadiusStops, title, color) {\n",
       "\n",
       "    // maximum legend item height\n",
       "    var maxLegendItemHeight = 2 * myRadiusStops[myRadiusStops.length - 1][1];\n",
       "\n",
       "    // create legend\n",
       "    var legend = document.createElement('div');\n",
       "    legend.className = 'legend vertical legend-variable-radius';\n",
       "\n",
       "    legend.id = 'legend-1';\n",
       "    document.body.appendChild(legend);\n",
       "\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myRadiusStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-radius-points-value-' + p)) {\n",
       "            //update the legend if it already exists\n",
       "            document.getElementById('legend-radius-points-value-' + p).textContent = myRadiusStops[p][0];\n",
       "            document.getElementById('legend-radius-points-id-' + p).style.backgroundColor = color;\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            item.height = '' + maxLegendItemHeight + 'px';\n",
       "\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-radius-points-id-' + p;\n",
       "            key.style.backgroundColor = color;   \n",
       "\n",
       "            key.style.width = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "            key.style.height = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "\n",
       "            keyVerticalMargin = (maxLegendItemHeight - myRadiusStops[p][1] * 2) * 0.5;\n",
       "            key.style.marginTop = '' + keyVerticalMargin + 'px';\n",
       "            key.style.marginBottom = '' + keyVerticalMargin + 'px';\n",
       "\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-radius-points-value-' + p;\n",
       "\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-radius-points-value-' + p)\n",
       "\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myRadiusStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myRadiusStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myRadiusStops[p][0];\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       "function updateAttribMargin(legend) {\n",
       "\n",
       "    // default margin is based on calculated legend width\n",
       "    var attribMargin = legend.offsetWidth + 15;\n",
       "    \n",
       "    // if horizontal legend layout (multiple legends are stacked vertically)\n",
       "    if ('vertical' === 'horizontal') {\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin).toString() + 'px';\n",
       "    }\n",
       "    // vertical legend layout means multiple legends are side-by-side\n",
       "    else if ('vertical' === 'vertical') {\n",
       "        var currentMargin = Number(document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight.replace('px', ''));\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin + currentMargin).toString() + 'px';\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function updateLegendMargin(legend) {\n",
       "\n",
       "    var verticalLegends = document.getElementsByClassName('legend vertical'),\n",
       "        horizontalLegends = document.getElementsByClassName('legend horizontal');\n",
       "\n",
       "    if (verticalLegends.length > 1) {\n",
       "        for (i = 1; i < verticalLegends.length; i++) {\n",
       "            verticalLegends[i].style.marginRight = (legend.offsetWidth - 5).toString() + 'px';\n",
       "            var legend = verticalLegends[i];\n",
       "        }\n",
       "    }\n",
       "    else if (horizontalLegends.length > 1) {\n",
       "        for (i = 1; i < horizontalLegends.length; i++) {\n",
       "            horizontalLegends[i].style.marginBottom = (legend.offsetHeight + 15).toString() + 'px';\n",
       "            var legend = horizontalLegends[i];\n",
       "        }\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function generateInterpolateExpression(propertyValue, stops) {\n",
       "    var expression;\n",
       "    if (propertyValue == 'zoom') {\n",
       "        expression = ['interpolate', ['exponential', 1.2], ['zoom']]\n",
       "    }\n",
       "    else if (propertyValue == 'heatmap-density') {\n",
       "        expression = ['interpolate', ['linear'], ['heatmap-density']]\n",
       "    }\n",
       "    else {\n",
       "        expression = ['interpolate', ['linear'], ['get', propertyValue]]\n",
       "    }\n",
       "\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generateMatchExpression(propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    expression = ['match', ['get', propertyValue]]\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    expression.push(defaultValue)\n",
       "    \n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generatePropertyExpression(expressionType, propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    if (expressionType == 'match') {\n",
       "        expression = generateMatchExpression(propertyValue, stops, defaultValue)\n",
       "    }\n",
       "    else if (propertyValue == 'identity') {\n",
       "        expression = ['get', propertyValue]\n",
       "    }\n",
       "    else {\n",
       "        expression = generateInterpolateExpression(propertyValue, stops)\n",
       "    }\n",
       "\n",
       "    return expression\n",
       "}\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- main map creation code, extended by mapboxgl/templates/circle.html -->\n",
       "<script type='text/javascript'>\n",
       "\n",
       "    mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n",
       "\n",
       "    var transformRequest = function(url, resourceType) {\n",
       "        const isMapboxRequest = url.slice(8, 22) === 'api.mapbox.com' ||\n",
       "          url.slice(10, 26) === 'tiles.mapbox.com';\n",
       "      \n",
       "        return {\n",
       "          url: isMapboxRequest ? url.replace('?', '?pluginName=PythonMapboxgl&') : url\n",
       "        }\n",
       "    };\n",
       "\n",
       "    var map = new mapboxgl.Map({\n",
       "        container: 'map',\n",
       "        attributionControl: false,\n",
       "        style: 'mapbox://styles/mapbox/light-v10?optimize=true',\n",
       "        center: [10.77837, 59.928349],\n",
       "        zoom: 10,\n",
       "        pitch: 0,\n",
       "        bearing: 0,\n",
       "        scrollZoom: true,\n",
       "        touchZoom: true,\n",
       "        doubleClickZoom: true,\n",
       "        boxZoom: true,\n",
       "        preserveDrawingBuffer: false,\n",
       "        transformRequest: transformRequest\n",
       "    });\n",
       "\n",
       "    \n",
       "    \n",
       "        map.addControl(new mapboxgl.AttributionControl({ compact: true }));\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "        map.addControl(new mapboxgl.NavigationControl());\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "        \n",
       "            calcColorLegend([[-2000, 'rgb(213,62,79)'], [-1000, 'rgb(244,109,67)'], [-100, 'rgb(253,174,97)'], [-10, 'rgb(254,224,139)'], [0, 'rgb(255,255,191)'], [10, 'rgb(230,245,152)'], [100, 'rgb(171,221,164)'], [1000, 'rgb(102,194,165)'], [2000, 'rgb(50,136,189)']] , 'Change');\n",
       "        \n",
       "    \n",
       "        \n",
       "\n",
       "\n",
       "    \n",
       "        \n",
       "        \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    map.on('style.load', function() {\n",
       "        \n",
       "        \n",
       "\n",
       "        map.addSource('data', {\n",
       "            'type': 'geojson',\n",
       "            'data': 'https://raw.githubusercontent.com/anafvana/DAVE3625_FinalProject/master/points.geojson',\n",
       "            'buffer': 1,\n",
       "            'maxzoom': 14,\n",
       "            'generateId': true\n",
       "        });\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'label',\n",
       "            'source': 'data',\n",
       "            'type': 'symbol',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'layout': {\n",
       "                \n",
       "                'text-size' : generateInterpolateExpression('zoom', [[0, 8],[22, 3* 8]] ),\n",
       "                'text-offset': [0,-1]\n",
       "            },\n",
       "            'paint': {\n",
       "                'text-halo-color': 'white',\n",
       "                'text-halo-width': generatePropertyExpression('interpolate', 'zoom', [[0,1], [18,5* 1]]),\n",
       "                'text-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    '#131516']\n",
       "            }\n",
       "        }, 'waterway-label' )\n",
       "        \n",
       "        map.addLayer({\n",
       "            'id': 'circle',\n",
       "            'source': 'data',\n",
       "            'type': 'circle',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'paint': {\n",
       "                \n",
       "                    'circle-color': ['case',\n",
       "                        ['boolean', ['feature-state', 'hover'], false], \n",
       "                        'black',\n",
       "                        generatePropertyExpression('interpolate', 'Change', [[-2000, 'rgb(213,62,79)'], [-1000, 'rgb(244,109,67)'], [-100, 'rgb(253,174,97)'], [-10, 'rgb(254,224,139)'], [0, 'rgb(255,255,191)'], [10, 'rgb(230,245,152)'], [100, 'rgb(171,221,164)'], [1000, 'rgb(102,194,165)'], [2000, 'rgb(50,136,189)']], 'grey' )],\n",
       "                    \n",
       "                'circle-radius' : generatePropertyExpression('interpolate', 'zoom', [[0,3], [22,10 * 3]]),\n",
       "                'circle-stroke-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    'grey'],\n",
       "                'circle-stroke-width': generatePropertyExpression('interpolate', 'zoom', [[0,0.1], [18,5* 0.1]]),\n",
       "                'circle-opacity' : 1,\n",
       "                'circle-stroke-opacity' : 1\n",
       "            }\n",
       "        }, 'label');\n",
       "        \n",
       "        \n",
       "\n",
       "        // Popups\n",
       "        \n",
       "            var popupAction = 'mousemove',\n",
       "                popupSettings =  {\n",
       "                    closeButton: false,\n",
       "                    closeOnClick: false\n",
       "                };\n",
       "        \n",
       "\n",
       "        // Create a popup\n",
       "        var popup = new mapboxgl.Popup(popupSettings);\n",
       "\n",
       "        \n",
       "\n",
       "        var hoveredStateId = 0;\n",
       "        \n",
       "        // Show the popup on mouseover\n",
       "        map.on(popupAction, function(e) {\n",
       "            \n",
       "            var features = map.queryRenderedFeatures(e.point, {layers: ['circle', 'label'] });\n",
       "\n",
       "            if (features.length > 0) {\n",
       "                map.getCanvas().style.cursor = 'pointer';\n",
       "                var f = features[0];\n",
       "                newHoveredStateId = f.id;\n",
       "                if (newHoveredStateId != hoveredStateId) {\n",
       "                    map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "                    hoveredStateId = newHoveredStateId;\n",
       "                }\n",
       "                map.setFeatureState({source: 'data', id: hoveredStateId}, { hover: true});\n",
       "                let popup_html = '<div><li><b>Location</b>: ' + f.geometry.coordinates[0].toPrecision(6) + \n",
       "                    ', ' + f.geometry.coordinates[1].toPrecision(6) + '</li>';\n",
       "\n",
       "                for (key in f.properties) {\n",
       "                    popup_html += '<li><b> ' + key + '</b>: ' + f.properties[key] + ' </li>'\n",
       "                }\n",
       "\n",
       "                popup_html += '</div>'\n",
       "                popup.setLngLat(e.lngLat)\n",
       "                    .setHTML(popup_html)\n",
       "                    .addTo(map);\n",
       "            }\n",
       "            else {\n",
       "                map.getCanvas().style.cursor = '';\n",
       "                popup.remove();\n",
       "                map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "            }\n",
       "        });\n",
       "\n",
       "        \n",
       "        \n",
       "        // Fly to on click\n",
       "        map.on('click', 'circle', function(e) {\n",
       "            map.easeTo({\n",
       "                center: e.features[0].geometry.coordinates\n",
       "            });\n",
       "        });\n",
       "    });\n",
       "\n",
       "\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- add capability to export map or legend to image file -->\n",
       "\n",
       "\n",
       "</body>\n",
       "</html>\" style=\"width: 100%; height: 500px;\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the change of bikes for each station\n",
    "center =(10.77837,59.928349)\n",
    "zoom = 10\n",
    "\n",
    "# Generate data breaks and color stops from colorBrewer\n",
    "color_breaks = [-2000,-1000,-100,-10, 0,10,100,1000,2000]\n",
    "color_stops = create_color_stops(color_breaks, colors='Spectral')\n",
    "\n",
    "# Create the viz from the dataframe\n",
    "viz = CircleViz(geoFile,\n",
    "                access_token=token,\n",
    "                height='500px',\n",
    "                radius=3,\n",
    "                color_property = \"Change\",\n",
    "                color_stops = color_stops,\n",
    "                center = center,\n",
    "                zoom = zoom,\n",
    "                below_layer = 'waterway-label'\n",
    "              )\n",
    "viz.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show the zones on map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe id=\"map\", srcdoc=\"<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "<title>mapboxgl-jupyter viz</title>\n",
       "<meta charset='UTF-8' />\n",
       "<meta name='viewport'\n",
       "      content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n",
       "<script type='text/javascript'\n",
       "        src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>\n",
       "<link type='text/css'\n",
       "      href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' \n",
       "      rel='stylesheet' />\n",
       "\n",
       "<style type='text/css'>\n",
       "    body { margin:0; padding:0; }\n",
       "    .map { position: absolute; top:0; bottom:0; width:100%; }\n",
       "    .legend {\n",
       "        background-color: white;\n",
       "        color: #6e6e6e;\n",
       "        border-radius: 3px;\n",
       "        bottom: 10px;\n",
       "        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.10);\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        padding: 0;\n",
       "        position: absolute;\n",
       "        right: 10px;\n",
       "        z-index: 1;\n",
       "        min-width: 100px;\n",
       "    }\n",
       "   .legend.horizontal {bottom: 10px; text-align: left;}\n",
       "\n",
       "    /* legend header */\n",
       "    .legend .legend-header { border-radius: 3px 3px 0 0; background: white; }\n",
       "    .legend .legend-title {\n",
       "        padding: 6px 12px 6px 12px;\n",
       "        text-shadow: 0 0 2px white;\n",
       "        text-transform: capitalize;\n",
       "        text-align: center;\n",
       "        font-weight: bold !important;\n",
       "        font-size: 14px;\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        max-width: 160px;\n",
       "    }\n",
       "    .legend-title {padding: 6px 12px 6px 12px; text-shadow: 0 0 2px #FFF; text-transform: capitalize; text-align: center; max-width: 160px; font-size: 0.9em; font-weight: bold;}\n",
       "    .legend.horizontal .legend-title {text-align: left;}\n",
       "\n",
       "    /* legend items */\n",
       "    .legend-content {margin: 6px 12px 6px 12px; overflow: hidden; padding: 0; float: left; list-style: none; font-size: 0.8em;}\n",
       "    .legend.vertical .legend-item {white-space: nowrap;}\n",
       "    .legend-value {display: inline-block; line-height: 18px; vertical-align: top;}\n",
       "    .legend.horizontal ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal ul.legend-content li.legend-item {display: inline-block; float: left; width: 30px; margin-bottom: 0; text-align: center; min-height: 30px;}\n",
       "\n",
       "    /* legend key styles */\n",
       "    .legend-key {display: inline-block; height: 10px;}\n",
       "    .legend-key.default, .legend-key.square {border-radius: 0;}\n",
       "    .legend-key.circle {border-radius: 50%;}\n",
       "    .legend-key.rounded-square {border-radius: 20%;}\n",
       "    .legend.vertical .legend-key {width: 10px; margin-right: 5px; margin-left: 1px;}\n",
       "    .legend.horizontal .legend-key {width: 30px; margin-right: 0; margin-top: 1px; float: left;}\n",
       "    .legend.horizontal .legend-key.square, .legend.horizontal .legend-key.rounded-square, .legend.horizontal .legend-key.circle {margin-left: 10px; width: 10px;}\n",
       "    .legend.horizontal .legend-key.line {margin-left: 5px;}\n",
       "    .legend.horizontal .legend-key.line, .legend.vertical .legend-key.line {border-radius: 10%; width: 20px; height: 3px; margin-bottom: 2px;}\n",
       "\n",
       "    /* gradient bar alignment */\n",
       "    .gradient-bar {margin: 6px 12px 6px 12px;}\n",
       "    .legend.horizontal .gradient-bar {width: 88%; height: 10px;}\n",
       "    .legend.vertical .gradient-bar {width: 10px; min-height: 50px; position: absolute; bottom: 4px;}\n",
       "\n",
       "    /* contiguous vertical bars (discrete) */\n",
       "    .legend.vertical.contig .legend-key {height: 15px; width: 10px;}\n",
       "    .legend.vertical.contig li.legend-item {height: 15px;}\n",
       "    .legend.vertical.contig {padding-bottom: 6px;}\n",
       "\n",
       "    /* vertical radius legend */\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item {width: 30px; min-height: 20px;}\n",
       "\n",
       "    /* scale annotation */\n",
       "    .mapboxgl-ctrl.mapboxgl-ctrl-scale { border-color: #6e6e6e; \n",
       "                                         background-color: white; \n",
       "                                         color: #131516; }\n",
       "</style>\n",
       "\n",
       "\n",
       "<style>\n",
       "    .gradient-bar.bordered, .legend-key.bordered { border: solid grey 0.1px; }\n",
       "</style>\n",
       "\n",
       "\n",
       "</head>\n",
       "<body>\n",
       "\n",
       "<div id='map' class='map'></div>\n",
       "\n",
       "<script type='text/javascript'>\n",
       "\n",
       "var legendHeader;\n",
       "\n",
       "function calcColorLegend(myColorStops, title) {\n",
       "    // create legend\n",
       "    var legend = document.createElement('div'),\n",
       "        legendContainer = document.getElementsByClassName('mapboxgl-ctrl-bottom-right')[0];\n",
       "\n",
       "    if ('circle' === 'contiguous-bar') {\n",
       "        legend.className = 'legend vertical contig';\n",
       "    }\n",
       "    else {\n",
       "        legend.className = 'legend vertical';\n",
       "    }\n",
       "    legend.id = 'legend-0';\n",
       "    document.body.appendChild(legend);\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "    if (false === true) {\n",
       "        var gradientText = 'linear-gradient(to right, ',\n",
       "            gradient = document.createElement('div');\n",
       "        gradient.className = 'gradient-bar';\n",
       "        legend.appendChild(gradient);\n",
       "    }\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myColorStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-color-points-value-' + p)) {\n",
       "            // update the legend if it already exists\n",
       "            document.getElementById('legend-color-points-value-' + p).textContent = myColorStops[p][0];\n",
       "            document.getElementById('legend-color-points-id-' + p).style.backgroundColor = myColorStops[p][1];\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-color-points-id-' + p;\n",
       "            key.style.backgroundColor = myColorStops[p][1];\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-color-points-value-' + p;\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-color-points-value-' + p)\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myColorStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myColorStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myColorStops[p][0];\n",
       "            }\n",
       "            // add color stop to gradient list\n",
       "            if (false === true) {\n",
       "                if (p < myColorStops.length - 1) {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ', ';\n",
       "                }\n",
       "                else {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ')';\n",
       "                }\n",
       "                if ('vertical' === 'vertical') {\n",
       "                    gradientText = gradientText.replace('to right', 'to bottom');\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    if (false === true) {\n",
       "        // convert to gradient scale appearance\n",
       "        gradient.style.background = gradientText;\n",
       "        // hide legend keys generated above\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            keys[i].style.visibility = 'hidden';\n",
       "        }\n",
       "        if ('vertical' === 'vertical') {\n",
       "            gradient.style.height = (legendContent.offsetHeight - 6) + 'px';\n",
       "        }\n",
       "    }\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "        var gradientBars = document.getElementsByClassName('gradient-bar');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (gradientBars[i]) {\n",
       "                gradientBars[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "}\n",
       "\n",
       "\n",
       "function calcRadiusLegend(myRadiusStops, title, color) {\n",
       "\n",
       "    // maximum legend item height\n",
       "    var maxLegendItemHeight = 2 * myRadiusStops[myRadiusStops.length - 1][1];\n",
       "\n",
       "    // create legend\n",
       "    var legend = document.createElement('div');\n",
       "    legend.className = 'legend vertical legend-variable-radius';\n",
       "\n",
       "    legend.id = 'legend-1';\n",
       "    document.body.appendChild(legend);\n",
       "\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myRadiusStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-radius-points-value-' + p)) {\n",
       "            //update the legend if it already exists\n",
       "            document.getElementById('legend-radius-points-value-' + p).textContent = myRadiusStops[p][0];\n",
       "            document.getElementById('legend-radius-points-id-' + p).style.backgroundColor = color;\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            item.height = '' + maxLegendItemHeight + 'px';\n",
       "\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-radius-points-id-' + p;\n",
       "            key.style.backgroundColor = color;   \n",
       "\n",
       "            key.style.width = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "            key.style.height = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "\n",
       "            keyVerticalMargin = (maxLegendItemHeight - myRadiusStops[p][1] * 2) * 0.5;\n",
       "            key.style.marginTop = '' + keyVerticalMargin + 'px';\n",
       "            key.style.marginBottom = '' + keyVerticalMargin + 'px';\n",
       "\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-radius-points-value-' + p;\n",
       "\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-radius-points-value-' + p)\n",
       "\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myRadiusStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myRadiusStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myRadiusStops[p][0];\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       "function updateAttribMargin(legend) {\n",
       "\n",
       "    // default margin is based on calculated legend width\n",
       "    var attribMargin = legend.offsetWidth + 15;\n",
       "    \n",
       "    // if horizontal legend layout (multiple legends are stacked vertically)\n",
       "    if ('vertical' === 'horizontal') {\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin).toString() + 'px';\n",
       "    }\n",
       "    // vertical legend layout means multiple legends are side-by-side\n",
       "    else if ('vertical' === 'vertical') {\n",
       "        var currentMargin = Number(document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight.replace('px', ''));\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin + currentMargin).toString() + 'px';\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function updateLegendMargin(legend) {\n",
       "\n",
       "    var verticalLegends = document.getElementsByClassName('legend vertical'),\n",
       "        horizontalLegends = document.getElementsByClassName('legend horizontal');\n",
       "\n",
       "    if (verticalLegends.length > 1) {\n",
       "        for (i = 1; i < verticalLegends.length; i++) {\n",
       "            verticalLegends[i].style.marginRight = (legend.offsetWidth - 5).toString() + 'px';\n",
       "            var legend = verticalLegends[i];\n",
       "        }\n",
       "    }\n",
       "    else if (horizontalLegends.length > 1) {\n",
       "        for (i = 1; i < horizontalLegends.length; i++) {\n",
       "            horizontalLegends[i].style.marginBottom = (legend.offsetHeight + 15).toString() + 'px';\n",
       "            var legend = horizontalLegends[i];\n",
       "        }\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function generateInterpolateExpression(propertyValue, stops) {\n",
       "    var expression;\n",
       "    if (propertyValue == 'zoom') {\n",
       "        expression = ['interpolate', ['exponential', 1.2], ['zoom']]\n",
       "    }\n",
       "    else if (propertyValue == 'heatmap-density') {\n",
       "        expression = ['interpolate', ['linear'], ['heatmap-density']]\n",
       "    }\n",
       "    else {\n",
       "        expression = ['interpolate', ['linear'], ['get', propertyValue]]\n",
       "    }\n",
       "\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generateMatchExpression(propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    expression = ['match', ['get', propertyValue]]\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    expression.push(defaultValue)\n",
       "    \n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generatePropertyExpression(expressionType, propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    if (expressionType == 'match') {\n",
       "        expression = generateMatchExpression(propertyValue, stops, defaultValue)\n",
       "    }\n",
       "    else if (propertyValue == 'identity') {\n",
       "        expression = ['get', propertyValue]\n",
       "    }\n",
       "    else {\n",
       "        expression = generateInterpolateExpression(propertyValue, stops)\n",
       "    }\n",
       "\n",
       "    return expression\n",
       "}\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- main map creation code, extended by mapboxgl/templates/circle.html -->\n",
       "<script type='text/javascript'>\n",
       "\n",
       "    mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n",
       "\n",
       "    var transformRequest = function(url, resourceType) {\n",
       "        const isMapboxRequest = url.slice(8, 22) === 'api.mapbox.com' ||\n",
       "          url.slice(10, 26) === 'tiles.mapbox.com';\n",
       "      \n",
       "        return {\n",
       "          url: isMapboxRequest ? url.replace('?', '?pluginName=PythonMapboxgl&') : url\n",
       "        }\n",
       "    };\n",
       "\n",
       "    var map = new mapboxgl.Map({\n",
       "        container: 'map',\n",
       "        attributionControl: false,\n",
       "        style: 'mapbox://styles/mapbox/light-v10?optimize=true',\n",
       "        center: [10.77837, 59.928349],\n",
       "        zoom: 10,\n",
       "        pitch: 0,\n",
       "        bearing: 0,\n",
       "        scrollZoom: true,\n",
       "        touchZoom: true,\n",
       "        doubleClickZoom: true,\n",
       "        boxZoom: true,\n",
       "        preserveDrawingBuffer: false,\n",
       "        transformRequest: transformRequest\n",
       "    });\n",
       "\n",
       "    \n",
       "    \n",
       "        map.addControl(new mapboxgl.AttributionControl({ compact: true }));\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "        map.addControl(new mapboxgl.NavigationControl());\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "        \n",
       "            calcColorLegend([[1, 'rgb(141,211,199)'], [2, 'rgb(255,255,179)'], [3, 'rgb(190,186,218)'], [4, 'rgb(251,128,114)'], [5, 'rgb(128,177,211)'], [6, 'rgb(253,180,98)'], [7, 'rgb(179,222,105)'], [8, 'rgb(252,205,229)'], [9, 'rgb(217,217,217)'], [10, 'rgb(188,128,189)'], [11, 'rgb(204,235,197)'], [12, 'rgb(255,237,111)']] , 'Zone');\n",
       "        \n",
       "    \n",
       "        \n",
       "\n",
       "\n",
       "    \n",
       "        \n",
       "        \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    map.on('style.load', function() {\n",
       "        \n",
       "        \n",
       "\n",
       "        map.addSource('data', {\n",
       "            'type': 'geojson',\n",
       "            'data': 'https://raw.githubusercontent.com/anafvana/DAVE3625_FinalProject/master/points.geojson',\n",
       "            'buffer': 1,\n",
       "            'maxzoom': 14,\n",
       "            'generateId': true\n",
       "        });\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'label',\n",
       "            'source': 'data',\n",
       "            'type': 'symbol',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'layout': {\n",
       "                \n",
       "                'text-size' : generateInterpolateExpression('zoom', [[0, 8],[22, 3* 8]] ),\n",
       "                'text-offset': [0,-1]\n",
       "            },\n",
       "            'paint': {\n",
       "                'text-halo-color': 'white',\n",
       "                'text-halo-width': generatePropertyExpression('interpolate', 'zoom', [[0,1], [18,5* 1]]),\n",
       "                'text-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    '#131516']\n",
       "            }\n",
       "        }, 'waterway-label' )\n",
       "        \n",
       "        map.addLayer({\n",
       "            'id': 'circle',\n",
       "            'source': 'data',\n",
       "            'type': 'circle',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'paint': {\n",
       "                \n",
       "                    'circle-color': ['case',\n",
       "                        ['boolean', ['feature-state', 'hover'], false], \n",
       "                        'black',\n",
       "                        generatePropertyExpression('interpolate', 'Zone', [[1, 'rgb(141,211,199)'], [2, 'rgb(255,255,179)'], [3, 'rgb(190,186,218)'], [4, 'rgb(251,128,114)'], [5, 'rgb(128,177,211)'], [6, 'rgb(253,180,98)'], [7, 'rgb(179,222,105)'], [8, 'rgb(252,205,229)'], [9, 'rgb(217,217,217)'], [10, 'rgb(188,128,189)'], [11, 'rgb(204,235,197)'], [12, 'rgb(255,237,111)']], 'grey' )],\n",
       "                    \n",
       "                'circle-radius' : generatePropertyExpression('interpolate', 'zoom', [[0,3], [22,10 * 3]]),\n",
       "                'circle-stroke-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    'grey'],\n",
       "                'circle-stroke-width': generatePropertyExpression('interpolate', 'zoom', [[0,0.1], [18,5* 0.1]]),\n",
       "                'circle-opacity' : 1,\n",
       "                'circle-stroke-opacity' : 1\n",
       "            }\n",
       "        }, 'label');\n",
       "        \n",
       "        \n",
       "\n",
       "        // Popups\n",
       "        \n",
       "            var popupAction = 'mousemove',\n",
       "                popupSettings =  {\n",
       "                    closeButton: false,\n",
       "                    closeOnClick: false\n",
       "                };\n",
       "        \n",
       "\n",
       "        // Create a popup\n",
       "        var popup = new mapboxgl.Popup(popupSettings);\n",
       "\n",
       "        \n",
       "\n",
       "        var hoveredStateId = 0;\n",
       "        \n",
       "        // Show the popup on mouseover\n",
       "        map.on(popupAction, function(e) {\n",
       "            \n",
       "            var features = map.queryRenderedFeatures(e.point, {layers: ['circle', 'label'] });\n",
       "\n",
       "            if (features.length > 0) {\n",
       "                map.getCanvas().style.cursor = 'pointer';\n",
       "                var f = features[0];\n",
       "                newHoveredStateId = f.id;\n",
       "                if (newHoveredStateId != hoveredStateId) {\n",
       "                    map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "                    hoveredStateId = newHoveredStateId;\n",
       "                }\n",
       "                map.setFeatureState({source: 'data', id: hoveredStateId}, { hover: true});\n",
       "                let popup_html = '<div><li><b>Location</b>: ' + f.geometry.coordinates[0].toPrecision(6) + \n",
       "                    ', ' + f.geometry.coordinates[1].toPrecision(6) + '</li>';\n",
       "\n",
       "                for (key in f.properties) {\n",
       "                    popup_html += '<li><b> ' + key + '</b>: ' + f.properties[key] + ' </li>'\n",
       "                }\n",
       "\n",
       "                popup_html += '</div>'\n",
       "                popup.setLngLat(e.lngLat)\n",
       "                    .setHTML(popup_html)\n",
       "                    .addTo(map);\n",
       "            }\n",
       "            else {\n",
       "                map.getCanvas().style.cursor = '';\n",
       "                popup.remove();\n",
       "                map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "            }\n",
       "        });\n",
       "\n",
       "        \n",
       "        \n",
       "        // Fly to on click\n",
       "        map.on('click', 'circle', function(e) {\n",
       "            map.easeTo({\n",
       "                center: e.features[0].geometry.coordinates\n",
       "            });\n",
       "        });\n",
       "    });\n",
       "\n",
       "\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- add capability to export map or legend to image file -->\n",
       "\n",
       "\n",
       "</body>\n",
       "</html>\" style=\"width: 100%; height: 500px;\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot clustered zones on the map\n",
    "center =(10.77837,59.928349)\n",
    "zoom = 10\n",
    "\n",
    "# Generate data breaks and color stops from colorBrewer\n",
    "color_breaks = [1,2,3,4,5,6,7,8,9,10,11,12]\n",
    "color_stops = create_color_stops(color_breaks, colors='Set3')\n",
    "\n",
    "# Create the viz from the dataframe\n",
    "viz = CircleViz(geoFile,\n",
    "                access_token=token,\n",
    "                height='500px',\n",
    "                radius=3,\n",
    "                color_property = \"Zone\",\n",
    "                color_stops = color_stops,\n",
    "                center = center,\n",
    "                zoom = zoom,\n",
    "                below_layer = 'waterway-label'\n",
    "              )\n",
    "viz.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A overview of station clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe id=\"map\", srcdoc=\"<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "<title>mapboxgl-jupyter viz</title>\n",
       "<meta charset='UTF-8' />\n",
       "<meta name='viewport'\n",
       "      content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n",
       "<script type='text/javascript'\n",
       "        src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>\n",
       "<link type='text/css'\n",
       "      href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' \n",
       "      rel='stylesheet' />\n",
       "\n",
       "<style type='text/css'>\n",
       "    body { margin:0; padding:0; }\n",
       "    .map { position: absolute; top:0; bottom:0; width:100%; }\n",
       "    .legend {\n",
       "        background-color: white;\n",
       "        color: #6e6e6e;\n",
       "        border-radius: 3px;\n",
       "        bottom: 10px;\n",
       "        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.10);\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        padding: 0;\n",
       "        position: absolute;\n",
       "        right: 10px;\n",
       "        z-index: 1;\n",
       "        min-width: 100px;\n",
       "    }\n",
       "   .legend.horizontal {bottom: 10px; text-align: left;}\n",
       "\n",
       "    /* legend header */\n",
       "    .legend .legend-header { border-radius: 3px 3px 0 0; background: white; }\n",
       "    .legend .legend-title {\n",
       "        padding: 6px 12px 6px 12px;\n",
       "        text-shadow: 0 0 2px white;\n",
       "        text-transform: capitalize;\n",
       "        text-align: center;\n",
       "        font-weight: bold !important;\n",
       "        font-size: 14px;\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        max-width: 160px;\n",
       "    }\n",
       "    .legend-title {padding: 6px 12px 6px 12px; text-shadow: 0 0 2px #FFF; text-transform: capitalize; text-align: center; max-width: 160px; font-size: 0.9em; font-weight: bold;}\n",
       "    .legend.horizontal .legend-title {text-align: left;}\n",
       "\n",
       "    /* legend items */\n",
       "    .legend-content {margin: 6px 12px 6px 12px; overflow: hidden; padding: 0; float: left; list-style: none; font-size: 0.8em;}\n",
       "    .legend.vertical .legend-item {white-space: nowrap;}\n",
       "    .legend-value {display: inline-block; line-height: 18px; vertical-align: top;}\n",
       "    .legend.horizontal ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal ul.legend-content li.legend-item {display: inline-block; float: left; width: 30px; margin-bottom: 0; text-align: center; min-height: 30px;}\n",
       "\n",
       "    /* legend key styles */\n",
       "    .legend-key {display: inline-block; height: 10px;}\n",
       "    .legend-key.default, .legend-key.square {border-radius: 0;}\n",
       "    .legend-key.circle {border-radius: 50%;}\n",
       "    .legend-key.rounded-square {border-radius: 20%;}\n",
       "    .legend.vertical .legend-key {width: 10px; margin-right: 5px; margin-left: 1px;}\n",
       "    .legend.horizontal .legend-key {width: 30px; margin-right: 0; margin-top: 1px; float: left;}\n",
       "    .legend.horizontal .legend-key.square, .legend.horizontal .legend-key.rounded-square, .legend.horizontal .legend-key.circle {margin-left: 10px; width: 10px;}\n",
       "    .legend.horizontal .legend-key.line {margin-left: 5px;}\n",
       "    .legend.horizontal .legend-key.line, .legend.vertical .legend-key.line {border-radius: 10%; width: 20px; height: 3px; margin-bottom: 2px;}\n",
       "\n",
       "    /* gradient bar alignment */\n",
       "    .gradient-bar {margin: 6px 12px 6px 12px;}\n",
       "    .legend.horizontal .gradient-bar {width: 88%; height: 10px;}\n",
       "    .legend.vertical .gradient-bar {width: 10px; min-height: 50px; position: absolute; bottom: 4px;}\n",
       "\n",
       "    /* contiguous vertical bars (discrete) */\n",
       "    .legend.vertical.contig .legend-key {height: 15px; width: 10px;}\n",
       "    .legend.vertical.contig li.legend-item {height: 15px;}\n",
       "    .legend.vertical.contig {padding-bottom: 6px;}\n",
       "\n",
       "    /* vertical radius legend */\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item {width: 30px; min-height: 20px;}\n",
       "\n",
       "    /* scale annotation */\n",
       "    .mapboxgl-ctrl.mapboxgl-ctrl-scale { border-color: #6e6e6e; \n",
       "                                         background-color: white; \n",
       "                                         color: #131516; }\n",
       "</style>\n",
       "\n",
       "\n",
       "<style>\n",
       "    .gradient-bar.bordered, .legend-key.bordered { border: solid black 0.1px; }\n",
       "</style>\n",
       "\n",
       "\n",
       "</head>\n",
       "<body>\n",
       "\n",
       "<div id='map' class='map'></div>\n",
       "\n",
       "<script type='text/javascript'>\n",
       "\n",
       "var legendHeader;\n",
       "\n",
       "function calcColorLegend(myColorStops, title) {\n",
       "    // create legend\n",
       "    var legend = document.createElement('div'),\n",
       "        legendContainer = document.getElementsByClassName('mapboxgl-ctrl-bottom-right')[0];\n",
       "\n",
       "    if ('circle' === 'contiguous-bar') {\n",
       "        legend.className = 'legend vertical contig';\n",
       "    }\n",
       "    else {\n",
       "        legend.className = 'legend vertical';\n",
       "    }\n",
       "    legend.id = 'legend-0';\n",
       "    document.body.appendChild(legend);\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "    if (false === true) {\n",
       "        var gradientText = 'linear-gradient(to right, ',\n",
       "            gradient = document.createElement('div');\n",
       "        gradient.className = 'gradient-bar';\n",
       "        legend.appendChild(gradient);\n",
       "    }\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myColorStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-color-points-value-' + p)) {\n",
       "            // update the legend if it already exists\n",
       "            document.getElementById('legend-color-points-value-' + p).textContent = myColorStops[p][0];\n",
       "            document.getElementById('legend-color-points-id-' + p).style.backgroundColor = myColorStops[p][1];\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-color-points-id-' + p;\n",
       "            key.style.backgroundColor = myColorStops[p][1];\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-color-points-value-' + p;\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-color-points-value-' + p)\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myColorStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myColorStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myColorStops[p][0];\n",
       "            }\n",
       "            // add color stop to gradient list\n",
       "            if (false === true) {\n",
       "                if (p < myColorStops.length - 1) {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ', ';\n",
       "                }\n",
       "                else {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ')';\n",
       "                }\n",
       "                if ('vertical' === 'vertical') {\n",
       "                    gradientText = gradientText.replace('to right', 'to bottom');\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    if (false === true) {\n",
       "        // convert to gradient scale appearance\n",
       "        gradient.style.background = gradientText;\n",
       "        // hide legend keys generated above\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            keys[i].style.visibility = 'hidden';\n",
       "        }\n",
       "        if ('vertical' === 'vertical') {\n",
       "            gradient.style.height = (legendContent.offsetHeight - 6) + 'px';\n",
       "        }\n",
       "    }\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "        var gradientBars = document.getElementsByClassName('gradient-bar');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (gradientBars[i]) {\n",
       "                gradientBars[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "}\n",
       "\n",
       "\n",
       "function calcRadiusLegend(myRadiusStops, title, color) {\n",
       "\n",
       "    // maximum legend item height\n",
       "    var maxLegendItemHeight = 2 * myRadiusStops[myRadiusStops.length - 1][1];\n",
       "\n",
       "    // create legend\n",
       "    var legend = document.createElement('div');\n",
       "    legend.className = 'legend vertical legend-variable-radius';\n",
       "\n",
       "    legend.id = 'legend-1';\n",
       "    document.body.appendChild(legend);\n",
       "\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myRadiusStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-radius-points-value-' + p)) {\n",
       "            //update the legend if it already exists\n",
       "            document.getElementById('legend-radius-points-value-' + p).textContent = myRadiusStops[p][0];\n",
       "            document.getElementById('legend-radius-points-id-' + p).style.backgroundColor = color;\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            item.height = '' + maxLegendItemHeight + 'px';\n",
       "\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-radius-points-id-' + p;\n",
       "            key.style.backgroundColor = color;   \n",
       "\n",
       "            key.style.width = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "            key.style.height = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "\n",
       "            keyVerticalMargin = (maxLegendItemHeight - myRadiusStops[p][1] * 2) * 0.5;\n",
       "            key.style.marginTop = '' + keyVerticalMargin + 'px';\n",
       "            key.style.marginBottom = '' + keyVerticalMargin + 'px';\n",
       "\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-radius-points-value-' + p;\n",
       "\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-radius-points-value-' + p)\n",
       "\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myRadiusStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myRadiusStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myRadiusStops[p][0];\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       "function updateAttribMargin(legend) {\n",
       "\n",
       "    // default margin is based on calculated legend width\n",
       "    var attribMargin = legend.offsetWidth + 15;\n",
       "    \n",
       "    // if horizontal legend layout (multiple legends are stacked vertically)\n",
       "    if ('vertical' === 'horizontal') {\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin).toString() + 'px';\n",
       "    }\n",
       "    // vertical legend layout means multiple legends are side-by-side\n",
       "    else if ('vertical' === 'vertical') {\n",
       "        var currentMargin = Number(document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight.replace('px', ''));\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin + currentMargin).toString() + 'px';\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function updateLegendMargin(legend) {\n",
       "\n",
       "    var verticalLegends = document.getElementsByClassName('legend vertical'),\n",
       "        horizontalLegends = document.getElementsByClassName('legend horizontal');\n",
       "\n",
       "    if (verticalLegends.length > 1) {\n",
       "        for (i = 1; i < verticalLegends.length; i++) {\n",
       "            verticalLegends[i].style.marginRight = (legend.offsetWidth - 5).toString() + 'px';\n",
       "            var legend = verticalLegends[i];\n",
       "        }\n",
       "    }\n",
       "    else if (horizontalLegends.length > 1) {\n",
       "        for (i = 1; i < horizontalLegends.length; i++) {\n",
       "            horizontalLegends[i].style.marginBottom = (legend.offsetHeight + 15).toString() + 'px';\n",
       "            var legend = horizontalLegends[i];\n",
       "        }\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function generateInterpolateExpression(propertyValue, stops) {\n",
       "    var expression;\n",
       "    if (propertyValue == 'zoom') {\n",
       "        expression = ['interpolate', ['exponential', 1.2], ['zoom']]\n",
       "    }\n",
       "    else if (propertyValue == 'heatmap-density') {\n",
       "        expression = ['interpolate', ['linear'], ['heatmap-density']]\n",
       "    }\n",
       "    else {\n",
       "        expression = ['interpolate', ['linear'], ['get', propertyValue]]\n",
       "    }\n",
       "\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generateMatchExpression(propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    expression = ['match', ['get', propertyValue]]\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    expression.push(defaultValue)\n",
       "    \n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generatePropertyExpression(expressionType, propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    if (expressionType == 'match') {\n",
       "        expression = generateMatchExpression(propertyValue, stops, defaultValue)\n",
       "    }\n",
       "    else if (propertyValue == 'identity') {\n",
       "        expression = ['get', propertyValue]\n",
       "    }\n",
       "    else {\n",
       "        expression = generateInterpolateExpression(propertyValue, stops)\n",
       "    }\n",
       "\n",
       "    return expression\n",
       "}\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- main map creation code, extended by mapboxgl/templates/clustered_circle.html -->\n",
       "<script type='text/javascript'>\n",
       "\n",
       "    mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n",
       "\n",
       "    var transformRequest = function(url, resourceType) {\n",
       "        const isMapboxRequest = url.slice(8, 22) === 'api.mapbox.com' ||\n",
       "          url.slice(10, 26) === 'tiles.mapbox.com';\n",
       "      \n",
       "        return {\n",
       "          url: isMapboxRequest ? url.replace('?', '?pluginName=PythonMapboxgl&') : url\n",
       "        }\n",
       "    };\n",
       "\n",
       "    var map = new mapboxgl.Map({\n",
       "        container: 'map',\n",
       "        attributionControl: false,\n",
       "        style: 'mapbox://styles/mapbox/light-v10?optimize=true',\n",
       "        center: [10.77837, 59.928349],\n",
       "        zoom: 10,\n",
       "        pitch: 0,\n",
       "        bearing: 0,\n",
       "        scrollZoom: true,\n",
       "        touchZoom: true,\n",
       "        doubleClickZoom: true,\n",
       "        boxZoom: true,\n",
       "        preserveDrawingBuffer: false,\n",
       "        transformRequest: transformRequest\n",
       "    });\n",
       "\n",
       "    \n",
       "    \n",
       "        map.addControl(new mapboxgl.AttributionControl({ compact: true }));\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "        map.addControl(new mapboxgl.NavigationControl());\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "    \n",
       "    \n",
       "        calcColorLegend([[1, 'rgb(255,255,212)'], [5, 'rgb(254,217,142)'], [10, 'rgb(254,153,41)'], [15, 'rgb(204,76,2)']], 'Point Density');\n",
       "    \n",
       "\n",
       "\n",
       "\n",
       "    \n",
       "        \n",
       "        \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    map.on('style.load', function() {\n",
       "        \n",
       "        \n",
       "\n",
       "        map.addSource('data', {\n",
       "            'type': 'geojson',\n",
       "            'data': 'https://raw.githubusercontent.com/anafvana/DAVE3625_FinalProject/master/points.geojson',\n",
       "            'buffer': 0,\n",
       "            'maxzoom': 250 + 1,\n",
       "            'cluster': true,\n",
       "            'clusterMaxZoom': 250,\n",
       "            'clusterRadius': 30,\n",
       "            'generateId': true\n",
       "        });\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'label',\n",
       "            'source': 'data',\n",
       "            'type': 'symbol',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'layout': {\n",
       "                'text-field': '{point_count_abbreviated}',\n",
       "                'text-size' : generateInterpolateExpression('zoom', [[0, 12],[22, 3* 12]] ),\n",
       "            },\n",
       "            'paint': {\n",
       "                'text-halo-color': 'white',\n",
       "                'text-halo-width': generatePropertyExpression('interpolate', 'zoom', [[0,1], [18,5* 1]]),\n",
       "                'text-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    '#131516']\n",
       "            }\n",
       "        }, '' )\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'circle-cluster',\n",
       "            'source': 'data',\n",
       "            'type': 'circle',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'filter': ['has', 'point_count'],\n",
       "            'paint': {\n",
       "                'circle-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    generateInterpolateExpression( 'point_count', [[1, 'rgb(255,255,212)'], [5, 'rgb(254,217,142)'], [10, 'rgb(254,153,41)'], [15, 'rgb(204,76,2)']] )],\n",
       "                'circle-radius' : generateInterpolateExpression( 'point_count', [[1, 5], [10, 10], [50, 15], [100, 20]] ),\n",
       "                'circle-stroke-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', 'black'],\n",
       "                'circle-stroke-width': generatePropertyExpression('interpolate', 'zoom', [[0,0.1], [18,5* 0.1]]),\n",
       "                'circle-opacity' : 0.9,\n",
       "                'circle-stroke-opacity' : 0.9\n",
       "            }\n",
       "        }, 'label');\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'circle-unclustered',\n",
       "            'source': 'data',\n",
       "            'type': 'circle',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'filter': ['!has', 'point_count'],\n",
       "            'paint': {\n",
       "                'circle-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    'black'],\n",
       "                'circle-radius' : generateInterpolateExpression( 'zoom', [[0, 2 ], [22,10 * 2]]),\n",
       "                'circle-stroke-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    'black'],\n",
       "                'circle-stroke-width': generatePropertyExpression('interpolate', 'zoom', [[0,0.1], [18,5* 0.1]]),\n",
       "                'circle-opacity' : 0.9,\n",
       "                'circle-stroke-opacity' : 0.9\n",
       "            }\n",
       "        }, 'circle-cluster');\n",
       "        \n",
       "        \n",
       "\n",
       "        // Popups\n",
       "        \n",
       "            var popupAction = 'mousemove',\n",
       "                popupSettings =  {\n",
       "                    closeButton: false,\n",
       "                    closeOnClick: false\n",
       "                };\n",
       "        \n",
       "\n",
       "        // Create a popup\n",
       "        var popup = new mapboxgl.Popup(popupSettings);\n",
       "        \n",
       "        \n",
       "\n",
       "        var hoveredStateId = 0;\n",
       "        \n",
       "        // Show the popup on mouseover\n",
       "        map.on(popupAction, function(e) {\n",
       "            \n",
       "            var features = map.queryRenderedFeatures(e.point, {layers: ['circle-unclustered', 'circle-cluster', 'label'] });\n",
       "\n",
       "            if (features.length > 0) {\n",
       "                map.getCanvas().style.cursor = 'pointer';\n",
       "                var f = features[0];\n",
       "                newHoveredStateId = f.id;\n",
       "                if (newHoveredStateId != hoveredStateId) {\n",
       "                    map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "                    hoveredStateId = newHoveredStateId;\n",
       "                }\n",
       "                map.setFeatureState({source: 'data', id: hoveredStateId}, { hover: true});\n",
       "                let popup_html = '<div><li><b>Location</b>: ' + f.geometry.coordinates[0].toPrecision(6) + \n",
       "                    ', ' + f.geometry.coordinates[1].toPrecision(6) + '</li>';\n",
       "\n",
       "                for (key in f.properties) {\n",
       "                    popup_html += '<li><b> ' + key + '</b>: ' + f.properties[key] + ' </li>'\n",
       "                }\n",
       "\n",
       "                popup_html += '</div>'\n",
       "                popup.setLngLat(e.lngLat)\n",
       "                    .setHTML(popup_html)\n",
       "                    .addTo(map);\n",
       "            }\n",
       "            else {\n",
       "                map.getCanvas().style.cursor = '';\n",
       "                popup.remove();\n",
       "                map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "            }\n",
       "        });\n",
       "\n",
       "        \n",
       "        \n",
       "        map.on('click', 'circle-unclustered', function(e) {\n",
       "            map.easeTo({\n",
       "                center: e.features[0].geometry.coordinates\n",
       "            });\n",
       "        });\n",
       "\n",
       "        map.on('click', 'circle-cluster', function(e) {\n",
       "            map.easeTo({\n",
       "                center: e.features[0].geometry.coordinates\n",
       "            });\n",
       "        });\n",
       "    });\n",
       "\n",
       "\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- add capability to export map or legend to image file -->\n",
       "\n",
       "\n",
       "</body>\n",
       "</html>\" style=\"width: 100%; height: 500px;\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a clustered circle map\n",
    "color_stops = create_color_stops([1, 5, 10, 15], colors='YlOrBr')\n",
    "\n",
    "viz4 = ClusteredCircleViz(geoFile, \n",
    "                          access_token=token,\n",
    "                          color_stops=color_stops,\n",
    "                          stroke_color='black',\n",
    "                          radius_stops=[[1, 5], [10, 10], [50, 15], [100, 20]],\n",
    "                          radius_default=2,\n",
    "                          cluster_maxzoom=250,\n",
    "                          cluster_radius=30,\n",
    "                          label_size=12,\n",
    "                          opacity=0.9,\n",
    "                          center=center,\n",
    "                          zoom=zoom)\n",
    "viz4.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Unused mapplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe id=\"map\", srcdoc=\"<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "<title>mapboxgl-jupyter viz</title>\n",
       "<meta charset='UTF-8' />\n",
       "<meta name='viewport'\n",
       "      content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n",
       "<script type='text/javascript'\n",
       "        src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>\n",
       "<link type='text/css'\n",
       "      href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' \n",
       "      rel='stylesheet' />\n",
       "\n",
       "<style type='text/css'>\n",
       "    body { margin:0; padding:0; }\n",
       "    .map { position: absolute; top:0; bottom:0; width:100%; }\n",
       "    .legend {\n",
       "        background-color: white;\n",
       "        color: #6e6e6e;\n",
       "        border-radius: 3px;\n",
       "        bottom: 10px;\n",
       "        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.10);\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        padding: 0;\n",
       "        position: absolute;\n",
       "        right: 10px;\n",
       "        z-index: 1;\n",
       "        min-width: 100px;\n",
       "    }\n",
       "   .legend.horizontal {bottom: 10px; text-align: left;}\n",
       "\n",
       "    /* legend header */\n",
       "    .legend .legend-header { border-radius: 3px 3px 0 0; background: white; }\n",
       "    .legend .legend-title {\n",
       "        padding: 6px 12px 6px 12px;\n",
       "        text-shadow: 0 0 2px white;\n",
       "        text-transform: capitalize;\n",
       "        text-align: center;\n",
       "        font-weight: bold !important;\n",
       "        font-size: 14px;\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        max-width: 160px;\n",
       "    }\n",
       "    .legend-title {padding: 6px 12px 6px 12px; text-shadow: 0 0 2px #FFF; text-transform: capitalize; text-align: center; max-width: 160px; font-size: 0.9em; font-weight: bold;}\n",
       "    .legend.horizontal .legend-title {text-align: left;}\n",
       "\n",
       "    /* legend items */\n",
       "    .legend-content {margin: 6px 12px 6px 12px; overflow: hidden; padding: 0; float: left; list-style: none; font-size: 0.8em;}\n",
       "    .legend.vertical .legend-item {white-space: nowrap;}\n",
       "    .legend-value {display: inline-block; line-height: 18px; vertical-align: top;}\n",
       "    .legend.horizontal ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal ul.legend-content li.legend-item {display: inline-block; float: left; width: 30px; margin-bottom: 0; text-align: center; min-height: 30px;}\n",
       "\n",
       "    /* legend key styles */\n",
       "    .legend-key {display: inline-block; height: 10px;}\n",
       "    .legend-key.default, .legend-key.square {border-radius: 0;}\n",
       "    .legend-key.circle {border-radius: 50%;}\n",
       "    .legend-key.rounded-square {border-radius: 20%;}\n",
       "    .legend.vertical .legend-key {width: 10px; margin-right: 5px; margin-left: 1px;}\n",
       "    .legend.horizontal .legend-key {width: 30px; margin-right: 0; margin-top: 1px; float: left;}\n",
       "    .legend.horizontal .legend-key.square, .legend.horizontal .legend-key.rounded-square, .legend.horizontal .legend-key.circle {margin-left: 10px; width: 10px;}\n",
       "    .legend.horizontal .legend-key.line {margin-left: 5px;}\n",
       "    .legend.horizontal .legend-key.line, .legend.vertical .legend-key.line {border-radius: 10%; width: 20px; height: 3px; margin-bottom: 2px;}\n",
       "\n",
       "    /* gradient bar alignment */\n",
       "    .gradient-bar {margin: 6px 12px 6px 12px;}\n",
       "    .legend.horizontal .gradient-bar {width: 88%; height: 10px;}\n",
       "    .legend.vertical .gradient-bar {width: 10px; min-height: 50px; position: absolute; bottom: 4px;}\n",
       "\n",
       "    /* contiguous vertical bars (discrete) */\n",
       "    .legend.vertical.contig .legend-key {height: 15px; width: 10px;}\n",
       "    .legend.vertical.contig li.legend-item {height: 15px;}\n",
       "    .legend.vertical.contig {padding-bottom: 6px;}\n",
       "\n",
       "    /* vertical radius legend */\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item {width: 30px; min-height: 20px;}\n",
       "\n",
       "    /* scale annotation */\n",
       "    .mapboxgl-ctrl.mapboxgl-ctrl-scale { border-color: #6e6e6e; \n",
       "                                         background-color: white; \n",
       "                                         color: #131516; }\n",
       "</style>\n",
       "\n",
       "\n",
       "\n",
       "</head>\n",
       "<body>\n",
       "\n",
       "<div id='map' class='map'></div>\n",
       "\n",
       "<script type='text/javascript'>\n",
       "\n",
       "var legendHeader;\n",
       "\n",
       "function calcColorLegend(myColorStops, title) {\n",
       "    // create legend\n",
       "    var legend = document.createElement('div'),\n",
       "        legendContainer = document.getElementsByClassName('mapboxgl-ctrl-bottom-right')[0];\n",
       "\n",
       "    if ('square' === 'contiguous-bar') {\n",
       "        legend.className = 'legend vertical contig';\n",
       "    }\n",
       "    else {\n",
       "        legend.className = 'legend vertical';\n",
       "    }\n",
       "    legend.id = 'legend-0';\n",
       "    document.body.appendChild(legend);\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "    if (false === true) {\n",
       "        var gradientText = 'linear-gradient(to right, ',\n",
       "            gradient = document.createElement('div');\n",
       "        gradient.className = 'gradient-bar';\n",
       "        legend.appendChild(gradient);\n",
       "    }\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myColorStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-color-points-value-' + p)) {\n",
       "            // update the legend if it already exists\n",
       "            document.getElementById('legend-color-points-value-' + p).textContent = myColorStops[p][0];\n",
       "            document.getElementById('legend-color-points-id-' + p).style.backgroundColor = myColorStops[p][1];\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key square';\n",
       "            key.id = 'legend-color-points-id-' + p;\n",
       "            key.style.backgroundColor = myColorStops[p][1];\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-color-points-value-' + p;\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-color-points-value-' + p)\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myColorStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myColorStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myColorStops[p][0];\n",
       "            }\n",
       "            // add color stop to gradient list\n",
       "            if (false === true) {\n",
       "                if (p < myColorStops.length - 1) {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ', ';\n",
       "                }\n",
       "                else {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ')';\n",
       "                }\n",
       "                if ('vertical' === 'vertical') {\n",
       "                    gradientText = gradientText.replace('to right', 'to bottom');\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    if (false === true) {\n",
       "        // convert to gradient scale appearance\n",
       "        gradient.style.background = gradientText;\n",
       "        // hide legend keys generated above\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            keys[i].style.visibility = 'hidden';\n",
       "        }\n",
       "        if ('vertical' === 'vertical') {\n",
       "            gradient.style.height = (legendContent.offsetHeight - 6) + 'px';\n",
       "        }\n",
       "    }\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "        var gradientBars = document.getElementsByClassName('gradient-bar');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (gradientBars[i]) {\n",
       "                gradientBars[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "}\n",
       "\n",
       "\n",
       "function calcRadiusLegend(myRadiusStops, title, color) {\n",
       "\n",
       "    // maximum legend item height\n",
       "    var maxLegendItemHeight = 2 * myRadiusStops[myRadiusStops.length - 1][1];\n",
       "\n",
       "    // create legend\n",
       "    var legend = document.createElement('div');\n",
       "    legend.className = 'legend vertical legend-variable-radius';\n",
       "\n",
       "    legend.id = 'legend-1';\n",
       "    document.body.appendChild(legend);\n",
       "\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myRadiusStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-radius-points-value-' + p)) {\n",
       "            //update the legend if it already exists\n",
       "            document.getElementById('legend-radius-points-value-' + p).textContent = myRadiusStops[p][0];\n",
       "            document.getElementById('legend-radius-points-id-' + p).style.backgroundColor = color;\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            item.height = '' + maxLegendItemHeight + 'px';\n",
       "\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key square';\n",
       "            key.id = 'legend-radius-points-id-' + p;\n",
       "            key.style.backgroundColor = color;   \n",
       "\n",
       "            key.style.width = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "            key.style.height = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "\n",
       "            keyVerticalMargin = (maxLegendItemHeight - myRadiusStops[p][1] * 2) * 0.5;\n",
       "            key.style.marginTop = '' + keyVerticalMargin + 'px';\n",
       "            key.style.marginBottom = '' + keyVerticalMargin + 'px';\n",
       "\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-radius-points-value-' + p;\n",
       "\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-radius-points-value-' + p)\n",
       "\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myRadiusStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myRadiusStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myRadiusStops[p][0];\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       "function updateAttribMargin(legend) {\n",
       "\n",
       "    // default margin is based on calculated legend width\n",
       "    var attribMargin = legend.offsetWidth + 15;\n",
       "    \n",
       "    // if horizontal legend layout (multiple legends are stacked vertically)\n",
       "    if ('vertical' === 'horizontal') {\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin).toString() + 'px';\n",
       "    }\n",
       "    // vertical legend layout means multiple legends are side-by-side\n",
       "    else if ('vertical' === 'vertical') {\n",
       "        var currentMargin = Number(document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight.replace('px', ''));\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin + currentMargin).toString() + 'px';\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function updateLegendMargin(legend) {\n",
       "\n",
       "    var verticalLegends = document.getElementsByClassName('legend vertical'),\n",
       "        horizontalLegends = document.getElementsByClassName('legend horizontal');\n",
       "\n",
       "    if (verticalLegends.length > 1) {\n",
       "        for (i = 1; i < verticalLegends.length; i++) {\n",
       "            verticalLegends[i].style.marginRight = (legend.offsetWidth - 5).toString() + 'px';\n",
       "            var legend = verticalLegends[i];\n",
       "        }\n",
       "    }\n",
       "    else if (horizontalLegends.length > 1) {\n",
       "        for (i = 1; i < horizontalLegends.length; i++) {\n",
       "            horizontalLegends[i].style.marginBottom = (legend.offsetHeight + 15).toString() + 'px';\n",
       "            var legend = horizontalLegends[i];\n",
       "        }\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function generateInterpolateExpression(propertyValue, stops) {\n",
       "    var expression;\n",
       "    if (propertyValue == 'zoom') {\n",
       "        expression = ['interpolate', ['exponential', 1.2], ['zoom']]\n",
       "    }\n",
       "    else if (propertyValue == 'heatmap-density') {\n",
       "        expression = ['interpolate', ['linear'], ['heatmap-density']]\n",
       "    }\n",
       "    else {\n",
       "        expression = ['interpolate', ['linear'], ['get', propertyValue]]\n",
       "    }\n",
       "\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generateMatchExpression(propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    expression = ['match', ['get', propertyValue]]\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    expression.push(defaultValue)\n",
       "    \n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generatePropertyExpression(expressionType, propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    if (expressionType == 'match') {\n",
       "        expression = generateMatchExpression(propertyValue, stops, defaultValue)\n",
       "    }\n",
       "    else if (propertyValue == 'identity') {\n",
       "        expression = ['get', propertyValue]\n",
       "    }\n",
       "    else {\n",
       "        expression = generateInterpolateExpression(propertyValue, stops)\n",
       "    }\n",
       "\n",
       "    return expression\n",
       "}\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- main map creation code, extended by mapboxgl/templates/heatmap.html -->\n",
       "<script type='text/javascript'>\n",
       "\n",
       "    mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n",
       "\n",
       "    var transformRequest = function(url, resourceType) {\n",
       "        const isMapboxRequest = url.slice(8, 22) === 'api.mapbox.com' ||\n",
       "          url.slice(10, 26) === 'tiles.mapbox.com';\n",
       "      \n",
       "        return {\n",
       "          url: isMapboxRequest ? url.replace('?', '?pluginName=PythonMapboxgl&') : url\n",
       "        }\n",
       "    };\n",
       "\n",
       "    var map = new mapboxgl.Map({\n",
       "        container: 'map',\n",
       "        attributionControl: false,\n",
       "        style: 'mapbox://styles/mapbox/light-v10?optimize=true',\n",
       "        center: [10.77837, 59.928349],\n",
       "        zoom: 10,\n",
       "        pitch: 0,\n",
       "        bearing: 0,\n",
       "        scrollZoom: true,\n",
       "        touchZoom: true,\n",
       "        doubleClickZoom: true,\n",
       "        boxZoom: true,\n",
       "        preserveDrawingBuffer: false,\n",
       "        transformRequest: transformRequest\n",
       "    });\n",
       "\n",
       "    \n",
       "    \n",
       "        map.addControl(new mapboxgl.AttributionControl({ compact: true }));\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "        map.addControl(new mapboxgl.NavigationControl());\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "        \n",
       "        \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    map.on('style.load', function() {\n",
       "\n",
       "    \n",
       "\n",
       "        map.addSource('data', {\n",
       "            'type': 'geojson',\n",
       "            'data': 'https://raw.githubusercontent.com/anafvana/DAVE3625_FinalProject/master/points.geojson', //data from dataframe output to geojson\n",
       "            'buffer': 0,\n",
       "            'maxzoom': 14\n",
       "        });\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'heatmap',\n",
       "            'source': 'data',\n",
       "            'type': 'heatmap',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'paint': {\n",
       "                \n",
       "                    'heatmap-radius': generatePropertyExpression('interpolate', 'zoom', [[0, 2], [1, 40]]),\n",
       "                \n",
       "                \n",
       "                    'heatmap-weight': generateInterpolateExpression( 'Change', [[-176.2, 0.0], [-90.7, 0.12], [-36.2, 0.25], [-17.5, 0.38], [-3.8, 0.5], [4.9, 0.62], [26.6, 0.75], [239.6, 0.88]] ),\n",
       "                \n",
       "                \n",
       "                \n",
       "                    'heatmap-color' : generateInterpolateExpression('heatmap-density', [[1e-05, 'rgba(0,0,0,0)'], [0.01, 'rgb(254,235,226)'], [0.25, 'rgb(251,180,185)'], [0.5, 'rgb(247,104,161)'], [0.75, 'rgb(197,27,138)'], [1, 'rgb(122,1,119)']] ),\n",
       "                \n",
       "                'heatmap-opacity' : 0.8\n",
       "            }\n",
       "        }, 'waterway-label' );\n",
       "    \n",
       "    \n",
       "\n",
       "    });\n",
       "\n",
       "\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- add capability to export map or legend to image file -->\n",
       "\n",
       "\n",
       "</body>\n",
       "</html>\" style=\"width: 100%; height: 600px;\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Heatmap, dont make too much sense\n",
    "heatmap_color_stops = create_color_stops([0.01, 0.25, 0.5, 0.75, 1], colors='RdPu')\n",
    "heatmap_radius_stops = [[0, 2], [1, 40]] # increase radius with zoom\n",
    "\n",
    "color_breaks = [round(newDf[\"Change\"].quantile(q=x*0.1), 2) for x in range(2, 10)]\n",
    "color_stops = create_color_stops(color_breaks, colors='Spectral')\n",
    "\n",
    "heatmap_weight_stops = create_weight_stops(color_breaks)\n",
    "\n",
    "# Create the heatmap \n",
    "viz3 = HeatmapViz(geoFile, \n",
    "                  access_token=token,\n",
    "                  weight_property=\"Change\",\n",
    "                  weight_stops=heatmap_weight_stops,\n",
    "                  color_stops=heatmap_color_stops,\n",
    "                  radius_stops=heatmap_radius_stops,\n",
    "                  opacity=0.8,\n",
    "                  center=center,\n",
    "                  height='600px',\n",
    "                  zoom=zoom,\n",
    "                  below_layer='waterway-label')\n",
    "viz3.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe id=\"map\", srcdoc=\"<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "<title>mapboxgl-jupyter viz</title>\n",
       "<meta charset='UTF-8' />\n",
       "<meta name='viewport'\n",
       "      content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n",
       "<script type='text/javascript'\n",
       "        src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>\n",
       "<link type='text/css'\n",
       "      href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' \n",
       "      rel='stylesheet' />\n",
       "\n",
       "<style type='text/css'>\n",
       "    body { margin:0; padding:0; }\n",
       "    .map { position: absolute; top:0; bottom:0; width:100%; }\n",
       "    .legend {\n",
       "        background-color: white;\n",
       "        color: #6e6e6e;\n",
       "        border-radius: 3px;\n",
       "        bottom: 10px;\n",
       "        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.10);\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        padding: 0;\n",
       "        position: absolute;\n",
       "        right: 10px;\n",
       "        z-index: 1;\n",
       "        min-width: 100px;\n",
       "    }\n",
       "   .legend.horizontal {bottom: 10px; text-align: left;}\n",
       "\n",
       "    /* legend header */\n",
       "    .legend .legend-header { border-radius: 3px 3px 0 0; background: white; }\n",
       "    .legend .legend-title {\n",
       "        padding: 6px 12px 6px 12px;\n",
       "        text-shadow: 0 0 2px white;\n",
       "        text-transform: capitalize;\n",
       "        text-align: center;\n",
       "        font-weight: bold !important;\n",
       "        font-size: 14px;\n",
       "        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n",
       "        max-width: 160px;\n",
       "    }\n",
       "    .legend-title {padding: 6px 12px 6px 12px; text-shadow: 0 0 2px #FFF; text-transform: capitalize; text-align: center; max-width: 160px; font-size: 0.9em; font-weight: bold;}\n",
       "    .legend.horizontal .legend-title {text-align: left;}\n",
       "\n",
       "    /* legend items */\n",
       "    .legend-content {margin: 6px 12px 6px 12px; overflow: hidden; padding: 0; float: left; list-style: none; font-size: 0.8em;}\n",
       "    .legend.vertical .legend-item {white-space: nowrap;}\n",
       "    .legend-value {display: inline-block; line-height: 18px; vertical-align: top;}\n",
       "    .legend.horizontal ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal ul.legend-content li.legend-item {display: inline-block; float: left; width: 30px; margin-bottom: 0; text-align: center; min-height: 30px;}\n",
       "\n",
       "    /* legend key styles */\n",
       "    .legend-key {display: inline-block; height: 10px;}\n",
       "    .legend-key.default, .legend-key.square {border-radius: 0;}\n",
       "    .legend-key.circle {border-radius: 50%;}\n",
       "    .legend-key.rounded-square {border-radius: 20%;}\n",
       "    .legend.vertical .legend-key {width: 10px; margin-right: 5px; margin-left: 1px;}\n",
       "    .legend.horizontal .legend-key {width: 30px; margin-right: 0; margin-top: 1px; float: left;}\n",
       "    .legend.horizontal .legend-key.square, .legend.horizontal .legend-key.rounded-square, .legend.horizontal .legend-key.circle {margin-left: 10px; width: 10px;}\n",
       "    .legend.horizontal .legend-key.line {margin-left: 5px;}\n",
       "    .legend.horizontal .legend-key.line, .legend.vertical .legend-key.line {border-radius: 10%; width: 20px; height: 3px; margin-bottom: 2px;}\n",
       "\n",
       "    /* gradient bar alignment */\n",
       "    .gradient-bar {margin: 6px 12px 6px 12px;}\n",
       "    .legend.horizontal .gradient-bar {width: 88%; height: 10px;}\n",
       "    .legend.vertical .gradient-bar {width: 10px; min-height: 50px; position: absolute; bottom: 4px;}\n",
       "\n",
       "    /* contiguous vertical bars (discrete) */\n",
       "    .legend.vertical.contig .legend-key {height: 15px; width: 10px;}\n",
       "    .legend.vertical.contig li.legend-item {height: 15px;}\n",
       "    .legend.vertical.contig {padding-bottom: 6px;}\n",
       "\n",
       "    /* vertical radius legend */\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item .legend-value,\n",
       "    .legend.horizontal.legend-variable-radius ul.legend-content li.legend-item {width: 30px; min-height: 20px;}\n",
       "\n",
       "    /* scale annotation */\n",
       "    .mapboxgl-ctrl.mapboxgl-ctrl-scale { border-color: #6e6e6e; \n",
       "                                         background-color: white; \n",
       "                                         color: #131516; }\n",
       "</style>\n",
       "\n",
       "\n",
       "<style>\n",
       "    .gradient-bar.bordered, .legend-key.bordered { border: solid black 0.5px; }\n",
       "</style>\n",
       "\n",
       "\n",
       "</head>\n",
       "<body>\n",
       "\n",
       "<div id='map' class='map'></div>\n",
       "\n",
       "<script type='text/javascript'>\n",
       "\n",
       "var legendHeader;\n",
       "\n",
       "function calcColorLegend(myColorStops, title) {\n",
       "    // create legend\n",
       "    var legend = document.createElement('div'),\n",
       "        legendContainer = document.getElementsByClassName('mapboxgl-ctrl-bottom-right')[0];\n",
       "\n",
       "    if ('circle' === 'contiguous-bar') {\n",
       "        legend.className = 'legend vertical contig';\n",
       "    }\n",
       "    else {\n",
       "        legend.className = 'legend vertical';\n",
       "    }\n",
       "    legend.id = 'legend-0';\n",
       "    document.body.appendChild(legend);\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "    if (false === true) {\n",
       "        var gradientText = 'linear-gradient(to right, ',\n",
       "            gradient = document.createElement('div');\n",
       "        gradient.className = 'gradient-bar';\n",
       "        legend.appendChild(gradient);\n",
       "    }\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myColorStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-color-points-value-' + p)) {\n",
       "            // update the legend if it already exists\n",
       "            document.getElementById('legend-color-points-value-' + p).textContent = myColorStops[p][0];\n",
       "            document.getElementById('legend-color-points-id-' + p).style.backgroundColor = myColorStops[p][1];\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-color-points-id-' + p;\n",
       "            key.style.backgroundColor = myColorStops[p][1];\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-color-points-value-' + p;\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-color-points-value-' + p)\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myColorStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myColorStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myColorStops[p][0];\n",
       "            }\n",
       "            // add color stop to gradient list\n",
       "            if (false === true) {\n",
       "                if (p < myColorStops.length - 1) {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ', ';\n",
       "                }\n",
       "                else {\n",
       "                    gradientText = gradientText + myColorStops[p][1] + ')';\n",
       "                }\n",
       "                if ('vertical' === 'vertical') {\n",
       "                    gradientText = gradientText.replace('to right', 'to bottom');\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    if (false === true) {\n",
       "        // convert to gradient scale appearance\n",
       "        gradient.style.background = gradientText;\n",
       "        // hide legend keys generated above\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            keys[i].style.visibility = 'hidden';\n",
       "        }\n",
       "        if ('vertical' === 'vertical') {\n",
       "            gradient.style.height = (legendContent.offsetHeight - 6) + 'px';\n",
       "        }\n",
       "    }\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "        var gradientBars = document.getElementsByClassName('gradient-bar');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (gradientBars[i]) {\n",
       "                gradientBars[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "}\n",
       "\n",
       "\n",
       "function calcRadiusLegend(myRadiusStops, title, color) {\n",
       "\n",
       "    // maximum legend item height\n",
       "    var maxLegendItemHeight = 2 * myRadiusStops[myRadiusStops.length - 1][1];\n",
       "\n",
       "    // create legend\n",
       "    var legend = document.createElement('div');\n",
       "    legend.className = 'legend vertical legend-variable-radius';\n",
       "\n",
       "    legend.id = 'legend-1';\n",
       "    document.body.appendChild(legend);\n",
       "\n",
       "    // add legend header and content elements\n",
       "    var mytitle = document.createElement('div'),\n",
       "        legendContent = document.createElement('ul');\n",
       "    legendHeader = document.createElement('div');\n",
       "    mytitle.textContent = title;\n",
       "    mytitle.className = 'legend-title'\n",
       "    legendHeader.className = 'legend-header'\n",
       "    legendContent.className = 'legend-content'\n",
       "    legendHeader.appendChild(mytitle);\n",
       "    legend.appendChild(legendHeader);\n",
       "    legend.appendChild(legendContent);\n",
       "\n",
       "    // calculate a legend entries on a Mapbox GL Style Spec property function stops array\n",
       "    for (p = 0; p < myRadiusStops.length; p++) {\n",
       "        if (!!document.getElementById('legend-radius-points-value-' + p)) {\n",
       "            //update the legend if it already exists\n",
       "            document.getElementById('legend-radius-points-value-' + p).textContent = myRadiusStops[p][0];\n",
       "            document.getElementById('legend-radius-points-id-' + p).style.backgroundColor = color;\n",
       "        }\n",
       "        else {\n",
       "            // create the legend if it doesn't yet exist\n",
       "            var item = document.createElement('li');\n",
       "            item.className = 'legend-item';\n",
       "            item.height = '' + maxLegendItemHeight + 'px';\n",
       "\n",
       "            var key = document.createElement('span');\n",
       "            key.className = 'legend-key circle';\n",
       "            key.id = 'legend-radius-points-id-' + p;\n",
       "            key.style.backgroundColor = color;   \n",
       "\n",
       "            key.style.width = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "            key.style.height = '' + myRadiusStops[p][1] * 2 + 'px';\n",
       "\n",
       "            keyVerticalMargin = (maxLegendItemHeight - myRadiusStops[p][1] * 2) * 0.5;\n",
       "            key.style.marginTop = '' + keyVerticalMargin + 'px';\n",
       "            key.style.marginBottom = '' + keyVerticalMargin + 'px';\n",
       "\n",
       "            var value = document.createElement('span');\n",
       "            value.className = 'legend-value';\n",
       "            value.id = 'legend-radius-points-value-' + p;\n",
       "\n",
       "            item.appendChild(key);\n",
       "            item.appendChild(value);\n",
       "            legendContent.appendChild(item);\n",
       "            \n",
       "            data = document.getElementById('legend-radius-points-value-' + p)\n",
       "\n",
       "            // round number values in legend if precision defined\n",
       "            if ((typeof(myRadiusStops[p][0]) == 'number') && (typeof(null) == 'number')) {\n",
       "                data.textContent = myRadiusStops[p][0].toFixed(null);\n",
       "            }\n",
       "            else {\n",
       "                data.textContent = myRadiusStops[p][0];\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // add class for styling bordered legend keys\n",
       "    if (true) {\n",
       "        var keys = document.getElementsByClassName('legend-key');\n",
       "        for (var i=0; i < keys.length; i++) {\n",
       "            if (keys[i]) {\n",
       "                keys[i].classList.add('bordered');\n",
       "            }\n",
       "        }\n",
       "    }\n",
       "\n",
       "    // update right-margin for compact Mapbox attribution based on calculated legend width\n",
       "    updateAttribMargin(legend);\n",
       "    updateLegendMargin(legend);\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       "function updateAttribMargin(legend) {\n",
       "\n",
       "    // default margin is based on calculated legend width\n",
       "    var attribMargin = legend.offsetWidth + 15;\n",
       "    \n",
       "    // if horizontal legend layout (multiple legends are stacked vertically)\n",
       "    if ('vertical' === 'horizontal') {\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin).toString() + 'px';\n",
       "    }\n",
       "    // vertical legend layout means multiple legends are side-by-side\n",
       "    else if ('vertical' === 'vertical') {\n",
       "        var currentMargin = Number(document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight.replace('px', ''));\n",
       "        document.getElementsByClassName('mapboxgl-ctrl-attrib')[0].style.marginRight = (attribMargin + currentMargin).toString() + 'px';\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function updateLegendMargin(legend) {\n",
       "\n",
       "    var verticalLegends = document.getElementsByClassName('legend vertical'),\n",
       "        horizontalLegends = document.getElementsByClassName('legend horizontal');\n",
       "\n",
       "    if (verticalLegends.length > 1) {\n",
       "        for (i = 1; i < verticalLegends.length; i++) {\n",
       "            verticalLegends[i].style.marginRight = (legend.offsetWidth - 5).toString() + 'px';\n",
       "            var legend = verticalLegends[i];\n",
       "        }\n",
       "    }\n",
       "    else if (horizontalLegends.length > 1) {\n",
       "        for (i = 1; i < horizontalLegends.length; i++) {\n",
       "            horizontalLegends[i].style.marginBottom = (legend.offsetHeight + 15).toString() + 'px';\n",
       "            var legend = horizontalLegends[i];\n",
       "        }\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "function generateInterpolateExpression(propertyValue, stops) {\n",
       "    var expression;\n",
       "    if (propertyValue == 'zoom') {\n",
       "        expression = ['interpolate', ['exponential', 1.2], ['zoom']]\n",
       "    }\n",
       "    else if (propertyValue == 'heatmap-density') {\n",
       "        expression = ['interpolate', ['linear'], ['heatmap-density']]\n",
       "    }\n",
       "    else {\n",
       "        expression = ['interpolate', ['linear'], ['get', propertyValue]]\n",
       "    }\n",
       "\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generateMatchExpression(propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    expression = ['match', ['get', propertyValue]]\n",
       "    for (var i=0; i<stops.length; i++) {\n",
       "        expression.push(stops[i][0], stops[i][1])\n",
       "    }\n",
       "    expression.push(defaultValue)\n",
       "    \n",
       "    return expression\n",
       "}\n",
       "\n",
       "\n",
       "function generatePropertyExpression(expressionType, propertyValue, stops, defaultValue) {\n",
       "    var expression;\n",
       "    if (expressionType == 'match') {\n",
       "        expression = generateMatchExpression(propertyValue, stops, defaultValue)\n",
       "    }\n",
       "    else if (propertyValue == 'identity') {\n",
       "        expression = ['get', propertyValue]\n",
       "    }\n",
       "    else {\n",
       "        expression = generateInterpolateExpression(propertyValue, stops)\n",
       "    }\n",
       "\n",
       "    return expression\n",
       "}\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- main map creation code, extended by mapboxgl/templates/graduated_circle.html -->\n",
       "<script type='text/javascript'>\n",
       "\n",
       "    mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n",
       "\n",
       "    var transformRequest = function(url, resourceType) {\n",
       "        const isMapboxRequest = url.slice(8, 22) === 'api.mapbox.com' ||\n",
       "          url.slice(10, 26) === 'tiles.mapbox.com';\n",
       "      \n",
       "        return {\n",
       "          url: isMapboxRequest ? url.replace('?', '?pluginName=PythonMapboxgl&') : url\n",
       "        }\n",
       "    };\n",
       "\n",
       "    var map = new mapboxgl.Map({\n",
       "        container: 'map',\n",
       "        attributionControl: false,\n",
       "        style: 'mapbox://styles/mapbox/light-v10?optimize=true',\n",
       "        center: [10.77837, 59.928349],\n",
       "        zoom: 10,\n",
       "        pitch: 0,\n",
       "        bearing: 0,\n",
       "        scrollZoom: true,\n",
       "        touchZoom: true,\n",
       "        doubleClickZoom: true,\n",
       "        boxZoom: true,\n",
       "        preserveDrawingBuffer: false,\n",
       "        transformRequest: transformRequest\n",
       "    });\n",
       "\n",
       "    \n",
       "    \n",
       "        map.addControl(new mapboxgl.AttributionControl({ compact: true }));\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "        map.addControl(new mapboxgl.NavigationControl());\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "    \n",
       "    \n",
       "        \n",
       "        \n",
       "            \n",
       "            calcColorLegend([[-176.2, 'rgb(141,211,199)'], [-90.7, 'rgb(255,255,179)'], [-36.2, 'rgb(190,186,218)'], [-17.5, 'rgb(251,128,114)'], [-3.8, 'rgb(128,177,211)'], [4.9, 'rgb(253,180,98)'], [26.6, 'rgb(179,222,105)'], [239.6, 'rgb(252,205,229)']], 'Change');\n",
       "\n",
       "        \n",
       "\n",
       "        \n",
       "\n",
       "            calcRadiusLegend([[-176.2, 0.5], [-90.7, 2.94], [-36.2, 5.38], [-17.5, 7.81], [-3.8, 10.25], [4.9, 12.69], [26.6, 15.12], [239.6, 17.56]], 'Change', 'grey');\n",
       "        \n",
       "        \n",
       "\n",
       "    \n",
       "\n",
       "\n",
       "\n",
       "    \n",
       "        \n",
       "        \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    map.on('style.load', function() {\n",
       "        \n",
       "        \n",
       "\n",
       "        map.addSource('data', {\n",
       "            'type': 'geojson',\n",
       "            'data': 'https://raw.githubusercontent.com/anafvana/DAVE3625_FinalProject/master/points.geojson', //data from dataframe output to geojson\n",
       "            'buffer': 0,\n",
       "            'maxzoom': 14,\n",
       "            'generateId': true\n",
       "        });\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'label',\n",
       "            'source': 'data',\n",
       "            'type': 'symbol',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'layout': {\n",
       "                \n",
       "                'text-size' : generateInterpolateExpression('zoom', [[0, 8],[22, 3* 8]] ),\n",
       "                'text-offset': [0,-1]\n",
       "            },\n",
       "            'paint': {\n",
       "                'text-halo-color': 'white',\n",
       "                'text-halo-width': generatePropertyExpression('interpolate', 'zoom', [[0,1], [18,5* 1]]),\n",
       "                'text-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    '#131516']\n",
       "            }\n",
       "        }, 'waterway-label' )\n",
       "\n",
       "        map.addLayer({\n",
       "            'id': 'circle',\n",
       "            'source': 'data',\n",
       "            'type': 'circle',\n",
       "            'maxzoom': 24,\n",
       "            'minzoom': 0,\n",
       "            'paint': {\n",
       "                \n",
       "                    'circle-color': ['case',\n",
       "                        ['boolean', ['feature-state', 'hover'], false], \n",
       "                        'black', \n",
       "                        generatePropertyExpression('interpolate', 'Change', [[-176.2, 'rgb(141,211,199)'], [-90.7, 'rgb(255,255,179)'], [-36.2, 'rgb(190,186,218)'], [-17.5, 'rgb(251,128,114)'], [-3.8, 'rgb(128,177,211)'], [4.9, 'rgb(253,180,98)'], [26.6, 'rgb(179,222,105)'], [239.6, 'rgb(252,205,229)']], 'grey' )],\n",
       "                    \n",
       "                \n",
       "                    'circle-radius' : generatePropertyExpression('interpolate', 'Change', [[-176.2, 0.5], [-90.7, 2.94], [-36.2, 5.38], [-17.5, 7.81], [-3.8, 10.25], [4.9, 12.69], [26.6, 15.12], [239.6, 17.56]], 2 ),\n",
       "                    \n",
       "                'circle-stroke-color': ['case',\n",
       "                    ['boolean', ['feature-state', 'hover'], false], \n",
       "                    'black', \n",
       "                    'black'],\n",
       "                'circle-stroke-width': generatePropertyExpression('interpolate', 'zoom', [[0,0.5], [18,5* 0.5]]),\n",
       "                'circle-opacity' : 0.75,\n",
       "                'circle-stroke-opacity' : 0.75\n",
       "            }\n",
       "        }, 'label');\n",
       "        \n",
       "        \n",
       "\n",
       "        // Popups\n",
       "        \n",
       "            var popupAction = 'mousemove',\n",
       "                popupSettings =  {\n",
       "                    closeButton: false,\n",
       "                    closeOnClick: false\n",
       "                };\n",
       "        \n",
       "\n",
       "        // Create a popup\n",
       "        var popup = new mapboxgl.Popup(popupSettings);\n",
       "\n",
       "        \n",
       "        \n",
       "        var hoveredStateId = 0;\n",
       "        \n",
       "        // Show the popup on mouseover\n",
       "        map.on(popupAction, function(e) {\n",
       "            \n",
       "            var features = map.queryRenderedFeatures(e.point, {layers: ['circle', 'label'] });\n",
       "\n",
       "            if (features.length > 0) {\n",
       "                map.getCanvas().style.cursor = 'pointer';\n",
       "                var f = features[0];\n",
       "                newHoveredStateId = f.id;\n",
       "                if (newHoveredStateId != hoveredStateId) {\n",
       "                    map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "                    hoveredStateId = newHoveredStateId;\n",
       "                }\n",
       "                map.setFeatureState({source: 'data', id: hoveredStateId}, { hover: true});\n",
       "                let popup_html = '<div><li><b>Location</b>: ' + f.geometry.coordinates[0].toPrecision(6) + \n",
       "                    ', ' + f.geometry.coordinates[1].toPrecision(6) + '</li>';\n",
       "\n",
       "                for (key in f.properties) {\n",
       "                    popup_html += '<li><b> ' + key + '</b>: ' + f.properties[key] + ' </li>'\n",
       "                }\n",
       "\n",
       "                popup_html += '</div>'\n",
       "                popup.setLngLat(e.lngLat)\n",
       "                    .setHTML(popup_html)\n",
       "                    .addTo(map);\n",
       "            }\n",
       "            else {\n",
       "                map.getCanvas().style.cursor = '';\n",
       "                popup.remove();\n",
       "                map.removeFeatureState({source: 'data', id: hoveredStateId});\n",
       "            }\n",
       "        });\n",
       "\n",
       "        \n",
       "        \n",
       "        // Fly to on click\n",
       "        map.on('click', 'circle', function(e) {\n",
       "            map.easeTo({\n",
       "                center: e.features[0].geometry.coordinates\n",
       "            });\n",
       "        });\n",
       "    });\n",
       "    \n",
       "\n",
       "\n",
       "</script>\n",
       "\n",
       "<!-- add capability to export map or legend to image file -->\n",
       "\n",
       "\n",
       "</body>\n",
       "</html>\" style=\"width: 100%; height: 500px;\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#another change plot\n",
    "# Generate data breaks and color stops from colorBrewer\n",
    "measure_color = 'Change'\n",
    "color_breaks = [round(newDf[measure_color].quantile(q=x*0.1), 2) for x in range(2, 10)]\n",
    "color_stops = create_color_stops(color_breaks, colors='Set3')\n",
    "\n",
    "# Generate radius breaks from data domain and circle-radius range\n",
    "measure_radius = 'Change' #For testing\n",
    "radius_breaks = [round(newDf[measure_radius].quantile(q=x*0.1), 2) for x in range(2, 10)]\n",
    "radius_stops = create_radius_stops(radius_breaks, 0.5, 20)\n",
    "\n",
    "# Create the viz\n",
    "viz2 = GraduatedCircleViz(geoFile, \n",
    "                          access_token=token,\n",
    "                          color_property=\"Change\",\n",
    "                          color_stops=color_stops,\n",
    "                          radius_property=\"Change\",\n",
    "                          radius_stops=radius_stops,\n",
    "                          stroke_color='black',\n",
    "                          stroke_width=0.5,\n",
    "                          center=center,\n",
    "                          zoom=zoom,\n",
    "                          opacity=0.75,\n",
    "                          below_layer='waterway-label')\n",
    "viz2.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sample data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Name</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Change</th>\n",
       "      <th>Zone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>377</td>\n",
       "      <td>Tøyenparken</td>\n",
       "      <td>59.915667</td>\n",
       "      <td>10.777566</td>\n",
       "      <td>-88</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>378</td>\n",
       "      <td>Colosseum Kino</td>\n",
       "      <td>59.929843</td>\n",
       "      <td>10.711285</td>\n",
       "      <td>-7</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>380</td>\n",
       "      <td>Bentsebrugata</td>\n",
       "      <td>59.939230</td>\n",
       "      <td>10.759170</td>\n",
       "      <td>-120</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>381</td>\n",
       "      <td>Grønlands torg</td>\n",
       "      <td>59.912520</td>\n",
       "      <td>10.762240</td>\n",
       "      <td>128</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>382</td>\n",
       "      <td>Stensgata</td>\n",
       "      <td>59.929586</td>\n",
       "      <td>10.732839</td>\n",
       "      <td>-8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id            Name  Longitude   Latitude Change Zone\n",
       "0  377     Tøyenparken  59.915667  10.777566    -88    7\n",
       "1  378  Colosseum Kino  59.929843  10.711285     -7   11\n",
       "2  380   Bentsebrugata  59.939230  10.759170   -120    9\n",
       "3  381  Grønlands torg  59.912520  10.762240    128    0\n",
       "4  382       Stensgata  59.929586  10.732839     -8    1"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from geojson_utils import centroid\n",
    "newDf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Example dataset used for training and predicting\n",
    "sampleDf = pd.DataFrame(columns = [\"station_id\", \"capacity\", \"bikes_at_station\", \"timestamp\", \"status\", \"Delivered\", \"data1\", \"data..n\"])\n",
    "series = pd.Series([1,10,5,\"2020-08-01 08:51:09.122000+00:00\",0.5,0,\"sample\",\"sample\"],index = sampleDf.columns)\n",
    "sampleDf = sampleDf.append(series, ignore_index=True)\n",
    "series = pd.Series([1,10,6,\"2020-08-01 08:54:13.898000+00:00\",0.6,1,\"sample\",\"sample\"],index = sampleDf.columns)\n",
    "sampleDf = sampleDf.append(series, ignore_index=True)\n",
    "series = pd.Series([3,16,4,\"2020-08-01 08:54:14.878000+00:00\",0.25,0,\"sample\",\"sample\"],index = sampleDf.columns)\n",
    "sampleDf = sampleDf.append(series, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_id</th>\n",
       "      <th>capacity</th>\n",
       "      <th>bikes_at_station</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>status</th>\n",
       "      <th>Delivered</th>\n",
       "      <th>data1</th>\n",
       "      <th>data..n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>2020-08-01 08:51:09.122000+00:00</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0</td>\n",
       "      <td>sample</td>\n",
       "      <td>sample</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>2020-08-01 08:54:13.898000+00:00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>1</td>\n",
       "      <td>sample</td>\n",
       "      <td>sample</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>2020-08-01 08:54:14.878000+00:00</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0</td>\n",
       "      <td>sample</td>\n",
       "      <td>sample</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_id capacity bikes_at_station                         timestamp  \\\n",
       "0          1       10                5  2020-08-01 08:51:09.122000+00:00   \n",
       "1          1       10                6  2020-08-01 08:54:13.898000+00:00   \n",
       "2          3       16                4  2020-08-01 08:54:14.878000+00:00   \n",
       "\n",
       "   status Delivered   data1 data..n  \n",
       "0    0.50         0  sample  sample  \n",
       "1    0.60         1  sample  sample  \n",
       "2    0.25         0  sample  sample  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampleDf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
